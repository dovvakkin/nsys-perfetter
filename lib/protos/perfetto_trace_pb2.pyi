from typing import Iterable as _Iterable
from typing import ClassVar as _ClassVar
from typing import Mapping as _Mapping
from typing import Optional as _Optional
from typing import Union as _Union

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf.internal import containers as _containers
from google.protobuf.internal import enum_type_wrapper as _enum_type_wrapper
from google.protobuf.internal import python_message as _python_message

DESCRIPTOR: _descriptor.FileDescriptor

class BuiltinClock(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    BUILTIN_CLOCK_UNKNOWN: _ClassVar[BuiltinClock]
    BUILTIN_CLOCK_REALTIME: _ClassVar[BuiltinClock]
    BUILTIN_CLOCK_REALTIME_COARSE: _ClassVar[BuiltinClock]
    BUILTIN_CLOCK_MONOTONIC: _ClassVar[BuiltinClock]
    BUILTIN_CLOCK_MONOTONIC_COARSE: _ClassVar[BuiltinClock]
    BUILTIN_CLOCK_MONOTONIC_RAW: _ClassVar[BuiltinClock]
    BUILTIN_CLOCK_BOOTTIME: _ClassVar[BuiltinClock]
    BUILTIN_CLOCK_MAX_ID: _ClassVar[BuiltinClock]

class AndroidLogId(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    LID_DEFAULT: _ClassVar[AndroidLogId]
    LID_RADIO: _ClassVar[AndroidLogId]
    LID_EVENTS: _ClassVar[AndroidLogId]
    LID_SYSTEM: _ClassVar[AndroidLogId]
    LID_CRASH: _ClassVar[AndroidLogId]
    LID_STATS: _ClassVar[AndroidLogId]
    LID_SECURITY: _ClassVar[AndroidLogId]
    LID_KERNEL: _ClassVar[AndroidLogId]

class AndroidLogPriority(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    PRIO_UNSPECIFIED: _ClassVar[AndroidLogPriority]
    PRIO_UNUSED: _ClassVar[AndroidLogPriority]
    PRIO_VERBOSE: _ClassVar[AndroidLogPriority]
    PRIO_DEBUG: _ClassVar[AndroidLogPriority]
    PRIO_INFO: _ClassVar[AndroidLogPriority]
    PRIO_WARN: _ClassVar[AndroidLogPriority]
    PRIO_ERROR: _ClassVar[AndroidLogPriority]
    PRIO_FATAL: _ClassVar[AndroidLogPriority]

class ProtoLogLevel(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    PROTOLOG_LEVEL_UNDEFINED: _ClassVar[ProtoLogLevel]
    PROTOLOG_LEVEL_DEBUG: _ClassVar[ProtoLogLevel]
    PROTOLOG_LEVEL_VERBOSE: _ClassVar[ProtoLogLevel]
    PROTOLOG_LEVEL_INFO: _ClassVar[ProtoLogLevel]
    PROTOLOG_LEVEL_WARN: _ClassVar[ProtoLogLevel]
    PROTOLOG_LEVEL_ERROR: _ClassVar[ProtoLogLevel]
    PROTOLOG_LEVEL_WTF: _ClassVar[ProtoLogLevel]

class AtomId(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    ATOM_UNSPECIFIED: _ClassVar[AtomId]
    ATOM_BLE_SCAN_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_PROCESS_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_BLE_SCAN_RESULT_RECEIVED: _ClassVar[AtomId]
    ATOM_SENSOR_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_GPS_SCAN_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SYNC_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SCHEDULED_JOB_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SCREEN_BRIGHTNESS_CHANGED: _ClassVar[AtomId]
    ATOM_WAKELOCK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MOBILE_RADIO_POWER_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_RADIO_POWER_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MEMORY_FACTOR_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_EXCESSIVE_CPU_USAGE_REPORTED: _ClassVar[AtomId]
    ATOM_CACHED_KILL_REPORTED: _ClassVar[AtomId]
    ATOM_PROCESS_MEMORY_STAT_REPORTED: _ClassVar[AtomId]
    ATOM_LAUNCHER_EVENT: _ClassVar[AtomId]
    ATOM_BATTERY_SAVER_MODE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DEVICE_IDLE_MODE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DEVICE_IDLING_MODE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_AUDIO_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIA_CODEC_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_CAMERA_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_FLASHLIGHT_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_UID_PROCESS_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SCREEN_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_BATTERY_LEVEL_CHANGED: _ClassVar[AtomId]
    ATOM_CHARGING_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_PLUGGED_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_INTERACTIVE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_TOUCH_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_WAKEUP_ALARM_OCCURRED: _ClassVar[AtomId]
    ATOM_KERNEL_WAKEUP_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_LOCK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_SIGNAL_STRENGTH_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_SCAN_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_PHONE_SIGNAL_STRENGTH_CHANGED: _ClassVar[AtomId]
    ATOM_SETTING_CHANGED: _ClassVar[AtomId]
    ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_ISOLATED_UID_CHANGED: _ClassVar[AtomId]
    ATOM_PACKET_WAKEUP_OCCURRED: _ClassVar[AtomId]
    ATOM_WALL_CLOCK_TIME_SHIFTED: _ClassVar[AtomId]
    ATOM_ANOMALY_DETECTED: _ClassVar[AtomId]
    ATOM_APP_BREADCRUMB_REPORTED: _ClassVar[AtomId]
    ATOM_APP_START_OCCURRED: _ClassVar[AtomId]
    ATOM_APP_START_CANCELED: _ClassVar[AtomId]
    ATOM_APP_START_FULLY_DRAWN: _ClassVar[AtomId]
    ATOM_LMK_KILL_OCCURRED: _ClassVar[AtomId]
    ATOM_PICTURE_IN_PICTURE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_LMK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_APP_START_MEMORY_STATE_CAPTURED: _ClassVar[AtomId]
    ATOM_SHUTDOWN_SEQUENCE_REPORTED: _ClassVar[AtomId]
    ATOM_BOOT_SEQUENCE_REPORTED: _ClassVar[AtomId]
    ATOM_DAVEY_OCCURRED: _ClassVar[AtomId]
    ATOM_OVERLAY_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_FOREGROUND_SERVICE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_CALL_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_KEYGUARD_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_KEYGUARD_BOUNCER_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED: _ClassVar[AtomId]
    ATOM_APP_DIED: _ClassVar[AtomId]
    ATOM_RESOURCE_CONFIGURATION_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_ENABLED_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_GPS_SIGNAL_QUALITY_CHANGED: _ClassVar[AtomId]
    ATOM_USB_CONNECTOR_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SPEAKER_IMPEDANCE_REPORTED: _ClassVar[AtomId]
    ATOM_HARDWARE_FAILED: _ClassVar[AtomId]
    ATOM_PHYSICAL_DROP_DETECTED: _ClassVar[AtomId]
    ATOM_CHARGE_CYCLES_REPORTED: _ClassVar[AtomId]
    ATOM_MOBILE_CONNECTION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED: _ClassVar[AtomId]
    ATOM_USB_DEVICE_ATTACHED: _ClassVar[AtomId]
    ATOM_APP_CRASH_OCCURRED: _ClassVar[AtomId]
    ATOM_ANR_OCCURRED: _ClassVar[AtomId]
    ATOM_WTF_OCCURRED: _ClassVar[AtomId]
    ATOM_LOW_MEM_REPORTED: _ClassVar[AtomId]
    ATOM_GENERIC_ATOM: _ClassVar[AtomId]
    ATOM_VIBRATOR_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DEFERRED_JOB_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_THERMAL_THROTTLING: _ClassVar[AtomId]
    ATOM_BIOMETRIC_ACQUIRED: _ClassVar[AtomId]
    ATOM_BIOMETRIC_AUTHENTICATED: _ClassVar[AtomId]
    ATOM_BIOMETRIC_ERROR_OCCURRED: _ClassVar[AtomId]
    ATOM_UI_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_BATTERY_HEALTH_SNAPSHOT: _ClassVar[AtomId]
    ATOM_SLOW_IO: _ClassVar[AtomId]
    ATOM_BATTERY_CAUSED_SHUTDOWN: _ClassVar[AtomId]
    ATOM_PHONE_SERVICE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_PHONE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_USER_RESTRICTION_CHANGED: _ClassVar[AtomId]
    ATOM_SETTINGS_UI_CHANGED: _ClassVar[AtomId]
    ATOM_CONNECTIVITY_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SERVICE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SERVICE_LAUNCH_REPORTED: _ClassVar[AtomId]
    ATOM_FLAG_FLIP_UPDATE_OCCURRED: _ClassVar[AtomId]
    ATOM_BINARY_PUSH_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DEVICE_POLICY_EVENT: _ClassVar[AtomId]
    ATOM_DOCS_UI_FILE_OP_CANCELED: _ClassVar[AtomId]
    ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED: _ClassVar[AtomId]
    ATOM_DOCS_UI_FILE_OP_FAILURE: _ClassVar[AtomId]
    ATOM_DOCS_UI_PROVIDER_FILE_OP: _ClassVar[AtomId]
    ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST: _ClassVar[AtomId]
    ATOM_DOCS_UI_LAUNCH_REPORTED: _ClassVar[AtomId]
    ATOM_DOCS_UI_ROOT_VISITED: _ClassVar[AtomId]
    ATOM_DOCS_UI_STARTUP_MS: _ClassVar[AtomId]
    ATOM_DOCS_UI_USER_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_ENABLED_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_RUNNING_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_APP_COMPACTED: _ClassVar[AtomId]
    ATOM_NETWORK_DNS_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED: _ClassVar[AtomId]
    ATOM_DOCS_UI_PICK_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_DOCS_UI_SEARCH_MODE_REPORTED: _ClassVar[AtomId]
    ATOM_DOCS_UI_SEARCH_TYPE_REPORTED: _ClassVar[AtomId]
    ATOM_DATA_STALL_EVENT: _ClassVar[AtomId]
    ATOM_RESCUE_PARTY_RESET_REPORTED: _ClassVar[AtomId]
    ATOM_SIGNED_CONFIG_REPORTED: _ClassVar[AtomId]
    ATOM_GNSS_NI_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT: _ClassVar[AtomId]
    ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_APP_DOWNGRADED: _ClassVar[AtomId]
    ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED: _ClassVar[AtomId]
    ATOM_LOW_STORAGE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_GNSS_NFW_NOTIFICATION_REPORTED: _ClassVar[AtomId]
    ATOM_GNSS_CONFIGURATION_REPORTED: _ClassVar[AtomId]
    ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_NFC_ERROR_OCCURRED: _ClassVar[AtomId]
    ATOM_NFC_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_NFC_BEAM_OCCURRED: _ClassVar[AtomId]
    ATOM_NFC_CARDEMULATION_OCCURRED: _ClassVar[AtomId]
    ATOM_NFC_TAG_OCCURRED: _ClassVar[AtomId]
    ATOM_NFC_HCE_TRANSACTION_OCCURRED: _ClassVar[AtomId]
    ATOM_SE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SE_OMAPI_REPORTED: _ClassVar[AtomId]
    ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED: _ClassVar[AtomId]
    ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_ADB_CONNECTION_CHANGED: _ClassVar[AtomId]
    ATOM_SPEECH_DSP_STAT_REPORTED: _ClassVar[AtomId]
    ATOM_USB_CONTAMINANT_REPORTED: _ClassVar[AtomId]
    ATOM_WATCHDOG_ROLLBACK_OCCURRED: _ClassVar[AtomId]
    ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED: _ClassVar[AtomId]
    ATOM_BUBBLE_UI_CHANGED: _ClassVar[AtomId]
    ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_DEVICE_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_BOND_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED: _ClassVar[AtomId]
    ATOM_PROCESS_START_TIME: _ClassVar[AtomId]
    ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED: _ClassVar[AtomId]
    ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED: _ClassVar[AtomId]
    ATOM_ASSIST_GESTURE_STAGE_REPORTED: _ClassVar[AtomId]
    ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED: _ClassVar[AtomId]
    ATOM_ASSIST_GESTURE_PROGRESS_REPORTED: _ClassVar[AtomId]
    ATOM_TOUCH_GESTURE_CLASSIFIED: _ClassVar[AtomId]
    ATOM_HIDDEN_API_USED: _ClassVar[AtomId]
    ATOM_STYLE_UI_CHANGED: _ClassVar[AtomId]
    ATOM_PRIVACY_INDICATORS_INTERACTED: _ClassVar[AtomId]
    ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED: _ClassVar[AtomId]
    ATOM_NETWORK_STACK_REPORTED: _ClassVar[AtomId]
    ATOM_APP_MOVED_STORAGE_REPORTED: _ClassVar[AtomId]
    ATOM_BIOMETRIC_ENROLLED: _ClassVar[AtomId]
    ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED: _ClassVar[AtomId]
    ATOM_TOMB_STONE_OCCURRED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED: _ClassVar[AtomId]
    ATOM_INTELLIGENCE_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_ROLE_REQUEST_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_CODEC_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_MEDIADRM_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_NUPLAYER_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_RECORDER_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_POWER_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_GARAGE_MODE_INFO: _ClassVar[AtomId]
    ATOM_TEST_ATOM_REPORTED: _ClassVar[AtomId]
    ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED: _ClassVar[AtomId]
    ATOM_CONTENT_CAPTURE_SERVICE_EVENTS: _ClassVar[AtomId]
    ATOM_CONTENT_CAPTURE_SESSION_EVENTS: _ClassVar[AtomId]
    ATOM_CONTENT_CAPTURE_FLUSHED: _ClassVar[AtomId]
    ATOM_LOCATION_MANAGER_API_USAGE_REPORTED: _ClassVar[AtomId]
    ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT: _ClassVar[AtomId]
    ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS: _ClassVar[AtomId]
    ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION: _ClassVar[AtomId]
    ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_APP_PERMISSION_FRAGMENT_VIEWED: _ClassVar[AtomId]
    ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED: _ClassVar[AtomId]
    ATOM_PERMISSION_APPS_FRAGMENT_VIEWED: _ClassVar[AtomId]
    ATOM_TEXT_SELECTION_EVENT: _ClassVar[AtomId]
    ATOM_TEXT_LINKIFY_EVENT: _ClassVar[AtomId]
    ATOM_CONVERSATION_ACTIONS_EVENT: _ClassVar[AtomId]
    ATOM_LANGUAGE_DETECTION_EVENT: _ClassVar[AtomId]
    ATOM_EXCLUSION_RECT_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_BACK_GESTURE_REPORTED_REPORTED: _ClassVar[AtomId]
    ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED: _ClassVar[AtomId]
    ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED: _ClassVar[AtomId]
    ATOM_CAMERA_ACTION_EVENT: _ClassVar[AtomId]
    ATOM_APP_COMPATIBILITY_CHANGE_REPORTED: _ClassVar[AtomId]
    ATOM_PERFETTO_UPLOADED: _ClassVar[AtomId]
    ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIA_PROVIDER_SCAN_OCCURRED: _ClassVar[AtomId]
    ATOM_MEDIA_CONTENT_DELETED: _ClassVar[AtomId]
    ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED: _ClassVar[AtomId]
    ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED: _ClassVar[AtomId]
    ATOM_REBOOT_ESCROW_RECOVERY_REPORTED: _ClassVar[AtomId]
    ATOM_BOOT_TIME_EVENT_DURATION_REPORTED: _ClassVar[AtomId]
    ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED: _ClassVar[AtomId]
    ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED: _ClassVar[AtomId]
    ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED: _ClassVar[AtomId]
    ATOM_USERSPACE_REBOOT_REPORTED: _ClassVar[AtomId]
    ATOM_NOTIFICATION_REPORTED: _ClassVar[AtomId]
    ATOM_NOTIFICATION_PANEL_REPORTED: _ClassVar[AtomId]
    ATOM_NOTIFICATION_CHANNEL_MODIFIED: _ClassVar[AtomId]
    ATOM_INTEGRITY_CHECK_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_INTEGRITY_RULES_PUSHED: _ClassVar[AtomId]
    ATOM_CB_MESSAGE_REPORTED: _ClassVar[AtomId]
    ATOM_CB_MESSAGE_ERROR: _ClassVar[AtomId]
    ATOM_WIFI_HEALTH_STAT_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_FAILURE_STAT_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_CONNECTION_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_APP_FREEZE_CHANGED: _ClassVar[AtomId]
    ATOM_SNAPSHOT_MERGE_REPORTED: _ClassVar[AtomId]
    ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED: _ClassVar[AtomId]
    ATOM_DISPLAY_JANK_REPORTED: _ClassVar[AtomId]
    ATOM_APP_STANDBY_BUCKET_CHANGED: _ClassVar[AtomId]
    ATOM_SHARESHEET_STARTED: _ClassVar[AtomId]
    ATOM_RANKING_SELECTED: _ClassVar[AtomId]
    ATOM_TVSETTINGS_UI_INTERACTED: _ClassVar[AtomId]
    ATOM_LAUNCHER_SNAPSHOT: _ClassVar[AtomId]
    ATOM_PACKAGE_INSTALLER_V2_REPORTED: _ClassVar[AtomId]
    ATOM_USER_LIFECYCLE_JOURNEY_REPORTED: _ClassVar[AtomId]
    ATOM_USER_LIFECYCLE_EVENT_OCCURRED: _ClassVar[AtomId]
    ATOM_ACCESSIBILITY_SHORTCUT_REPORTED: _ClassVar[AtomId]
    ATOM_ACCESSIBILITY_SERVICE_REPORTED: _ClassVar[AtomId]
    ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED: _ClassVar[AtomId]
    ATOM_APP_USAGE_EVENT_OCCURRED: _ClassVar[AtomId]
    ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED: _ClassVar[AtomId]
    ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED: _ClassVar[AtomId]
    ATOM_AUTO_REVOKED_APP_INTERACTION: _ClassVar[AtomId]
    ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION: _ClassVar[AtomId]
    ATOM_EVS_USAGE_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_AUDIO_POWER_USAGE_DATA_REPORTED: _ClassVar[AtomId]
    ATOM_TV_TUNER_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED: _ClassVar[AtomId]
    ATOM_CB_MESSAGE_FILTERED: _ClassVar[AtomId]
    ATOM_TV_TUNER_DVR_STATUS: _ClassVar[AtomId]
    ATOM_TV_CAS_SESSION_OPEN_STATUS: _ClassVar[AtomId]
    ATOM_ASSISTANT_INVOCATION_REPORTED: _ClassVar[AtomId]
    ATOM_DISPLAY_WAKE_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED: _ClassVar[AtomId]
    ATOM_NETWORK_IP_PROVISIONING_REPORTED: _ClassVar[AtomId]
    ATOM_NETWORK_DHCP_RENEW_REPORTED: _ClassVar[AtomId]
    ATOM_NETWORK_VALIDATION_REPORTED: _ClassVar[AtomId]
    ATOM_NETWORK_STACK_QUIRK_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED: _ClassVar[AtomId]
    ATOM_BLOB_COMMITTED: _ClassVar[AtomId]
    ATOM_BLOB_LEASED: _ClassVar[AtomId]
    ATOM_BLOB_OPENED: _ClassVar[AtomId]
    ATOM_CONTACTS_PROVIDER_STATUS_REPORTED: _ClassVar[AtomId]
    ATOM_KEYSTORE_KEY_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_NETWORK_TETHERING_REPORTED: _ClassVar[AtomId]
    ATOM_IME_TOUCH_REPORTED: _ClassVar[AtomId]
    ATOM_UI_INTERACTION_FRAME_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_UI_ACTION_LATENCY_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_DISCONNECT_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_CONNECTION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED: _ClassVar[AtomId]
    ATOM_HDMI_CEC_MESSAGE_REPORTED: _ClassVar[AtomId]
    ATOM_AIRPLANE_MODE: _ClassVar[AtomId]
    ATOM_MODEM_RESTART: _ClassVar[AtomId]
    ATOM_CARRIER_ID_MISMATCH_REPORTED: _ClassVar[AtomId]
    ATOM_CARRIER_ID_TABLE_UPDATED: _ClassVar[AtomId]
    ATOM_DATA_STALL_RECOVERY_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED: _ClassVar[AtomId]
    ATOM_TLS_HANDSHAKE_REPORTED: _ClassVar[AtomId]
    ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED: _ClassVar[AtomId]
    ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_PLAYBACK_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIA_NETWORK_INFO_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIA_PLAYBACK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIA_PLAYBACK_ERROR_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIA_PLAYBACK_TRACK_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_SCAN_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_PNO_SCAN_REPORTED: _ClassVar[AtomId]
    ATOM_TIF_TUNE_CHANGED: _ClassVar[AtomId]
    ATOM_AUTO_ROTATE_REPORTED: _ClassVar[AtomId]
    ATOM_PERFETTO_TRIGGER: _ClassVar[AtomId]
    ATOM_TRANSCODING_DATA: _ClassVar[AtomId]
    ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED: _ClassVar[AtomId]
    ATOM_DEVICE_ROTATED: _ClassVar[AtomId]
    ATOM_SIM_SPECIFIC_SETTINGS_RESTORED: _ClassVar[AtomId]
    ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED: _ClassVar[AtomId]
    ATOM_PIN_STORAGE_EVENT: _ClassVar[AtomId]
    ATOM_FACE_DOWN_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED: _ClassVar[AtomId]
    ATOM_REBOOT_ESCROW_PREPARATION_REPORTED: _ClassVar[AtomId]
    ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED: _ClassVar[AtomId]
    ATOM_REBOOT_ESCROW_REBOOT_REPORTED: _ClassVar[AtomId]
    ATOM_BINDER_LATENCY_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIA_TRANSCODING_SESSION_ENDED: _ClassVar[AtomId]
    ATOM_MAGNIFICATION_USAGE_REPORTED: _ClassVar[AtomId]
    ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED: _ClassVar[AtomId]
    ATOM_APP_SEARCH_CALL_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_DEVICE_CONTROL_CHANGED: _ClassVar[AtomId]
    ATOM_DEVICE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_INPUTDEVICE_REGISTERED: _ClassVar[AtomId]
    ATOM_SMARTSPACE_CARD_REPORTED: _ClassVar[AtomId]
    ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED: _ClassVar[AtomId]
    ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED: _ClassVar[AtomId]
    ATOM_AUTH_ENROLL_ACTION_INVOKED: _ClassVar[AtomId]
    ATOM_AUTH_DEPRECATED_API_USED: _ClassVar[AtomId]
    ATOM_UNATTENDED_REBOOT_OCCURRED: _ClassVar[AtomId]
    ATOM_LONG_REBOOT_BLOCKING_REPORTED: _ClassVar[AtomId]
    ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_FDTRACK_EVENT_OCCURRED: _ClassVar[AtomId]
    ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED: _ClassVar[AtomId]
    ATOM_ALARM_BATCH_DELIVERED: _ClassVar[AtomId]
    ATOM_ALARM_SCHEDULED: _ClassVar[AtomId]
    ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_APP_SEARCH_QUERY_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_APP_PROCESS_DIED: _ClassVar[AtomId]
    ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED: _ClassVar[AtomId]
    ATOM_SLOW_INPUT_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_ANR_OCCURRED_PROCESSING_STARTED: _ClassVar[AtomId]
    ATOM_APP_SEARCH_REMOVE_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIA_CODEC_REPORTED: _ClassVar[AtomId]
    ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION: _ClassVar[AtomId]
    ATOM_PERMISSION_DETAILS_INTERACTION: _ClassVar[AtomId]
    ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION: _ClassVar[AtomId]
    ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION: _ClassVar[AtomId]
    ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT: _ClassVar[AtomId]
    ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_APP_COMPAT_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_SPLITSCREEN_UI_CHANGED: _ClassVar[AtomId]
    ATOM_NETWORK_DNS_HANDSHAKE_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_CODE_PATH_COUNTER: _ClassVar[AtomId]
    ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY: _ClassVar[AtomId]
    ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED: _ClassVar[AtomId]
    ATOM_NEURALNETWORKS_COMPILATION_COMPLETED: _ClassVar[AtomId]
    ATOM_NEURALNETWORKS_EXECUTION_COMPLETED: _ClassVar[AtomId]
    ATOM_NEURALNETWORKS_COMPILATION_FAILED: _ClassVar[AtomId]
    ATOM_NEURALNETWORKS_EXECUTION_FAILED: _ClassVar[AtomId]
    ATOM_CONTEXT_HUB_BOOTED: _ClassVar[AtomId]
    ATOM_CONTEXT_HUB_RESTARTED: _ClassVar[AtomId]
    ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED: _ClassVar[AtomId]
    ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED: _ClassVar[AtomId]
    ATOM_UWB_SESSION_INITED: _ClassVar[AtomId]
    ATOM_UWB_SESSION_CLOSED: _ClassVar[AtomId]
    ATOM_UWB_FIRST_RANGING_RECEIVED: _ClassVar[AtomId]
    ATOM_UWB_RANGING_MEASUREMENT_RECEIVED: _ClassVar[AtomId]
    ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED: _ClassVar[AtomId]
    ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED: _ClassVar[AtomId]
    ATOM_CLIPBOARD_CLEARED: _ClassVar[AtomId]
    ATOM_VM_CREATION_REQUESTED: _ClassVar[AtomId]
    ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_CAMERA_COMPAT_CONTROL_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_APPLICATION_LOCALES_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED: _ClassVar[AtomId]
    ATOM_FOLD_STATE_DURATION_REPORTED: _ClassVar[AtomId]
    ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DISPLAY_HBM_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED: _ClassVar[AtomId]
    ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED: _ClassVar[AtomId]
    ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED: _ClassVar[AtomId]
    ATOM_VBMETA_DIGEST_REPORTED: _ClassVar[AtomId]
    ATOM_APEX_INFO_GATHERED: _ClassVar[AtomId]
    ATOM_PVM_INFO_GATHERED: _ClassVar[AtomId]
    ATOM_WEAR_SETTINGS_UI_INTERACTED: _ClassVar[AtomId]
    ATOM_TRACING_SERVICE_REPORT_EVENT: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED: _ClassVar[AtomId]
    ATOM_LAUNCHER_LATENCY: _ClassVar[AtomId]
    ATOM_DROPBOX_ENTRY_DROPPED: _ClassVar[AtomId]
    ATOM_WIFI_P2P_CONNECTION_REPORTED: _ClassVar[AtomId]
    ATOM_GAME_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED: _ClassVar[AtomId]
    ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED: _ClassVar[AtomId]
    ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED: _ClassVar[AtomId]
    ATOM_HOTWORD_DETECTOR_EVENTS: _ClassVar[AtomId]
    ATOM_AD_SERVICES_API_CALLED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED: _ClassVar[AtomId]
    ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED: _ClassVar[AtomId]
    ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_APP_BACKGROUND_RESTRICTIONS_INFO: _ClassVar[AtomId]
    ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED: _ClassVar[AtomId]
    ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED: _ClassVar[AtomId]
    ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED: _ClassVar[AtomId]
    ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED: _ClassVar[AtomId]
    ATOM_GNSS_PSDS_DOWNLOAD_REPORTED: _ClassVar[AtomId]
    ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED: _ClassVar[AtomId]
    ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED: _ClassVar[AtomId]
    ATOM_DREAM_UI_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_TASK_MANAGER_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_CDM_ASSOCIATION_ACTION: _ClassVar[AtomId]
    ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED: _ClassVar[AtomId]
    ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED: _ClassVar[AtomId]
    ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED: _ClassVar[AtomId]
    ATOM_UWB_DEVICE_ERROR_REPORTED: _ClassVar[AtomId]
    ATOM_ISOLATED_COMPILATION_SCHEDULED: _ClassVar[AtomId]
    ATOM_ISOLATED_COMPILATION_ENDED: _ClassVar[AtomId]
    ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE: _ClassVar[AtomId]
    ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED: _ClassVar[AtomId]
    ATOM_TELEPHONY_ANOMALY_DETECTED: _ClassVar[AtomId]
    ATOM_LETTERBOX_POSITION_CHANGED: _ClassVar[AtomId]
    ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT: _ClassVar[AtomId]
    ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO: _ClassVar[AtomId]
    ATOM_REMOTE_KEY_PROVISIONING_TIMING: _ClassVar[AtomId]
    ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT: _ClassVar[AtomId]
    ATOM_SYNC_EXEMPTION_OCCURRED: _ClassVar[AtomId]
    ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_DOCK_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_SAFETY_SOURCE_STATE_COLLECTED: _ClassVar[AtomId]
    ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_SAFETY_CENTER_INTERACTION_REPORTED: _ClassVar[AtomId]
    ATOM_SETTINGS_PROVIDER_SETTING_CHANGED: _ClassVar[AtomId]
    ATOM_BROADCAST_DELIVERY_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_SERVICE_REQUEST_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_DEVICE_NAME_REPORTED: _ClassVar[AtomId]
    ATOM_CB_CONFIG_UPDATED: _ClassVar[AtomId]
    ATOM_CB_MODULE_ERROR_REPORTED: _ClassVar[AtomId]
    ATOM_CB_SERVICE_FEATURE_CHANGED: _ClassVar[AtomId]
    ATOM_CB_RECEIVER_FEATURE_CHANGED: _ClassVar[AtomId]
    ATOM_JSSCRIPTENGINE_LATENCY_REPORTED: _ClassVar[AtomId]
    ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION: _ClassVar[AtomId]
    ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION: _ClassVar[AtomId]
    ATOM_PRIVACY_SIGNALS_JOB_FAILURE: _ClassVar[AtomId]
    ATOM_VIBRATION_REPORTED: _ClassVar[AtomId]
    ATOM_UWB_RANGING_START: _ClassVar[AtomId]
    ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED: _ClassVar[AtomId]
    ATOM_APP_COMPACTED_V2: _ClassVar[AtomId]
    ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED: _ClassVar[AtomId]
    ATOM_DISPLAY_BRIGHTNESS_CHANGED: _ClassVar[AtomId]
    ATOM_ACTIVITY_ACTION_BLOCKED: _ClassVar[AtomId]
    ATOM_BACKGROUND_FETCH_PROCESS_REPORTED: _ClassVar[AtomId]
    ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED: _ClassVar[AtomId]
    ATOM_RUN_AD_BIDDING_PROCESS_REPORTED: _ClassVar[AtomId]
    ATOM_RUN_AD_SCORING_PROCESS_REPORTED: _ClassVar[AtomId]
    ATOM_RUN_AD_SELECTION_PROCESS_REPORTED: _ClassVar[AtomId]
    ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED: _ClassVar[AtomId]
    ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED: _ClassVar[AtomId]
    ATOM_VM_BOOTED: _ClassVar[AtomId]
    ATOM_VM_EXITED: _ClassVar[AtomId]
    ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS: _ClassVar[AtomId]
    ATOM_HEARING_AID_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED: _ClassVar[AtomId]
    ATOM_AMBIENT_MODE_CHANGED: _ClassVar[AtomId]
    ATOM_ANR_LATENCY_REPORTED: _ClassVar[AtomId]
    ATOM_RESOURCE_API_INFO: _ClassVar[AtomId]
    ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED: _ClassVar[AtomId]
    ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED: _ClassVar[AtomId]
    ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED: _ClassVar[AtomId]
    ATOM_AIRPLANE_MODE_SESSION_REPORTED: _ClassVar[AtomId]
    ATOM_VM_CPU_STATUS_REPORTED: _ClassVar[AtomId]
    ATOM_VM_MEM_STATUS_REPORTED: _ClassVar[AtomId]
    ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED: _ClassVar[AtomId]
    ATOM_DEFAULT_NETWORK_REMATCH_INFO: _ClassVar[AtomId]
    ATOM_NETWORK_SELECTION_PERFORMANCE: _ClassVar[AtomId]
    ATOM_NETWORK_NSD_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_GATT_APP_INFO: _ClassVar[AtomId]
    ATOM_BRIGHTNESS_CONFIGURATION_UPDATED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_GET_TOPICS_REPORTED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED: _ClassVar[AtomId]
    ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED: _ClassVar[AtomId]
    ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED: _ClassVar[AtomId]
    ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED: _ClassVar[AtomId]
    ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED: _ClassVar[AtomId]
    ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY: _ClassVar[AtomId]
    ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY: _ClassVar[AtomId]
    ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED: _ClassVar[AtomId]
    ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED: _ClassVar[AtomId]
    ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED: _ClassVar[AtomId]
    ATOM_LAUNCHER_IMPRESSION_EVENT: _ClassVar[AtomId]
    ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY: _ClassVar[AtomId]
    ATOM_WS_WATCH_FACE_EDITED: _ClassVar[AtomId]
    ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_PACKAGE_UNINSTALLATION_REPORTED: _ClassVar[AtomId]
    ATOM_GAME_MODE_CHANGED: _ClassVar[AtomId]
    ATOM_GAME_MODE_CONFIGURATION_CHANGED: _ClassVar[AtomId]
    ATOM_BEDTIME_MODE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_NETWORK_SLICE_SESSION_ENDED: _ClassVar[AtomId]
    ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED: _ClassVar[AtomId]
    ATOM_NFC_TAG_TYPE_OCCURRED: _ClassVar[AtomId]
    ATOM_NFC_AID_CONFLICT_OCCURRED: _ClassVar[AtomId]
    ATOM_NFC_READER_CONFLICT_OCCURRED: _ClassVar[AtomId]
    ATOM_WS_TILE_LIST_CHANGED: _ClassVar[AtomId]
    ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION: _ClassVar[AtomId]
    ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED: _ClassVar[AtomId]
    ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIA_DRM_CREATED: _ClassVar[AtomId]
    ATOM_MEDIA_DRM_ERRORED: _ClassVar[AtomId]
    ATOM_MEDIA_DRM_SESSION_OPENED: _ClassVar[AtomId]
    ATOM_MEDIA_DRM_SESSION_CLOSED: _ClassVar[AtomId]
    ATOM_USER_SELECTED_RESOLUTION: _ClassVar[AtomId]
    ATOM_UNSAFE_INTENT_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_PERFORMANCE_HINT_SESSION_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED: _ClassVar[AtomId]
    ATOM_BIOMETRIC_TOUCH_REPORTED: _ClassVar[AtomId]
    ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_LOCATION_ENABLED_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_IME_REQUEST_FINISHED: _ClassVar[AtomId]
    ATOM_USB_COMPLIANCE_WARNINGS_REPORTED: _ClassVar[AtomId]
    ATOM_APP_SUPPORTED_LOCALES_CHANGED: _ClassVar[AtomId]
    ATOM_GRAMMATICAL_INFLECTION_CHANGED: _ClassVar[AtomId]
    ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED: _ClassVar[AtomId]
    ATOM_BIOMETRIC_PROPERTIES_COLLECTED: _ClassVar[AtomId]
    ATOM_KERNEL_WAKEUP_ATTRIBUTED: _ClassVar[AtomId]
    ATOM_SCREEN_STATE_CHANGED_V2: _ClassVar[AtomId]
    ATOM_WS_BACKUP_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_WS_RESTORE_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIA_SESSION_UPDATED: _ClassVar[AtomId]
    ATOM_WEAR_OOBE_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_WS_NOTIFICATION_UPDATED: _ClassVar[AtomId]
    ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED: _ClassVar[AtomId]
    ATOM_WS_COMPLICATION_TAPPED: _ClassVar[AtomId]
    ATOM_WS_WEAR_TIME_SESSION: _ClassVar[AtomId]
    ATOM_WIFI_BYTES_TRANSFER: _ClassVar[AtomId]
    ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG: _ClassVar[AtomId]
    ATOM_MOBILE_BYTES_TRANSFER: _ClassVar[AtomId]
    ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG: _ClassVar[AtomId]
    ATOM_BLUETOOTH_BYTES_TRANSFER: _ClassVar[AtomId]
    ATOM_KERNEL_WAKELOCK: _ClassVar[AtomId]
    ATOM_SUBSYSTEM_SLEEP_STATE: _ClassVar[AtomId]
    ATOM_CPU_TIME_PER_UID: _ClassVar[AtomId]
    ATOM_CPU_TIME_PER_UID_FREQ: _ClassVar[AtomId]
    ATOM_WIFI_ACTIVITY_INFO: _ClassVar[AtomId]
    ATOM_MODEM_ACTIVITY_INFO: _ClassVar[AtomId]
    ATOM_BLUETOOTH_ACTIVITY_INFO: _ClassVar[AtomId]
    ATOM_PROCESS_MEMORY_STATE: _ClassVar[AtomId]
    ATOM_SYSTEM_ELAPSED_REALTIME: _ClassVar[AtomId]
    ATOM_SYSTEM_UPTIME: _ClassVar[AtomId]
    ATOM_CPU_ACTIVE_TIME: _ClassVar[AtomId]
    ATOM_CPU_CLUSTER_TIME: _ClassVar[AtomId]
    ATOM_DISK_SPACE: _ClassVar[AtomId]
    ATOM_REMAINING_BATTERY_CAPACITY: _ClassVar[AtomId]
    ATOM_FULL_BATTERY_CAPACITY: _ClassVar[AtomId]
    ATOM_TEMPERATURE: _ClassVar[AtomId]
    ATOM_BINDER_CALLS: _ClassVar[AtomId]
    ATOM_BINDER_CALLS_EXCEPTIONS: _ClassVar[AtomId]
    ATOM_LOOPER_STATS: _ClassVar[AtomId]
    ATOM_DISK_STATS: _ClassVar[AtomId]
    ATOM_DIRECTORY_USAGE: _ClassVar[AtomId]
    ATOM_APP_SIZE: _ClassVar[AtomId]
    ATOM_CATEGORY_SIZE: _ClassVar[AtomId]
    ATOM_PROC_STATS: _ClassVar[AtomId]
    ATOM_BATTERY_VOLTAGE: _ClassVar[AtomId]
    ATOM_NUM_FINGERPRINTS_ENROLLED: _ClassVar[AtomId]
    ATOM_DISK_IO: _ClassVar[AtomId]
    ATOM_POWER_PROFILE: _ClassVar[AtomId]
    ATOM_PROC_STATS_PKG_PROC: _ClassVar[AtomId]
    ATOM_PROCESS_CPU_TIME: _ClassVar[AtomId]
    ATOM_CPU_TIME_PER_THREAD_FREQ: _ClassVar[AtomId]
    ATOM_ON_DEVICE_POWER_MEASUREMENT: _ClassVar[AtomId]
    ATOM_DEVICE_CALCULATED_POWER_USE: _ClassVar[AtomId]
    ATOM_PROCESS_MEMORY_HIGH_WATER_MARK: _ClassVar[AtomId]
    ATOM_BATTERY_LEVEL: _ClassVar[AtomId]
    ATOM_BUILD_INFORMATION: _ClassVar[AtomId]
    ATOM_BATTERY_CYCLE_COUNT: _ClassVar[AtomId]
    ATOM_DEBUG_ELAPSED_CLOCK: _ClassVar[AtomId]
    ATOM_DEBUG_FAILING_ELAPSED_CLOCK: _ClassVar[AtomId]
    ATOM_NUM_FACES_ENROLLED: _ClassVar[AtomId]
    ATOM_ROLE_HOLDER: _ClassVar[AtomId]
    ATOM_DANGEROUS_PERMISSION_STATE: _ClassVar[AtomId]
    ATOM_TRAIN_INFO: _ClassVar[AtomId]
    ATOM_TIME_ZONE_DATA_INFO: _ClassVar[AtomId]
    ATOM_EXTERNAL_STORAGE_INFO: _ClassVar[AtomId]
    ATOM_GPU_STATS_GLOBAL_INFO: _ClassVar[AtomId]
    ATOM_GPU_STATS_APP_INFO: _ClassVar[AtomId]
    ATOM_SYSTEM_ION_HEAP_SIZE: _ClassVar[AtomId]
    ATOM_APPS_ON_EXTERNAL_STORAGE_INFO: _ClassVar[AtomId]
    ATOM_FACE_SETTINGS: _ClassVar[AtomId]
    ATOM_COOLING_DEVICE: _ClassVar[AtomId]
    ATOM_APP_OPS: _ClassVar[AtomId]
    ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE: _ClassVar[AtomId]
    ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO: _ClassVar[AtomId]
    ATOM_SURFACEFLINGER_STATS_LAYER_INFO: _ClassVar[AtomId]
    ATOM_PROCESS_MEMORY_SNAPSHOT: _ClassVar[AtomId]
    ATOM_VMS_CLIENT_STATS: _ClassVar[AtomId]
    ATOM_NOTIFICATION_REMOTE_VIEWS: _ClassVar[AtomId]
    ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED: _ClassVar[AtomId]
    ATOM_GRAPHICS_STATS: _ClassVar[AtomId]
    ATOM_RUNTIME_APP_OP_ACCESS: _ClassVar[AtomId]
    ATOM_ION_HEAP_SIZE: _ClassVar[AtomId]
    ATOM_PACKAGE_NOTIFICATION_PREFERENCES: _ClassVar[AtomId]
    ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES: _ClassVar[AtomId]
    ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES: _ClassVar[AtomId]
    ATOM_GNSS_STATS: _ClassVar[AtomId]
    ATOM_ATTRIBUTED_APP_OPS: _ClassVar[AtomId]
    ATOM_VOICE_CALL_SESSION: _ClassVar[AtomId]
    ATOM_VOICE_CALL_RAT_USAGE: _ClassVar[AtomId]
    ATOM_SIM_SLOT_STATE: _ClassVar[AtomId]
    ATOM_SUPPORTED_RADIO_ACCESS_FAMILY: _ClassVar[AtomId]
    ATOM_SETTING_SNAPSHOT: _ClassVar[AtomId]
    ATOM_BLOB_INFO: _ClassVar[AtomId]
    ATOM_DATA_USAGE_BYTES_TRANSFER: _ClassVar[AtomId]
    ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED: _ClassVar[AtomId]
    ATOM_DND_MODE_RULE: _ClassVar[AtomId]
    ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS: _ClassVar[AtomId]
    ATOM_INCOMING_SMS: _ClassVar[AtomId]
    ATOM_OUTGOING_SMS: _ClassVar[AtomId]
    ATOM_CARRIER_ID_TABLE_VERSION: _ClassVar[AtomId]
    ATOM_DATA_CALL_SESSION: _ClassVar[AtomId]
    ATOM_CELLULAR_SERVICE_STATE: _ClassVar[AtomId]
    ATOM_CELLULAR_DATA_SERVICE_SWITCH: _ClassVar[AtomId]
    ATOM_SYSTEM_MEMORY: _ClassVar[AtomId]
    ATOM_IMS_REGISTRATION_TERMINATION: _ClassVar[AtomId]
    ATOM_IMS_REGISTRATION_STATS: _ClassVar[AtomId]
    ATOM_CPU_TIME_PER_CLUSTER_FREQ: _ClassVar[AtomId]
    ATOM_CPU_CYCLES_PER_UID_CLUSTER: _ClassVar[AtomId]
    ATOM_DEVICE_ROTATED_DATA: _ClassVar[AtomId]
    ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER: _ClassVar[AtomId]
    ATOM_MEDIA_DRM_ACTIVITY_INFO: _ClassVar[AtomId]
    ATOM_OEM_MANAGED_BYTES_TRANSFER: _ClassVar[AtomId]
    ATOM_GNSS_POWER_STATS: _ClassVar[AtomId]
    ATOM_TIME_ZONE_DETECTOR_STATE: _ClassVar[AtomId]
    ATOM_KEYSTORE2_STORAGE_STATS: _ClassVar[AtomId]
    ATOM_RKP_POOL_STATS: _ClassVar[AtomId]
    ATOM_PROCESS_DMABUF_MEMORY: _ClassVar[AtomId]
    ATOM_PENDING_ALARM_INFO: _ClassVar[AtomId]
    ATOM_USER_LEVEL_HIBERNATED_APPS: _ClassVar[AtomId]
    ATOM_LAUNCHER_LAYOUT_SNAPSHOT: _ClassVar[AtomId]
    ATOM_GLOBAL_HIBERNATED_APPS: _ClassVar[AtomId]
    ATOM_INPUT_EVENT_LATENCY_SKETCH: _ClassVar[AtomId]
    ATOM_BATTERY_USAGE_STATS_BEFORE_RESET: _ClassVar[AtomId]
    ATOM_BATTERY_USAGE_STATS_SINCE_RESET: _ClassVar[AtomId]
    ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL: _ClassVar[AtomId]
    ATOM_INSTALLED_INCREMENTAL_PACKAGE: _ClassVar[AtomId]
    ATOM_TELEPHONY_NETWORK_REQUESTS: _ClassVar[AtomId]
    ATOM_APP_SEARCH_STORAGE_INFO: _ClassVar[AtomId]
    ATOM_VMSTAT: _ClassVar[AtomId]
    ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO: _ClassVar[AtomId]
    ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO: _ClassVar[AtomId]
    ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO: _ClassVar[AtomId]
    ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW: _ClassVar[AtomId]
    ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO: _ClassVar[AtomId]
    ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO: _ClassVar[AtomId]
    ATOM_RKP_ERROR_STATS: _ClassVar[AtomId]
    ATOM_KEYSTORE2_CRASH_STATS: _ClassVar[AtomId]
    ATOM_VENDOR_APEX_INFO: _ClassVar[AtomId]
    ATOM_ACCESSIBILITY_SHORTCUT_STATS: _ClassVar[AtomId]
    ATOM_ACCESSIBILITY_FLOATING_MENU_STATS: _ClassVar[AtomId]
    ATOM_DATA_USAGE_BYTES_TRANSFER_V2: _ClassVar[AtomId]
    ATOM_MEDIA_CAPABILITIES: _ClassVar[AtomId]
    ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY: _ClassVar[AtomId]
    ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY: _ClassVar[AtomId]
    ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS: _ClassVar[AtomId]
    ATOM_RCS_CLIENT_PROVISIONING_STATS: _ClassVar[AtomId]
    ATOM_RCS_ACS_PROVISIONING_STATS: _ClassVar[AtomId]
    ATOM_SIP_DELEGATE_STATS: _ClassVar[AtomId]
    ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS: _ClassVar[AtomId]
    ATOM_SIP_MESSAGE_RESPONSE: _ClassVar[AtomId]
    ATOM_SIP_TRANSPORT_SESSION: _ClassVar[AtomId]
    ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT: _ClassVar[AtomId]
    ATOM_IMS_DEDICATED_BEARER_EVENT: _ClassVar[AtomId]
    ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS: _ClassVar[AtomId]
    ATOM_UCE_EVENT_STATS: _ClassVar[AtomId]
    ATOM_PRESENCE_NOTIFY_EVENT: _ClassVar[AtomId]
    ATOM_GBA_EVENT: _ClassVar[AtomId]
    ATOM_PER_SIM_STATUS: _ClassVar[AtomId]
    ATOM_GPU_WORK_PER_UID: _ClassVar[AtomId]
    ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE: _ClassVar[AtomId]
    ATOM_SIGNED_PARTITION_INFO: _ClassVar[AtomId]
    ATOM_PINNED_FILE_SIZES_PER_PACKAGE: _ClassVar[AtomId]
    ATOM_PENDING_INTENTS_PER_PACKAGE: _ClassVar[AtomId]
    ATOM_USER_INFO: _ClassVar[AtomId]
    ATOM_TELEPHONY_NETWORK_REQUESTS_V2: _ClassVar[AtomId]
    ATOM_DEVICE_TELEPHONY_PROPERTIES: _ClassVar[AtomId]
    ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS: _ClassVar[AtomId]
    ATOM_SAFETY_STATE: _ClassVar[AtomId]
    ATOM_INCOMING_MMS: _ClassVar[AtomId]
    ATOM_OUTGOING_MMS: _ClassVar[AtomId]
    ATOM_MULTI_USER_INFO: _ClassVar[AtomId]
    ATOM_NETWORK_BPF_MAP_INFO: _ClassVar[AtomId]
    ATOM_OUTGOING_SHORT_CODE_SMS: _ClassVar[AtomId]
    ATOM_CONNECTIVITY_STATE_SAMPLE: _ClassVar[AtomId]
    ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO: _ClassVar[AtomId]
    ATOM_GAME_MODE_INFO: _ClassVar[AtomId]
    ATOM_GAME_MODE_CONFIGURATION: _ClassVar[AtomId]
    ATOM_GAME_MODE_LISTENER: _ClassVar[AtomId]
    ATOM_NETWORK_SLICE_REQUEST_COUNT: _ClassVar[AtomId]
    ATOM_WS_TILE_SNAPSHOT: _ClassVar[AtomId]
    ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT: _ClassVar[AtomId]
    ATOM_PROCESS_STATE: _ClassVar[AtomId]
    ATOM_PROCESS_ASSOCIATION: _ClassVar[AtomId]
    ATOM_ADPF_SYSTEM_COMPONENT_INFO: _ClassVar[AtomId]
    ATOM_NOTIFICATION_MEMORY_USE: _ClassVar[AtomId]
    ATOM_HDR_CAPABILITIES: _ClassVar[AtomId]
    ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT: _ClassVar[AtomId]
    ATOM_WIFI_AWARE_NDP_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_AWARE_ATTACH_REPORTED: _ClassVar[AtomId]
    ATOM_WIFI_SELF_RECOVERY_TRIGGERED: _ClassVar[AtomId]
    ATOM_SOFT_AP_STARTED: _ClassVar[AtomId]
    ATOM_SOFT_AP_STOPPED: _ClassVar[AtomId]
    ATOM_WIFI_LOCK_RELEASED: _ClassVar[AtomId]
    ATOM_WIFI_LOCK_DEACTIVATED: _ClassVar[AtomId]
    ATOM_WIFI_CONFIG_SAVED: _ClassVar[AtomId]
    ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_AWARE_HAL_API_CALLED: _ClassVar[AtomId]
    ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED: _ClassVar[AtomId]
    ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED: _ClassVar[AtomId]
    ATOM_WIFI_THREAD_TASK_EXECUTED: _ClassVar[AtomId]
    ATOM_WIFI_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_WIFI_AWARE_CAPABILITIES: _ClassVar[AtomId]
    ATOM_WIFI_MODULE_INFO: _ClassVar[AtomId]
    ATOM_SETTINGS_SPA_REPORTED: _ClassVar[AtomId]
    ATOM_EXPRESS_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED: _ClassVar[AtomId]
    ATOM_EXPRESS_UID_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED: _ClassVar[AtomId]
    ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED: _ClassVar[AtomId]
    ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION: _ClassVar[AtomId]
    ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED: _ClassVar[AtomId]
    ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_WS_INCOMING_CALL_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_WS_CALL_DISCONNECTION_REPORTED: _ClassVar[AtomId]
    ATOM_WS_CALL_DURATION_REPORTED: _ClassVar[AtomId]
    ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED: _ClassVar[AtomId]
    ATOM_WS_CALL_INTERACTION_REPORTED: _ClassVar[AtomId]
    ATOM_FULL_SCREEN_INTENT_LAUNCHED: _ClassVar[AtomId]
    ATOM_BAL_ALLOWED: _ClassVar[AtomId]
    ATOM_IN_TASK_ACTIVITY_STARTED: _ClassVar[AtomId]
    ATOM_CACHED_APPS_HIGH_WATERMARK: _ClassVar[AtomId]
    ATOM_ODREFRESH_REPORTED: _ClassVar[AtomId]
    ATOM_ODSIGN_REPORTED: _ClassVar[AtomId]
    ATOM_ART_DATUM_REPORTED: _ClassVar[AtomId]
    ATOM_ART_DEVICE_DATUM_REPORTED: _ClassVar[AtomId]
    ATOM_ART_DATUM_DELTA_REPORTED: _ClassVar[AtomId]
    ATOM_BACKGROUND_DEXOPT_JOB_ENDED: _ClassVar[AtomId]
    ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED: _ClassVar[AtomId]
    ATOM_EMERGENCY_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_DND_STATE_CHANGED: _ClassVar[AtomId]
    ATOM_MTE_STATE: _ClassVar[AtomId]
    ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS: _ClassVar[AtomId]
    ATOM_AD_SERVICES_ERROR_REPORTED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED: _ClassVar[AtomId]
    ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION: _ClassVar[AtomId]
    ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION: _ClassVar[AtomId]
    ATOM_AD_SERVICES_MEASUREMENT_JOBS: _ClassVar[AtomId]
    ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT: _ClassVar[AtomId]
    ATOM_AD_SERVICES_CONSENT_MIGRATED: _ClassVar[AtomId]
    ATOM_RKPD_POOL_STATS: _ClassVar[AtomId]
    ATOM_RKPD_CLIENT_OPERATION: _ClassVar[AtomId]
    ATOM_AUTOFILL_UI_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_AUTOFILL_FILL_REQUEST_REPORTED: _ClassVar[AtomId]
    ATOM_AUTOFILL_FILL_RESPONSE_REPORTED: _ClassVar[AtomId]
    ATOM_AUTOFILL_SAVE_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_AUTOFILL_SESSION_COMMITTED: _ClassVar[AtomId]
    ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED: _ClassVar[AtomId]
    ATOM_TEST_EXTENSION_ATOM_REPORTED: _ClassVar[AtomId]
    ATOM_TEST_RESTRICTED_ATOM_REPORTED: _ClassVar[AtomId]
    ATOM_STATS_SOCKET_LOSS_REPORTED: _ClassVar[AtomId]
    ATOM_PLUGIN_INITIALIZED: _ClassVar[AtomId]
    ATOM_TV_LOW_POWER_STANDBY_POLICY: _ClassVar[AtomId]
    ATOM_LOCKSCREEN_SHORTCUT_SELECTED: _ClassVar[AtomId]
    ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED: _ClassVar[AtomId]
    ATOM_EMERGENCY_NUMBERS_INFO: _ClassVar[AtomId]
    ATOM_QUALIFIED_RAT_LIST_CHANGED: _ClassVar[AtomId]
    ATOM_QNS_IMS_CALL_DROP_STATS: _ClassVar[AtomId]
    ATOM_QNS_FALLBACK_RESTRICTION_CHANGED: _ClassVar[AtomId]
    ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO: _ClassVar[AtomId]
    ATOM_QNS_HANDOVER_TIME_MILLIS: _ClassVar[AtomId]
    ATOM_QNS_HANDOVER_PINGPONG: _ClassVar[AtomId]
    ATOM_SATELLITE_CONTROLLER: _ClassVar[AtomId]
    ATOM_SATELLITE_SESSION: _ClassVar[AtomId]
    ATOM_SATELLITE_INCOMING_DATAGRAM: _ClassVar[AtomId]
    ATOM_SATELLITE_OUTGOING_DATAGRAM: _ClassVar[AtomId]
    ATOM_SATELLITE_PROVISION: _ClassVar[AtomId]
    ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER: _ClassVar[AtomId]
    ATOM_IKE_SESSION_TERMINATED: _ClassVar[AtomId]
    ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION: _ClassVar[AtomId]
    ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION: _ClassVar[AtomId]
    ATOM_BLUETOOTH_LE_SESSION_CONNECTED: _ClassVar[AtomId]
    ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED: _ClassVar[AtomId]
    ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED: _ClassVar[AtomId]
    ATOM_HEALTH_CONNECT_UI_IMPRESSION: _ClassVar[AtomId]
    ATOM_HEALTH_CONNECT_UI_INTERACTION: _ClassVar[AtomId]
    ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED: _ClassVar[AtomId]
    ATOM_HEALTH_CONNECT_API_CALLED: _ClassVar[AtomId]
    ATOM_HEALTH_CONNECT_USAGE_STATS: _ClassVar[AtomId]
    ATOM_HEALTH_CONNECT_STORAGE_STATS: _ClassVar[AtomId]
    ATOM_HEALTH_CONNECT_API_INVOKED: _ClassVar[AtomId]
    ATOM_EXERCISE_ROUTE_API_CALLED: _ClassVar[AtomId]
    ATOM_ATOM_9999: _ClassVar[AtomId]
    ATOM_ATOM_99999: _ClassVar[AtomId]
    ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED: _ClassVar[AtomId]
    ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED: _ClassVar[AtomId]
    ATOM_THREADNETWORK_DEVICE_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_EMERGENCY_NUMBER_DIALED: _ClassVar[AtomId]
    ATOM_SANDBOX_API_CALLED: _ClassVar[AtomId]
    ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED: _ClassVar[AtomId]
    ATOM_SANDBOX_SDK_STORAGE: _ClassVar[AtomId]
    ATOM_CRONET_ENGINE_CREATED: _ClassVar[AtomId]
    ATOM_CRONET_TRAFFIC_REPORTED: _ClassVar[AtomId]
    ATOM_CRONET_ENGINE_BUILDER_INITIALIZED: _ClassVar[AtomId]
    ATOM_CRONET_HTTP_FLAGS_INITIALIZED: _ClassVar[AtomId]
    ATOM_CRONET_INITIALIZED: _ClassVar[AtomId]
    ATOM_DAILY_KEEPALIVE_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_IP_CLIENT_RA_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_APF_SESSION_INFO_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_API_CALLED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_GET_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED: _ClassVar[AtomId]
    ATOM_CREDENTIAL_MANAGER_APIV2_CALLED: _ClassVar[AtomId]
    ATOM_UWB_ACTIVITY_INFO: _ClassVar[AtomId]
    ATOM_MEDIA_ACTION_REPORTED: _ClassVar[AtomId]
    ATOM_MEDIA_CONTROLS_LAUNCHED: _ClassVar[AtomId]
    ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED: _ClassVar[AtomId]
    ATOM_MEDIA_CODEC_STARTED: _ClassVar[AtomId]
    ATOM_MEDIA_CODEC_STOPPED: _ClassVar[AtomId]
    ATOM_MEDIA_CODEC_RENDERED: _ClassVar[AtomId]

class MeminfoCounters(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    MEMINFO_UNSPECIFIED: _ClassVar[MeminfoCounters]
    MEMINFO_MEM_TOTAL: _ClassVar[MeminfoCounters]
    MEMINFO_MEM_FREE: _ClassVar[MeminfoCounters]
    MEMINFO_MEM_AVAILABLE: _ClassVar[MeminfoCounters]
    MEMINFO_BUFFERS: _ClassVar[MeminfoCounters]
    MEMINFO_CACHED: _ClassVar[MeminfoCounters]
    MEMINFO_SWAP_CACHED: _ClassVar[MeminfoCounters]
    MEMINFO_ACTIVE: _ClassVar[MeminfoCounters]
    MEMINFO_INACTIVE: _ClassVar[MeminfoCounters]
    MEMINFO_ACTIVE_ANON: _ClassVar[MeminfoCounters]
    MEMINFO_INACTIVE_ANON: _ClassVar[MeminfoCounters]
    MEMINFO_ACTIVE_FILE: _ClassVar[MeminfoCounters]
    MEMINFO_INACTIVE_FILE: _ClassVar[MeminfoCounters]
    MEMINFO_UNEVICTABLE: _ClassVar[MeminfoCounters]
    MEMINFO_MLOCKED: _ClassVar[MeminfoCounters]
    MEMINFO_SWAP_TOTAL: _ClassVar[MeminfoCounters]
    MEMINFO_SWAP_FREE: _ClassVar[MeminfoCounters]
    MEMINFO_DIRTY: _ClassVar[MeminfoCounters]
    MEMINFO_WRITEBACK: _ClassVar[MeminfoCounters]
    MEMINFO_ANON_PAGES: _ClassVar[MeminfoCounters]
    MEMINFO_MAPPED: _ClassVar[MeminfoCounters]
    MEMINFO_SHMEM: _ClassVar[MeminfoCounters]
    MEMINFO_SLAB: _ClassVar[MeminfoCounters]
    MEMINFO_SLAB_RECLAIMABLE: _ClassVar[MeminfoCounters]
    MEMINFO_SLAB_UNRECLAIMABLE: _ClassVar[MeminfoCounters]
    MEMINFO_KERNEL_STACK: _ClassVar[MeminfoCounters]
    MEMINFO_PAGE_TABLES: _ClassVar[MeminfoCounters]
    MEMINFO_COMMIT_LIMIT: _ClassVar[MeminfoCounters]
    MEMINFO_COMMITED_AS: _ClassVar[MeminfoCounters]
    MEMINFO_VMALLOC_TOTAL: _ClassVar[MeminfoCounters]
    MEMINFO_VMALLOC_USED: _ClassVar[MeminfoCounters]
    MEMINFO_VMALLOC_CHUNK: _ClassVar[MeminfoCounters]
    MEMINFO_CMA_TOTAL: _ClassVar[MeminfoCounters]
    MEMINFO_CMA_FREE: _ClassVar[MeminfoCounters]

class VmstatCounters(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    VMSTAT_UNSPECIFIED: _ClassVar[VmstatCounters]
    VMSTAT_NR_FREE_PAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_ALLOC_BATCH: _ClassVar[VmstatCounters]
    VMSTAT_NR_INACTIVE_ANON: _ClassVar[VmstatCounters]
    VMSTAT_NR_ACTIVE_ANON: _ClassVar[VmstatCounters]
    VMSTAT_NR_INACTIVE_FILE: _ClassVar[VmstatCounters]
    VMSTAT_NR_ACTIVE_FILE: _ClassVar[VmstatCounters]
    VMSTAT_NR_UNEVICTABLE: _ClassVar[VmstatCounters]
    VMSTAT_NR_MLOCK: _ClassVar[VmstatCounters]
    VMSTAT_NR_ANON_PAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_MAPPED: _ClassVar[VmstatCounters]
    VMSTAT_NR_FILE_PAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_DIRTY: _ClassVar[VmstatCounters]
    VMSTAT_NR_WRITEBACK: _ClassVar[VmstatCounters]
    VMSTAT_NR_SLAB_RECLAIMABLE: _ClassVar[VmstatCounters]
    VMSTAT_NR_SLAB_UNRECLAIMABLE: _ClassVar[VmstatCounters]
    VMSTAT_NR_PAGE_TABLE_PAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_KERNEL_STACK: _ClassVar[VmstatCounters]
    VMSTAT_NR_OVERHEAD: _ClassVar[VmstatCounters]
    VMSTAT_NR_UNSTABLE: _ClassVar[VmstatCounters]
    VMSTAT_NR_BOUNCE: _ClassVar[VmstatCounters]
    VMSTAT_NR_VMSCAN_WRITE: _ClassVar[VmstatCounters]
    VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM: _ClassVar[VmstatCounters]
    VMSTAT_NR_WRITEBACK_TEMP: _ClassVar[VmstatCounters]
    VMSTAT_NR_ISOLATED_ANON: _ClassVar[VmstatCounters]
    VMSTAT_NR_ISOLATED_FILE: _ClassVar[VmstatCounters]
    VMSTAT_NR_SHMEM: _ClassVar[VmstatCounters]
    VMSTAT_NR_DIRTIED: _ClassVar[VmstatCounters]
    VMSTAT_NR_WRITTEN: _ClassVar[VmstatCounters]
    VMSTAT_NR_PAGES_SCANNED: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_REFAULT: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_ACTIVATE: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_NODERECLAIM: _ClassVar[VmstatCounters]
    VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_FREE_CMA: _ClassVar[VmstatCounters]
    VMSTAT_NR_SWAPCACHE: _ClassVar[VmstatCounters]
    VMSTAT_NR_DIRTY_THRESHOLD: _ClassVar[VmstatCounters]
    VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD: _ClassVar[VmstatCounters]
    VMSTAT_PGPGIN: _ClassVar[VmstatCounters]
    VMSTAT_PGPGOUT: _ClassVar[VmstatCounters]
    VMSTAT_PGPGOUTCLEAN: _ClassVar[VmstatCounters]
    VMSTAT_PSWPIN: _ClassVar[VmstatCounters]
    VMSTAT_PSWPOUT: _ClassVar[VmstatCounters]
    VMSTAT_PGALLOC_DMA: _ClassVar[VmstatCounters]
    VMSTAT_PGALLOC_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_PGALLOC_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_PGFREE: _ClassVar[VmstatCounters]
    VMSTAT_PGACTIVATE: _ClassVar[VmstatCounters]
    VMSTAT_PGDEACTIVATE: _ClassVar[VmstatCounters]
    VMSTAT_PGFAULT: _ClassVar[VmstatCounters]
    VMSTAT_PGMAJFAULT: _ClassVar[VmstatCounters]
    VMSTAT_PGREFILL_DMA: _ClassVar[VmstatCounters]
    VMSTAT_PGREFILL_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_PGREFILL_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_KSWAPD_DMA: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_KSWAPD_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_KSWAPD_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_DIRECT_DMA: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_DIRECT_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_DIRECT_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_KSWAPD_DMA: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_KSWAPD_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_KSWAPD_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_DIRECT_DMA: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_DIRECT_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_DIRECT_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_DIRECT_THROTTLE: _ClassVar[VmstatCounters]
    VMSTAT_PGINODESTEAL: _ClassVar[VmstatCounters]
    VMSTAT_SLABS_SCANNED: _ClassVar[VmstatCounters]
    VMSTAT_KSWAPD_INODESTEAL: _ClassVar[VmstatCounters]
    VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY: _ClassVar[VmstatCounters]
    VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY: _ClassVar[VmstatCounters]
    VMSTAT_PAGEOUTRUN: _ClassVar[VmstatCounters]
    VMSTAT_ALLOCSTALL: _ClassVar[VmstatCounters]
    VMSTAT_PGROTATED: _ClassVar[VmstatCounters]
    VMSTAT_DROP_PAGECACHE: _ClassVar[VmstatCounters]
    VMSTAT_DROP_SLAB: _ClassVar[VmstatCounters]
    VMSTAT_PGMIGRATE_SUCCESS: _ClassVar[VmstatCounters]
    VMSTAT_PGMIGRATE_FAIL: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_MIGRATE_SCANNED: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_FREE_SCANNED: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_ISOLATED: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_STALL: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_FAIL: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_SUCCESS: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_DAEMON_WAKE: _ClassVar[VmstatCounters]
    VMSTAT_UNEVICTABLE_PGS_CULLED: _ClassVar[VmstatCounters]
    VMSTAT_UNEVICTABLE_PGS_SCANNED: _ClassVar[VmstatCounters]
    VMSTAT_UNEVICTABLE_PGS_RESCUED: _ClassVar[VmstatCounters]
    VMSTAT_UNEVICTABLE_PGS_MLOCKED: _ClassVar[VmstatCounters]
    VMSTAT_UNEVICTABLE_PGS_MUNLOCKED: _ClassVar[VmstatCounters]
    VMSTAT_UNEVICTABLE_PGS_CLEARED: _ClassVar[VmstatCounters]
    VMSTAT_UNEVICTABLE_PGS_STRANDED: _ClassVar[VmstatCounters]
    VMSTAT_NR_ZSPAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_ION_HEAP: _ClassVar[VmstatCounters]
    VMSTAT_NR_GPU_HEAP: _ClassVar[VmstatCounters]
    VMSTAT_ALLOCSTALL_DMA: _ClassVar[VmstatCounters]
    VMSTAT_ALLOCSTALL_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_ALLOCSTALL_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_DAEMON_FREE_SCANNED: _ClassVar[VmstatCounters]
    VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED: _ClassVar[VmstatCounters]
    VMSTAT_NR_FASTRPC: _ClassVar[VmstatCounters]
    VMSTAT_NR_INDIRECTLY_RECLAIMABLE: _ClassVar[VmstatCounters]
    VMSTAT_NR_ION_HEAP_POOL: _ClassVar[VmstatCounters]
    VMSTAT_NR_KERNEL_MISC_RECLAIMABLE: _ClassVar[VmstatCounters]
    VMSTAT_NR_SHADOW_CALL_STACK_BYTES: _ClassVar[VmstatCounters]
    VMSTAT_NR_SHMEM_HUGEPAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_SHMEM_PMDMAPPED: _ClassVar[VmstatCounters]
    VMSTAT_NR_UNRECLAIMABLE_PAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_ZONE_ACTIVE_ANON: _ClassVar[VmstatCounters]
    VMSTAT_NR_ZONE_ACTIVE_FILE: _ClassVar[VmstatCounters]
    VMSTAT_NR_ZONE_INACTIVE_ANON: _ClassVar[VmstatCounters]
    VMSTAT_NR_ZONE_INACTIVE_FILE: _ClassVar[VmstatCounters]
    VMSTAT_NR_ZONE_UNEVICTABLE: _ClassVar[VmstatCounters]
    VMSTAT_NR_ZONE_WRITE_PENDING: _ClassVar[VmstatCounters]
    VMSTAT_OOM_KILL: _ClassVar[VmstatCounters]
    VMSTAT_PGLAZYFREE: _ClassVar[VmstatCounters]
    VMSTAT_PGLAZYFREED: _ClassVar[VmstatCounters]
    VMSTAT_PGREFILL: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_DIRECT: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_KSWAPD: _ClassVar[VmstatCounters]
    VMSTAT_PGSKIP_DMA: _ClassVar[VmstatCounters]
    VMSTAT_PGSKIP_MOVABLE: _ClassVar[VmstatCounters]
    VMSTAT_PGSKIP_NORMAL: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_DIRECT: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_KSWAPD: _ClassVar[VmstatCounters]
    VMSTAT_SWAP_RA: _ClassVar[VmstatCounters]
    VMSTAT_SWAP_RA_HIT: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_RESTORE: _ClassVar[VmstatCounters]
    VMSTAT_ALLOCSTALL_DEVICE: _ClassVar[VmstatCounters]
    VMSTAT_ALLOCSTALL_DMA32: _ClassVar[VmstatCounters]
    VMSTAT_BALLOON_DEFLATE: _ClassVar[VmstatCounters]
    VMSTAT_BALLOON_INFLATE: _ClassVar[VmstatCounters]
    VMSTAT_BALLOON_MIGRATE: _ClassVar[VmstatCounters]
    VMSTAT_CMA_ALLOC_FAIL: _ClassVar[VmstatCounters]
    VMSTAT_CMA_ALLOC_SUCCESS: _ClassVar[VmstatCounters]
    VMSTAT_NR_FILE_HUGEPAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_FILE_PMDMAPPED: _ClassVar[VmstatCounters]
    VMSTAT_NR_FOLL_PIN_ACQUIRED: _ClassVar[VmstatCounters]
    VMSTAT_NR_FOLL_PIN_RELEASED: _ClassVar[VmstatCounters]
    VMSTAT_NR_SEC_PAGE_TABLE_PAGES: _ClassVar[VmstatCounters]
    VMSTAT_NR_SHADOW_CALL_STACK: _ClassVar[VmstatCounters]
    VMSTAT_NR_SWAPCACHED: _ClassVar[VmstatCounters]
    VMSTAT_NR_THROTTLED_WRITTEN: _ClassVar[VmstatCounters]
    VMSTAT_PGALLOC_DEVICE: _ClassVar[VmstatCounters]
    VMSTAT_PGALLOC_DMA32: _ClassVar[VmstatCounters]
    VMSTAT_PGDEMOTE_DIRECT: _ClassVar[VmstatCounters]
    VMSTAT_PGDEMOTE_KSWAPD: _ClassVar[VmstatCounters]
    VMSTAT_PGREUSE: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_ANON: _ClassVar[VmstatCounters]
    VMSTAT_PGSCAN_FILE: _ClassVar[VmstatCounters]
    VMSTAT_PGSKIP_DEVICE: _ClassVar[VmstatCounters]
    VMSTAT_PGSKIP_DMA32: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_ANON: _ClassVar[VmstatCounters]
    VMSTAT_PGSTEAL_FILE: _ClassVar[VmstatCounters]
    VMSTAT_THP_COLLAPSE_ALLOC: _ClassVar[VmstatCounters]
    VMSTAT_THP_COLLAPSE_ALLOC_FAILED: _ClassVar[VmstatCounters]
    VMSTAT_THP_DEFERRED_SPLIT_PAGE: _ClassVar[VmstatCounters]
    VMSTAT_THP_FAULT_ALLOC: _ClassVar[VmstatCounters]
    VMSTAT_THP_FAULT_FALLBACK: _ClassVar[VmstatCounters]
    VMSTAT_THP_FAULT_FALLBACK_CHARGE: _ClassVar[VmstatCounters]
    VMSTAT_THP_FILE_ALLOC: _ClassVar[VmstatCounters]
    VMSTAT_THP_FILE_FALLBACK: _ClassVar[VmstatCounters]
    VMSTAT_THP_FILE_FALLBACK_CHARGE: _ClassVar[VmstatCounters]
    VMSTAT_THP_FILE_MAPPED: _ClassVar[VmstatCounters]
    VMSTAT_THP_MIGRATION_FAIL: _ClassVar[VmstatCounters]
    VMSTAT_THP_MIGRATION_SPLIT: _ClassVar[VmstatCounters]
    VMSTAT_THP_MIGRATION_SUCCESS: _ClassVar[VmstatCounters]
    VMSTAT_THP_SCAN_EXCEED_NONE_PTE: _ClassVar[VmstatCounters]
    VMSTAT_THP_SCAN_EXCEED_SHARE_PTE: _ClassVar[VmstatCounters]
    VMSTAT_THP_SCAN_EXCEED_SWAP_PTE: _ClassVar[VmstatCounters]
    VMSTAT_THP_SPLIT_PAGE: _ClassVar[VmstatCounters]
    VMSTAT_THP_SPLIT_PAGE_FAILED: _ClassVar[VmstatCounters]
    VMSTAT_THP_SPLIT_PMD: _ClassVar[VmstatCounters]
    VMSTAT_THP_SWPOUT: _ClassVar[VmstatCounters]
    VMSTAT_THP_SWPOUT_FALLBACK: _ClassVar[VmstatCounters]
    VMSTAT_THP_ZERO_PAGE_ALLOC: _ClassVar[VmstatCounters]
    VMSTAT_THP_ZERO_PAGE_ALLOC_FAILED: _ClassVar[VmstatCounters]
    VMSTAT_VMA_LOCK_ABORT: _ClassVar[VmstatCounters]
    VMSTAT_VMA_LOCK_MISS: _ClassVar[VmstatCounters]
    VMSTAT_VMA_LOCK_RETRY: _ClassVar[VmstatCounters]
    VMSTAT_VMA_LOCK_SUCCESS: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_ACTIVATE_ANON: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_ACTIVATE_FILE: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_NODES: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_REFAULT_ANON: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_REFAULT_FILE: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_RESTORE_ANON: _ClassVar[VmstatCounters]
    VMSTAT_WORKINGSET_RESTORE_FILE: _ClassVar[VmstatCounters]

class TrafficDirection(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    DIR_UNSPECIFIED: _ClassVar[TrafficDirection]
    DIR_INGRESS: _ClassVar[TrafficDirection]
    DIR_EGRESS: _ClassVar[TrafficDirection]

class HwcCompositionType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    HWC_TYPE_UNSPECIFIED: _ClassVar[HwcCompositionType]
    HWC_TYPE_CLIENT: _ClassVar[HwcCompositionType]
    HWC_TYPE_DEVICE: _ClassVar[HwcCompositionType]
    HWC_TYPE_SOLID_COLOR: _ClassVar[HwcCompositionType]
    HWC_TYPE_CURSOR: _ClassVar[HwcCompositionType]
    HWC_TYPE_SIDEBAND: _ClassVar[HwcCompositionType]

class FtraceParseStatus(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    FTRACE_STATUS_UNSPECIFIED: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_OK: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_UNEXPECTED_READ_ERROR: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_PARTIAL_PAGE_READ: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_INVALID_PAGE_HEADER: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_SHORT_EVENT_HEADER: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_NULL_PADDING: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_SHORT_PADDING_LENGTH: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_INVALID_PADDING_LENGTH: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_SHORT_TIME_EXTEND: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_SHORT_TIME_STAMP: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_SHORT_DATA_LENGTH: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_ZERO_DATA_LENGTH: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_INVALID_DATA_LENGTH: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_SHORT_EVENT_ID: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_ABI_END_OVERFLOW: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_SHORT_COMPACT_EVENT: _ClassVar[FtraceParseStatus]
    FTRACE_STATUS_INVALID_EVENT: _ClassVar[FtraceParseStatus]

class FtraceClock(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    FTRACE_CLOCK_UNSPECIFIED: _ClassVar[FtraceClock]
    FTRACE_CLOCK_UNKNOWN: _ClassVar[FtraceClock]
    FTRACE_CLOCK_GLOBAL: _ClassVar[FtraceClock]
    FTRACE_CLOCK_LOCAL: _ClassVar[FtraceClock]
    FTRACE_CLOCK_MONO_RAW: _ClassVar[FtraceClock]

class ChromeCompositorSchedulerAction(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    CC_SCHEDULER_ACTION_UNSPECIFIED: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_NONE: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_COMMIT: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_DRAW_FORCED: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_DRAW_ABORT: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_PREPARE_TILES: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL: _ClassVar[ChromeCompositorSchedulerAction]
    CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON: _ClassVar[ChromeCompositorSchedulerAction]

class ChromeRAILMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    RAIL_MODE_NONE: _ClassVar[ChromeRAILMode]
    RAIL_MODE_RESPONSE: _ClassVar[ChromeRAILMode]
    RAIL_MODE_ANIMATION: _ClassVar[ChromeRAILMode]
    RAIL_MODE_IDLE: _ClassVar[ChromeRAILMode]
    RAIL_MODE_LOAD: _ClassVar[ChromeRAILMode]

BUILTIN_CLOCK_UNKNOWN: BuiltinClock
BUILTIN_CLOCK_REALTIME: BuiltinClock
BUILTIN_CLOCK_REALTIME_COARSE: BuiltinClock
BUILTIN_CLOCK_MONOTONIC: BuiltinClock
BUILTIN_CLOCK_MONOTONIC_COARSE: BuiltinClock
BUILTIN_CLOCK_MONOTONIC_RAW: BuiltinClock
BUILTIN_CLOCK_BOOTTIME: BuiltinClock
BUILTIN_CLOCK_MAX_ID: BuiltinClock
LID_DEFAULT: AndroidLogId
LID_RADIO: AndroidLogId
LID_EVENTS: AndroidLogId
LID_SYSTEM: AndroidLogId
LID_CRASH: AndroidLogId
LID_STATS: AndroidLogId
LID_SECURITY: AndroidLogId
LID_KERNEL: AndroidLogId
PRIO_UNSPECIFIED: AndroidLogPriority
PRIO_UNUSED: AndroidLogPriority
PRIO_VERBOSE: AndroidLogPriority
PRIO_DEBUG: AndroidLogPriority
PRIO_INFO: AndroidLogPriority
PRIO_WARN: AndroidLogPriority
PRIO_ERROR: AndroidLogPriority
PRIO_FATAL: AndroidLogPriority
PROTOLOG_LEVEL_UNDEFINED: ProtoLogLevel
PROTOLOG_LEVEL_DEBUG: ProtoLogLevel
PROTOLOG_LEVEL_VERBOSE: ProtoLogLevel
PROTOLOG_LEVEL_INFO: ProtoLogLevel
PROTOLOG_LEVEL_WARN: ProtoLogLevel
PROTOLOG_LEVEL_ERROR: ProtoLogLevel
PROTOLOG_LEVEL_WTF: ProtoLogLevel
ATOM_UNSPECIFIED: AtomId
ATOM_BLE_SCAN_STATE_CHANGED: AtomId
ATOM_PROCESS_STATE_CHANGED: AtomId
ATOM_BLE_SCAN_RESULT_RECEIVED: AtomId
ATOM_SENSOR_STATE_CHANGED: AtomId
ATOM_GPS_SCAN_STATE_CHANGED: AtomId
ATOM_SYNC_STATE_CHANGED: AtomId
ATOM_SCHEDULED_JOB_STATE_CHANGED: AtomId
ATOM_SCREEN_BRIGHTNESS_CHANGED: AtomId
ATOM_WAKELOCK_STATE_CHANGED: AtomId
ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED: AtomId
ATOM_MOBILE_RADIO_POWER_STATE_CHANGED: AtomId
ATOM_WIFI_RADIO_POWER_STATE_CHANGED: AtomId
ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED: AtomId
ATOM_MEMORY_FACTOR_STATE_CHANGED: AtomId
ATOM_EXCESSIVE_CPU_USAGE_REPORTED: AtomId
ATOM_CACHED_KILL_REPORTED: AtomId
ATOM_PROCESS_MEMORY_STAT_REPORTED: AtomId
ATOM_LAUNCHER_EVENT: AtomId
ATOM_BATTERY_SAVER_MODE_STATE_CHANGED: AtomId
ATOM_DEVICE_IDLE_MODE_STATE_CHANGED: AtomId
ATOM_DEVICE_IDLING_MODE_STATE_CHANGED: AtomId
ATOM_AUDIO_STATE_CHANGED: AtomId
ATOM_MEDIA_CODEC_STATE_CHANGED: AtomId
ATOM_CAMERA_STATE_CHANGED: AtomId
ATOM_FLASHLIGHT_STATE_CHANGED: AtomId
ATOM_UID_PROCESS_STATE_CHANGED: AtomId
ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED: AtomId
ATOM_SCREEN_STATE_CHANGED: AtomId
ATOM_BATTERY_LEVEL_CHANGED: AtomId
ATOM_CHARGING_STATE_CHANGED: AtomId
ATOM_PLUGGED_STATE_CHANGED: AtomId
ATOM_INTERACTIVE_STATE_CHANGED: AtomId
ATOM_TOUCH_EVENT_REPORTED: AtomId
ATOM_WAKEUP_ALARM_OCCURRED: AtomId
ATOM_KERNEL_WAKEUP_REPORTED: AtomId
ATOM_WIFI_LOCK_STATE_CHANGED: AtomId
ATOM_WIFI_SIGNAL_STRENGTH_CHANGED: AtomId
ATOM_WIFI_SCAN_STATE_CHANGED: AtomId
ATOM_PHONE_SIGNAL_STRENGTH_CHANGED: AtomId
ATOM_SETTING_CHANGED: AtomId
ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED: AtomId
ATOM_ISOLATED_UID_CHANGED: AtomId
ATOM_PACKET_WAKEUP_OCCURRED: AtomId
ATOM_WALL_CLOCK_TIME_SHIFTED: AtomId
ATOM_ANOMALY_DETECTED: AtomId
ATOM_APP_BREADCRUMB_REPORTED: AtomId
ATOM_APP_START_OCCURRED: AtomId
ATOM_APP_START_CANCELED: AtomId
ATOM_APP_START_FULLY_DRAWN: AtomId
ATOM_LMK_KILL_OCCURRED: AtomId
ATOM_PICTURE_IN_PICTURE_STATE_CHANGED: AtomId
ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED: AtomId
ATOM_LMK_STATE_CHANGED: AtomId
ATOM_APP_START_MEMORY_STATE_CAPTURED: AtomId
ATOM_SHUTDOWN_SEQUENCE_REPORTED: AtomId
ATOM_BOOT_SEQUENCE_REPORTED: AtomId
ATOM_DAVEY_OCCURRED: AtomId
ATOM_OVERLAY_STATE_CHANGED: AtomId
ATOM_FOREGROUND_SERVICE_STATE_CHANGED: AtomId
ATOM_CALL_STATE_CHANGED: AtomId
ATOM_KEYGUARD_STATE_CHANGED: AtomId
ATOM_KEYGUARD_BOUNCER_STATE_CHANGED: AtomId
ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED: AtomId
ATOM_APP_DIED: AtomId
ATOM_RESOURCE_CONFIGURATION_CHANGED: AtomId
ATOM_BLUETOOTH_ENABLED_STATE_CHANGED: AtomId
ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED: AtomId
ATOM_GPS_SIGNAL_QUALITY_CHANGED: AtomId
ATOM_USB_CONNECTOR_STATE_CHANGED: AtomId
ATOM_SPEAKER_IMPEDANCE_REPORTED: AtomId
ATOM_HARDWARE_FAILED: AtomId
ATOM_PHYSICAL_DROP_DETECTED: AtomId
ATOM_CHARGE_CYCLES_REPORTED: AtomId
ATOM_MOBILE_CONNECTION_STATE_CHANGED: AtomId
ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED: AtomId
ATOM_USB_DEVICE_ATTACHED: AtomId
ATOM_APP_CRASH_OCCURRED: AtomId
ATOM_ANR_OCCURRED: AtomId
ATOM_WTF_OCCURRED: AtomId
ATOM_LOW_MEM_REPORTED: AtomId
ATOM_GENERIC_ATOM: AtomId
ATOM_VIBRATOR_STATE_CHANGED: AtomId
ATOM_DEFERRED_JOB_STATS_REPORTED: AtomId
ATOM_THERMAL_THROTTLING: AtomId
ATOM_BIOMETRIC_ACQUIRED: AtomId
ATOM_BIOMETRIC_AUTHENTICATED: AtomId
ATOM_BIOMETRIC_ERROR_OCCURRED: AtomId
ATOM_UI_EVENT_REPORTED: AtomId
ATOM_BATTERY_HEALTH_SNAPSHOT: AtomId
ATOM_SLOW_IO: AtomId
ATOM_BATTERY_CAUSED_SHUTDOWN: AtomId
ATOM_PHONE_SERVICE_STATE_CHANGED: AtomId
ATOM_PHONE_STATE_CHANGED: AtomId
ATOM_USER_RESTRICTION_CHANGED: AtomId
ATOM_SETTINGS_UI_CHANGED: AtomId
ATOM_CONNECTIVITY_STATE_CHANGED: AtomId
ATOM_SERVICE_STATE_CHANGED: AtomId
ATOM_SERVICE_LAUNCH_REPORTED: AtomId
ATOM_FLAG_FLIP_UPDATE_OCCURRED: AtomId
ATOM_BINARY_PUSH_STATE_CHANGED: AtomId
ATOM_DEVICE_POLICY_EVENT: AtomId
ATOM_DOCS_UI_FILE_OP_CANCELED: AtomId
ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED: AtomId
ATOM_DOCS_UI_FILE_OP_FAILURE: AtomId
ATOM_DOCS_UI_PROVIDER_FILE_OP: AtomId
ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST: AtomId
ATOM_DOCS_UI_LAUNCH_REPORTED: AtomId
ATOM_DOCS_UI_ROOT_VISITED: AtomId
ATOM_DOCS_UI_STARTUP_MS: AtomId
ATOM_DOCS_UI_USER_ACTION_REPORTED: AtomId
ATOM_WIFI_ENABLED_STATE_CHANGED: AtomId
ATOM_WIFI_RUNNING_STATE_CHANGED: AtomId
ATOM_APP_COMPACTED: AtomId
ATOM_NETWORK_DNS_EVENT_REPORTED: AtomId
ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED: AtomId
ATOM_DOCS_UI_PICK_RESULT_REPORTED: AtomId
ATOM_DOCS_UI_SEARCH_MODE_REPORTED: AtomId
ATOM_DOCS_UI_SEARCH_TYPE_REPORTED: AtomId
ATOM_DATA_STALL_EVENT: AtomId
ATOM_RESCUE_PARTY_RESET_REPORTED: AtomId
ATOM_SIGNED_CONFIG_REPORTED: AtomId
ATOM_GNSS_NI_EVENT_REPORTED: AtomId
ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT: AtomId
ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED: AtomId
ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED: AtomId
ATOM_APP_DOWNGRADED: AtomId
ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED: AtomId
ATOM_LOW_STORAGE_STATE_CHANGED: AtomId
ATOM_GNSS_NFW_NOTIFICATION_REPORTED: AtomId
ATOM_GNSS_CONFIGURATION_REPORTED: AtomId
ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED: AtomId
ATOM_NFC_ERROR_OCCURRED: AtomId
ATOM_NFC_STATE_CHANGED: AtomId
ATOM_NFC_BEAM_OCCURRED: AtomId
ATOM_NFC_CARDEMULATION_OCCURRED: AtomId
ATOM_NFC_TAG_OCCURRED: AtomId
ATOM_NFC_HCE_TRANSACTION_OCCURRED: AtomId
ATOM_SE_STATE_CHANGED: AtomId
ATOM_SE_OMAPI_REPORTED: AtomId
ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED: AtomId
ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED: AtomId
ATOM_ADB_CONNECTION_CHANGED: AtomId
ATOM_SPEECH_DSP_STAT_REPORTED: AtomId
ATOM_USB_CONTAMINANT_REPORTED: AtomId
ATOM_WATCHDOG_ROLLBACK_OCCURRED: AtomId
ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED: AtomId
ATOM_BUBBLE_UI_CHANGED: AtomId
ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED: AtomId
ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED: AtomId
ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED: AtomId
ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED: AtomId
ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED: AtomId
ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED: AtomId
ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED: AtomId
ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED: AtomId
ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED: AtomId
ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED: AtomId
ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED: AtomId
ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED: AtomId
ATOM_BLUETOOTH_DEVICE_INFO_REPORTED: AtomId
ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED: AtomId
ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED: AtomId
ATOM_BLUETOOTH_BOND_STATE_CHANGED: AtomId
ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED: AtomId
ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED: AtomId
ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED: AtomId
ATOM_PROCESS_START_TIME: AtomId
ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED: AtomId
ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED: AtomId
ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED: AtomId
ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED: AtomId
ATOM_ASSIST_GESTURE_STAGE_REPORTED: AtomId
ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED: AtomId
ATOM_ASSIST_GESTURE_PROGRESS_REPORTED: AtomId
ATOM_TOUCH_GESTURE_CLASSIFIED: AtomId
ATOM_HIDDEN_API_USED: AtomId
ATOM_STYLE_UI_CHANGED: AtomId
ATOM_PRIVACY_INDICATORS_INTERACTED: AtomId
ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED: AtomId
ATOM_NETWORK_STACK_REPORTED: AtomId
ATOM_APP_MOVED_STORAGE_REPORTED: AtomId
ATOM_BIOMETRIC_ENROLLED: AtomId
ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED: AtomId
ATOM_TOMB_STONE_OCCURRED: AtomId
ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED: AtomId
ATOM_INTELLIGENCE_EVENT_REPORTED: AtomId
ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED: AtomId
ATOM_ROLE_REQUEST_RESULT_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED: AtomId
ATOM_MEDIAMETRICS_CODEC_REPORTED: AtomId
ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED: AtomId
ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED: AtomId
ATOM_MEDIAMETRICS_MEDIADRM_REPORTED: AtomId
ATOM_MEDIAMETRICS_NUPLAYER_REPORTED: AtomId
ATOM_MEDIAMETRICS_RECORDER_REPORTED: AtomId
ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED: AtomId
ATOM_CAR_POWER_STATE_CHANGED: AtomId
ATOM_GARAGE_MODE_INFO: AtomId
ATOM_TEST_ATOM_REPORTED: AtomId
ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED: AtomId
ATOM_CONTENT_CAPTURE_SERVICE_EVENTS: AtomId
ATOM_CONTENT_CAPTURE_SESSION_EVENTS: AtomId
ATOM_CONTENT_CAPTURE_FLUSHED: AtomId
ATOM_LOCATION_MANAGER_API_USAGE_REPORTED: AtomId
ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED: AtomId
ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT: AtomId
ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS: AtomId
ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION: AtomId
ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED: AtomId
ATOM_APP_PERMISSION_FRAGMENT_VIEWED: AtomId
ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED: AtomId
ATOM_PERMISSION_APPS_FRAGMENT_VIEWED: AtomId
ATOM_TEXT_SELECTION_EVENT: AtomId
ATOM_TEXT_LINKIFY_EVENT: AtomId
ATOM_CONVERSATION_ACTIONS_EVENT: AtomId
ATOM_LANGUAGE_DETECTION_EVENT: AtomId
ATOM_EXCLUSION_RECT_STATE_CHANGED: AtomId
ATOM_BACK_GESTURE_REPORTED_REPORTED: AtomId
ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED: AtomId
ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED: AtomId
ATOM_CAMERA_ACTION_EVENT: AtomId
ATOM_APP_COMPATIBILITY_CHANGE_REPORTED: AtomId
ATOM_PERFETTO_UPLOADED: AtomId
ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED: AtomId
ATOM_MEDIA_PROVIDER_SCAN_OCCURRED: AtomId
ATOM_MEDIA_CONTENT_DELETED: AtomId
ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED: AtomId
ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED: AtomId
ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED: AtomId
ATOM_REBOOT_ESCROW_RECOVERY_REPORTED: AtomId
ATOM_BOOT_TIME_EVENT_DURATION_REPORTED: AtomId
ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED: AtomId
ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED: AtomId
ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED: AtomId
ATOM_USERSPACE_REBOOT_REPORTED: AtomId
ATOM_NOTIFICATION_REPORTED: AtomId
ATOM_NOTIFICATION_PANEL_REPORTED: AtomId
ATOM_NOTIFICATION_CHANNEL_MODIFIED: AtomId
ATOM_INTEGRITY_CHECK_RESULT_REPORTED: AtomId
ATOM_INTEGRITY_RULES_PUSHED: AtomId
ATOM_CB_MESSAGE_REPORTED: AtomId
ATOM_CB_MESSAGE_ERROR: AtomId
ATOM_WIFI_HEALTH_STAT_REPORTED: AtomId
ATOM_WIFI_FAILURE_STAT_REPORTED: AtomId
ATOM_WIFI_CONNECTION_RESULT_REPORTED: AtomId
ATOM_APP_FREEZE_CHANGED: AtomId
ATOM_SNAPSHOT_MERGE_REPORTED: AtomId
ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED: AtomId
ATOM_DISPLAY_JANK_REPORTED: AtomId
ATOM_APP_STANDBY_BUCKET_CHANGED: AtomId
ATOM_SHARESHEET_STARTED: AtomId
ATOM_RANKING_SELECTED: AtomId
ATOM_TVSETTINGS_UI_INTERACTED: AtomId
ATOM_LAUNCHER_SNAPSHOT: AtomId
ATOM_PACKAGE_INSTALLER_V2_REPORTED: AtomId
ATOM_USER_LIFECYCLE_JOURNEY_REPORTED: AtomId
ATOM_USER_LIFECYCLE_EVENT_OCCURRED: AtomId
ATOM_ACCESSIBILITY_SHORTCUT_REPORTED: AtomId
ATOM_ACCESSIBILITY_SERVICE_REPORTED: AtomId
ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED: AtomId
ATOM_APP_USAGE_EVENT_OCCURRED: AtomId
ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED: AtomId
ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED: AtomId
ATOM_AUTO_REVOKED_APP_INTERACTION: AtomId
ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION: AtomId
ATOM_EVS_USAGE_STATS_REPORTED: AtomId
ATOM_AUDIO_POWER_USAGE_DATA_REPORTED: AtomId
ATOM_TV_TUNER_STATE_CHANGED: AtomId
ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED: AtomId
ATOM_CB_MESSAGE_FILTERED: AtomId
ATOM_TV_TUNER_DVR_STATUS: AtomId
ATOM_TV_CAS_SESSION_OPEN_STATUS: AtomId
ATOM_ASSISTANT_INVOCATION_REPORTED: AtomId
ATOM_DISPLAY_WAKE_REPORTED: AtomId
ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED: AtomId
ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED: AtomId
ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED: AtomId
ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED: AtomId
ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED: AtomId
ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED: AtomId
ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED: AtomId
ATOM_NETWORK_IP_PROVISIONING_REPORTED: AtomId
ATOM_NETWORK_DHCP_RENEW_REPORTED: AtomId
ATOM_NETWORK_VALIDATION_REPORTED: AtomId
ATOM_NETWORK_STACK_QUIRK_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED: AtomId
ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED: AtomId
ATOM_BLOB_COMMITTED: AtomId
ATOM_BLOB_LEASED: AtomId
ATOM_BLOB_OPENED: AtomId
ATOM_CONTACTS_PROVIDER_STATUS_REPORTED: AtomId
ATOM_KEYSTORE_KEY_EVENT_REPORTED: AtomId
ATOM_NETWORK_TETHERING_REPORTED: AtomId
ATOM_IME_TOUCH_REPORTED: AtomId
ATOM_UI_INTERACTION_FRAME_INFO_REPORTED: AtomId
ATOM_UI_ACTION_LATENCY_REPORTED: AtomId
ATOM_WIFI_DISCONNECT_REPORTED: AtomId
ATOM_WIFI_CONNECTION_STATE_CHANGED: AtomId
ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED: AtomId
ATOM_HDMI_CEC_MESSAGE_REPORTED: AtomId
ATOM_AIRPLANE_MODE: AtomId
ATOM_MODEM_RESTART: AtomId
ATOM_CARRIER_ID_MISMATCH_REPORTED: AtomId
ATOM_CARRIER_ID_TABLE_UPDATED: AtomId
ATOM_DATA_STALL_RECOVERY_REPORTED: AtomId
ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED: AtomId
ATOM_TLS_HANDSHAKE_REPORTED: AtomId
ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED: AtomId
ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED: AtomId
ATOM_MEDIAMETRICS_PLAYBACK_REPORTED: AtomId
ATOM_MEDIA_NETWORK_INFO_CHANGED: AtomId
ATOM_MEDIA_PLAYBACK_STATE_CHANGED: AtomId
ATOM_MEDIA_PLAYBACK_ERROR_REPORTED: AtomId
ATOM_MEDIA_PLAYBACK_TRACK_CHANGED: AtomId
ATOM_WIFI_SCAN_REPORTED: AtomId
ATOM_WIFI_PNO_SCAN_REPORTED: AtomId
ATOM_TIF_TUNE_CHANGED: AtomId
ATOM_AUTO_ROTATE_REPORTED: AtomId
ATOM_PERFETTO_TRIGGER: AtomId
ATOM_TRANSCODING_DATA: AtomId
ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED: AtomId
ATOM_DEVICE_ROTATED: AtomId
ATOM_SIM_SPECIFIC_SETTINGS_RESTORED: AtomId
ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED: AtomId
ATOM_PIN_STORAGE_EVENT: AtomId
ATOM_FACE_DOWN_REPORTED: AtomId
ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED: AtomId
ATOM_REBOOT_ESCROW_PREPARATION_REPORTED: AtomId
ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED: AtomId
ATOM_REBOOT_ESCROW_REBOOT_REPORTED: AtomId
ATOM_BINDER_LATENCY_REPORTED: AtomId
ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED: AtomId
ATOM_MEDIA_TRANSCODING_SESSION_ENDED: AtomId
ATOM_MAGNIFICATION_USAGE_REPORTED: AtomId
ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED: AtomId
ATOM_APP_SEARCH_CALL_STATS_REPORTED: AtomId
ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED: AtomId
ATOM_DEVICE_CONTROL_CHANGED: AtomId
ATOM_DEVICE_STATE_CHANGED: AtomId
ATOM_INPUTDEVICE_REGISTERED: AtomId
ATOM_SMARTSPACE_CARD_REPORTED: AtomId
ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED: AtomId
ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED: AtomId
ATOM_AUTH_ENROLL_ACTION_INVOKED: AtomId
ATOM_AUTH_DEPRECATED_API_USED: AtomId
ATOM_UNATTENDED_REBOOT_OCCURRED: AtomId
ATOM_LONG_REBOOT_BLOCKING_REPORTED: AtomId
ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED: AtomId
ATOM_FDTRACK_EVENT_OCCURRED: AtomId
ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED: AtomId
ATOM_ALARM_BATCH_DELIVERED: AtomId
ATOM_ALARM_SCHEDULED: AtomId
ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED: AtomId
ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED: AtomId
ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED: AtomId
ATOM_APP_SEARCH_QUERY_STATS_REPORTED: AtomId
ATOM_APP_PROCESS_DIED: AtomId
ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED: AtomId
ATOM_SLOW_INPUT_EVENT_REPORTED: AtomId
ATOM_ANR_OCCURRED_PROCESSING_STARTED: AtomId
ATOM_APP_SEARCH_REMOVE_STATS_REPORTED: AtomId
ATOM_MEDIA_CODEC_REPORTED: AtomId
ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION: AtomId
ATOM_PERMISSION_DETAILS_INTERACTION: AtomId
ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION: AtomId
ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION: AtomId
ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED: AtomId
ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT: AtomId
ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED: AtomId
ATOM_APP_COMPAT_STATE_CHANGED: AtomId
ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED: AtomId
ATOM_SPLITSCREEN_UI_CHANGED: AtomId
ATOM_NETWORK_DNS_HANDSHAKE_REPORTED: AtomId
ATOM_BLUETOOTH_CODE_PATH_COUNTER: AtomId
ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY: AtomId
ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED: AtomId
ATOM_NEURALNETWORKS_COMPILATION_COMPLETED: AtomId
ATOM_NEURALNETWORKS_EXECUTION_COMPLETED: AtomId
ATOM_NEURALNETWORKS_COMPILATION_FAILED: AtomId
ATOM_NEURALNETWORKS_EXECUTION_FAILED: AtomId
ATOM_CONTEXT_HUB_BOOTED: AtomId
ATOM_CONTEXT_HUB_RESTARTED: AtomId
ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED: AtomId
ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED: AtomId
ATOM_UWB_SESSION_INITED: AtomId
ATOM_UWB_SESSION_CLOSED: AtomId
ATOM_UWB_FIRST_RANGING_RECEIVED: AtomId
ATOM_UWB_RANGING_MEASUREMENT_RECEIVED: AtomId
ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED: AtomId
ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED: AtomId
ATOM_CLIPBOARD_CLEARED: AtomId
ATOM_VM_CREATION_REQUESTED: AtomId
ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED: AtomId
ATOM_CAMERA_COMPAT_CONTROL_EVENT_REPORTED: AtomId
ATOM_APPLICATION_LOCALES_CHANGED: AtomId
ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED: AtomId
ATOM_FOLD_STATE_DURATION_REPORTED: AtomId
ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED: AtomId
ATOM_DISPLAY_HBM_STATE_CHANGED: AtomId
ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED: AtomId
ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED: AtomId
ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED: AtomId
ATOM_VBMETA_DIGEST_REPORTED: AtomId
ATOM_APEX_INFO_GATHERED: AtomId
ATOM_PVM_INFO_GATHERED: AtomId
ATOM_WEAR_SETTINGS_UI_INTERACTED: AtomId
ATOM_TRACING_SERVICE_REPORT_EVENT: AtomId
ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED: AtomId
ATOM_LAUNCHER_LATENCY: AtomId
ATOM_DROPBOX_ENTRY_DROPPED: AtomId
ATOM_WIFI_P2P_CONNECTION_REPORTED: AtomId
ATOM_GAME_STATE_CHANGED: AtomId
ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED: AtomId
ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED: AtomId
ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED: AtomId
ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED: AtomId
ATOM_HOTWORD_DETECTOR_EVENTS: AtomId
ATOM_AD_SERVICES_API_CALLED: AtomId
ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED: AtomId
ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED: AtomId
ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED: AtomId
ATOM_APP_BACKGROUND_RESTRICTIONS_INFO: AtomId
ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED: AtomId
ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED: AtomId
ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED: AtomId
ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED: AtomId
ATOM_GNSS_PSDS_DOWNLOAD_REPORTED: AtomId
ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED: AtomId
ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED: AtomId
ATOM_DREAM_UI_EVENT_REPORTED: AtomId
ATOM_TASK_MANAGER_EVENT_REPORTED: AtomId
ATOM_CDM_ASSOCIATION_ACTION: AtomId
ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED: AtomId
ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED: AtomId
ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED: AtomId
ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED: AtomId
ATOM_UWB_DEVICE_ERROR_REPORTED: AtomId
ATOM_ISOLATED_COMPILATION_SCHEDULED: AtomId
ATOM_ISOLATED_COMPILATION_ENDED: AtomId
ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE: AtomId
ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED: AtomId
ATOM_TELEPHONY_ANOMALY_DETECTED: AtomId
ATOM_LETTERBOX_POSITION_CHANGED: AtomId
ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT: AtomId
ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO: AtomId
ATOM_REMOTE_KEY_PROVISIONING_TIMING: AtomId
ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT: AtomId
ATOM_SYNC_EXEMPTION_OCCURRED: AtomId
ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED: AtomId
ATOM_DOCK_STATE_CHANGED: AtomId
ATOM_SAFETY_SOURCE_STATE_COLLECTED: AtomId
ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED: AtomId
ATOM_SAFETY_CENTER_INTERACTION_REPORTED: AtomId
ATOM_SETTINGS_PROVIDER_SETTING_CHANGED: AtomId
ATOM_BROADCAST_DELIVERY_EVENT_REPORTED: AtomId
ATOM_SERVICE_REQUEST_EVENT_REPORTED: AtomId
ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED: AtomId
ATOM_BLUETOOTH_DEVICE_NAME_REPORTED: AtomId
ATOM_CB_CONFIG_UPDATED: AtomId
ATOM_CB_MODULE_ERROR_REPORTED: AtomId
ATOM_CB_SERVICE_FEATURE_CHANGED: AtomId
ATOM_CB_RECEIVER_FEATURE_CHANGED: AtomId
ATOM_JSSCRIPTENGINE_LATENCY_REPORTED: AtomId
ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION: AtomId
ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION: AtomId
ATOM_PRIVACY_SIGNALS_JOB_FAILURE: AtomId
ATOM_VIBRATION_REPORTED: AtomId
ATOM_UWB_RANGING_START: AtomId
ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED: AtomId
ATOM_APP_COMPACTED_V2: AtomId
ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED: AtomId
ATOM_DISPLAY_BRIGHTNESS_CHANGED: AtomId
ATOM_ACTIVITY_ACTION_BLOCKED: AtomId
ATOM_BACKGROUND_FETCH_PROCESS_REPORTED: AtomId
ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED: AtomId
ATOM_RUN_AD_BIDDING_PROCESS_REPORTED: AtomId
ATOM_RUN_AD_SCORING_PROCESS_REPORTED: AtomId
ATOM_RUN_AD_SELECTION_PROCESS_REPORTED: AtomId
ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED: AtomId
ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED: AtomId
ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED: AtomId
ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED: AtomId
ATOM_VM_BOOTED: AtomId
ATOM_VM_EXITED: AtomId
ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED: AtomId
ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED: AtomId
ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED: AtomId
ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED: AtomId
ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED: AtomId
ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS: AtomId
ATOM_HEARING_AID_INFO_REPORTED: AtomId
ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED: AtomId
ATOM_AMBIENT_MODE_CHANGED: AtomId
ATOM_ANR_LATENCY_REPORTED: AtomId
ATOM_RESOURCE_API_INFO: AtomId
ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED: AtomId
ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED: AtomId
ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED: AtomId
ATOM_AIRPLANE_MODE_SESSION_REPORTED: AtomId
ATOM_VM_CPU_STATUS_REPORTED: AtomId
ATOM_VM_MEM_STATUS_REPORTED: AtomId
ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED: AtomId
ATOM_DEFAULT_NETWORK_REMATCH_INFO: AtomId
ATOM_NETWORK_SELECTION_PERFORMANCE: AtomId
ATOM_NETWORK_NSD_REPORTED: AtomId
ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED: AtomId
ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED: AtomId
ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED: AtomId
ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED: AtomId
ATOM_BLUETOOTH_GATT_APP_INFO: AtomId
ATOM_BRIGHTNESS_CONFIGURATION_UPDATED: AtomId
ATOM_AD_SERVICES_GET_TOPICS_REPORTED: AtomId
ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED: AtomId
ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED: AtomId
ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED: AtomId
ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED: AtomId
ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED: AtomId
ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED: AtomId
ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY: AtomId
ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY: AtomId
ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED: AtomId
ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED: AtomId
ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED: AtomId
ATOM_LAUNCHER_IMPRESSION_EVENT: AtomId
ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY: AtomId
ATOM_WS_WATCH_FACE_EDITED: AtomId
ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED: AtomId
ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED: AtomId
ATOM_PACKAGE_UNINSTALLATION_REPORTED: AtomId
ATOM_GAME_MODE_CHANGED: AtomId
ATOM_GAME_MODE_CONFIGURATION_CHANGED: AtomId
ATOM_BEDTIME_MODE_STATE_CHANGED: AtomId
ATOM_NETWORK_SLICE_SESSION_ENDED: AtomId
ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED: AtomId
ATOM_NFC_TAG_TYPE_OCCURRED: AtomId
ATOM_NFC_AID_CONFLICT_OCCURRED: AtomId
ATOM_NFC_READER_CONFLICT_OCCURRED: AtomId
ATOM_WS_TILE_LIST_CHANGED: AtomId
ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION: AtomId
ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED: AtomId
ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED: AtomId
ATOM_MEDIA_DRM_CREATED: AtomId
ATOM_MEDIA_DRM_ERRORED: AtomId
ATOM_MEDIA_DRM_SESSION_OPENED: AtomId
ATOM_MEDIA_DRM_SESSION_CLOSED: AtomId
ATOM_USER_SELECTED_RESOLUTION: AtomId
ATOM_UNSAFE_INTENT_EVENT_REPORTED: AtomId
ATOM_PERFORMANCE_HINT_SESSION_REPORTED: AtomId
ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED: AtomId
ATOM_BIOMETRIC_TOUCH_REPORTED: AtomId
ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED: AtomId
ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED: AtomId
ATOM_LOCATION_ENABLED_STATE_CHANGED: AtomId
ATOM_IME_REQUEST_FINISHED: AtomId
ATOM_USB_COMPLIANCE_WARNINGS_REPORTED: AtomId
ATOM_APP_SUPPORTED_LOCALES_CHANGED: AtomId
ATOM_GRAMMATICAL_INFLECTION_CHANGED: AtomId
ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED: AtomId
ATOM_BIOMETRIC_PROPERTIES_COLLECTED: AtomId
ATOM_KERNEL_WAKEUP_ATTRIBUTED: AtomId
ATOM_SCREEN_STATE_CHANGED_V2: AtomId
ATOM_WS_BACKUP_ACTION_REPORTED: AtomId
ATOM_WS_RESTORE_ACTION_REPORTED: AtomId
ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED: AtomId
ATOM_MEDIA_SESSION_UPDATED: AtomId
ATOM_WEAR_OOBE_STATE_CHANGED: AtomId
ATOM_WS_NOTIFICATION_UPDATED: AtomId
ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED: AtomId
ATOM_WS_COMPLICATION_TAPPED: AtomId
ATOM_WS_WEAR_TIME_SESSION: AtomId
ATOM_WIFI_BYTES_TRANSFER: AtomId
ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG: AtomId
ATOM_MOBILE_BYTES_TRANSFER: AtomId
ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG: AtomId
ATOM_BLUETOOTH_BYTES_TRANSFER: AtomId
ATOM_KERNEL_WAKELOCK: AtomId
ATOM_SUBSYSTEM_SLEEP_STATE: AtomId
ATOM_CPU_TIME_PER_UID: AtomId
ATOM_CPU_TIME_PER_UID_FREQ: AtomId
ATOM_WIFI_ACTIVITY_INFO: AtomId
ATOM_MODEM_ACTIVITY_INFO: AtomId
ATOM_BLUETOOTH_ACTIVITY_INFO: AtomId
ATOM_PROCESS_MEMORY_STATE: AtomId
ATOM_SYSTEM_ELAPSED_REALTIME: AtomId
ATOM_SYSTEM_UPTIME: AtomId
ATOM_CPU_ACTIVE_TIME: AtomId
ATOM_CPU_CLUSTER_TIME: AtomId
ATOM_DISK_SPACE: AtomId
ATOM_REMAINING_BATTERY_CAPACITY: AtomId
ATOM_FULL_BATTERY_CAPACITY: AtomId
ATOM_TEMPERATURE: AtomId
ATOM_BINDER_CALLS: AtomId
ATOM_BINDER_CALLS_EXCEPTIONS: AtomId
ATOM_LOOPER_STATS: AtomId
ATOM_DISK_STATS: AtomId
ATOM_DIRECTORY_USAGE: AtomId
ATOM_APP_SIZE: AtomId
ATOM_CATEGORY_SIZE: AtomId
ATOM_PROC_STATS: AtomId
ATOM_BATTERY_VOLTAGE: AtomId
ATOM_NUM_FINGERPRINTS_ENROLLED: AtomId
ATOM_DISK_IO: AtomId
ATOM_POWER_PROFILE: AtomId
ATOM_PROC_STATS_PKG_PROC: AtomId
ATOM_PROCESS_CPU_TIME: AtomId
ATOM_CPU_TIME_PER_THREAD_FREQ: AtomId
ATOM_ON_DEVICE_POWER_MEASUREMENT: AtomId
ATOM_DEVICE_CALCULATED_POWER_USE: AtomId
ATOM_PROCESS_MEMORY_HIGH_WATER_MARK: AtomId
ATOM_BATTERY_LEVEL: AtomId
ATOM_BUILD_INFORMATION: AtomId
ATOM_BATTERY_CYCLE_COUNT: AtomId
ATOM_DEBUG_ELAPSED_CLOCK: AtomId
ATOM_DEBUG_FAILING_ELAPSED_CLOCK: AtomId
ATOM_NUM_FACES_ENROLLED: AtomId
ATOM_ROLE_HOLDER: AtomId
ATOM_DANGEROUS_PERMISSION_STATE: AtomId
ATOM_TRAIN_INFO: AtomId
ATOM_TIME_ZONE_DATA_INFO: AtomId
ATOM_EXTERNAL_STORAGE_INFO: AtomId
ATOM_GPU_STATS_GLOBAL_INFO: AtomId
ATOM_GPU_STATS_APP_INFO: AtomId
ATOM_SYSTEM_ION_HEAP_SIZE: AtomId
ATOM_APPS_ON_EXTERNAL_STORAGE_INFO: AtomId
ATOM_FACE_SETTINGS: AtomId
ATOM_COOLING_DEVICE: AtomId
ATOM_APP_OPS: AtomId
ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE: AtomId
ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO: AtomId
ATOM_SURFACEFLINGER_STATS_LAYER_INFO: AtomId
ATOM_PROCESS_MEMORY_SNAPSHOT: AtomId
ATOM_VMS_CLIENT_STATS: AtomId
ATOM_NOTIFICATION_REMOTE_VIEWS: AtomId
ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED: AtomId
ATOM_GRAPHICS_STATS: AtomId
ATOM_RUNTIME_APP_OP_ACCESS: AtomId
ATOM_ION_HEAP_SIZE: AtomId
ATOM_PACKAGE_NOTIFICATION_PREFERENCES: AtomId
ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES: AtomId
ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES: AtomId
ATOM_GNSS_STATS: AtomId
ATOM_ATTRIBUTED_APP_OPS: AtomId
ATOM_VOICE_CALL_SESSION: AtomId
ATOM_VOICE_CALL_RAT_USAGE: AtomId
ATOM_SIM_SLOT_STATE: AtomId
ATOM_SUPPORTED_RADIO_ACCESS_FAMILY: AtomId
ATOM_SETTING_SNAPSHOT: AtomId
ATOM_BLOB_INFO: AtomId
ATOM_DATA_USAGE_BYTES_TRANSFER: AtomId
ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED: AtomId
ATOM_DND_MODE_RULE: AtomId
ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS: AtomId
ATOM_INCOMING_SMS: AtomId
ATOM_OUTGOING_SMS: AtomId
ATOM_CARRIER_ID_TABLE_VERSION: AtomId
ATOM_DATA_CALL_SESSION: AtomId
ATOM_CELLULAR_SERVICE_STATE: AtomId
ATOM_CELLULAR_DATA_SERVICE_SWITCH: AtomId
ATOM_SYSTEM_MEMORY: AtomId
ATOM_IMS_REGISTRATION_TERMINATION: AtomId
ATOM_IMS_REGISTRATION_STATS: AtomId
ATOM_CPU_TIME_PER_CLUSTER_FREQ: AtomId
ATOM_CPU_CYCLES_PER_UID_CLUSTER: AtomId
ATOM_DEVICE_ROTATED_DATA: AtomId
ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER: AtomId
ATOM_MEDIA_DRM_ACTIVITY_INFO: AtomId
ATOM_OEM_MANAGED_BYTES_TRANSFER: AtomId
ATOM_GNSS_POWER_STATS: AtomId
ATOM_TIME_ZONE_DETECTOR_STATE: AtomId
ATOM_KEYSTORE2_STORAGE_STATS: AtomId
ATOM_RKP_POOL_STATS: AtomId
ATOM_PROCESS_DMABUF_MEMORY: AtomId
ATOM_PENDING_ALARM_INFO: AtomId
ATOM_USER_LEVEL_HIBERNATED_APPS: AtomId
ATOM_LAUNCHER_LAYOUT_SNAPSHOT: AtomId
ATOM_GLOBAL_HIBERNATED_APPS: AtomId
ATOM_INPUT_EVENT_LATENCY_SKETCH: AtomId
ATOM_BATTERY_USAGE_STATS_BEFORE_RESET: AtomId
ATOM_BATTERY_USAGE_STATS_SINCE_RESET: AtomId
ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL: AtomId
ATOM_INSTALLED_INCREMENTAL_PACKAGE: AtomId
ATOM_TELEPHONY_NETWORK_REQUESTS: AtomId
ATOM_APP_SEARCH_STORAGE_INFO: AtomId
ATOM_VMSTAT: AtomId
ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO: AtomId
ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO: AtomId
ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO: AtomId
ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW: AtomId
ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO: AtomId
ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO: AtomId
ATOM_RKP_ERROR_STATS: AtomId
ATOM_KEYSTORE2_CRASH_STATS: AtomId
ATOM_VENDOR_APEX_INFO: AtomId
ATOM_ACCESSIBILITY_SHORTCUT_STATS: AtomId
ATOM_ACCESSIBILITY_FLOATING_MENU_STATS: AtomId
ATOM_DATA_USAGE_BYTES_TRANSFER_V2: AtomId
ATOM_MEDIA_CAPABILITIES: AtomId
ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY: AtomId
ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY: AtomId
ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS: AtomId
ATOM_RCS_CLIENT_PROVISIONING_STATS: AtomId
ATOM_RCS_ACS_PROVISIONING_STATS: AtomId
ATOM_SIP_DELEGATE_STATS: AtomId
ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS: AtomId
ATOM_SIP_MESSAGE_RESPONSE: AtomId
ATOM_SIP_TRANSPORT_SESSION: AtomId
ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT: AtomId
ATOM_IMS_DEDICATED_BEARER_EVENT: AtomId
ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS: AtomId
ATOM_UCE_EVENT_STATS: AtomId
ATOM_PRESENCE_NOTIFY_EVENT: AtomId
ATOM_GBA_EVENT: AtomId
ATOM_PER_SIM_STATUS: AtomId
ATOM_GPU_WORK_PER_UID: AtomId
ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE: AtomId
ATOM_SIGNED_PARTITION_INFO: AtomId
ATOM_PINNED_FILE_SIZES_PER_PACKAGE: AtomId
ATOM_PENDING_INTENTS_PER_PACKAGE: AtomId
ATOM_USER_INFO: AtomId
ATOM_TELEPHONY_NETWORK_REQUESTS_V2: AtomId
ATOM_DEVICE_TELEPHONY_PROPERTIES: AtomId
ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS: AtomId
ATOM_SAFETY_STATE: AtomId
ATOM_INCOMING_MMS: AtomId
ATOM_OUTGOING_MMS: AtomId
ATOM_MULTI_USER_INFO: AtomId
ATOM_NETWORK_BPF_MAP_INFO: AtomId
ATOM_OUTGOING_SHORT_CODE_SMS: AtomId
ATOM_CONNECTIVITY_STATE_SAMPLE: AtomId
ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO: AtomId
ATOM_GAME_MODE_INFO: AtomId
ATOM_GAME_MODE_CONFIGURATION: AtomId
ATOM_GAME_MODE_LISTENER: AtomId
ATOM_NETWORK_SLICE_REQUEST_COUNT: AtomId
ATOM_WS_TILE_SNAPSHOT: AtomId
ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT: AtomId
ATOM_PROCESS_STATE: AtomId
ATOM_PROCESS_ASSOCIATION: AtomId
ATOM_ADPF_SYSTEM_COMPONENT_INFO: AtomId
ATOM_NOTIFICATION_MEMORY_USE: AtomId
ATOM_HDR_CAPABILITIES: AtomId
ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT: AtomId
ATOM_WIFI_AWARE_NDP_REPORTED: AtomId
ATOM_WIFI_AWARE_ATTACH_REPORTED: AtomId
ATOM_WIFI_SELF_RECOVERY_TRIGGERED: AtomId
ATOM_SOFT_AP_STARTED: AtomId
ATOM_SOFT_AP_STOPPED: AtomId
ATOM_WIFI_LOCK_RELEASED: AtomId
ATOM_WIFI_LOCK_DEACTIVATED: AtomId
ATOM_WIFI_CONFIG_SAVED: AtomId
ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED: AtomId
ATOM_WIFI_AWARE_HAL_API_CALLED: AtomId
ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED: AtomId
ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED: AtomId
ATOM_WIFI_THREAD_TASK_EXECUTED: AtomId
ATOM_WIFI_STATE_CHANGED: AtomId
ATOM_WIFI_AWARE_CAPABILITIES: AtomId
ATOM_WIFI_MODULE_INFO: AtomId
ATOM_SETTINGS_SPA_REPORTED: AtomId
ATOM_EXPRESS_EVENT_REPORTED: AtomId
ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED: AtomId
ATOM_EXPRESS_UID_EVENT_REPORTED: AtomId
ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED: AtomId
ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED: AtomId
ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED: AtomId
ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION: AtomId
ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED: AtomId
ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED: AtomId
ATOM_WS_INCOMING_CALL_ACTION_REPORTED: AtomId
ATOM_WS_CALL_DISCONNECTION_REPORTED: AtomId
ATOM_WS_CALL_DURATION_REPORTED: AtomId
ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED: AtomId
ATOM_WS_CALL_INTERACTION_REPORTED: AtomId
ATOM_FULL_SCREEN_INTENT_LAUNCHED: AtomId
ATOM_BAL_ALLOWED: AtomId
ATOM_IN_TASK_ACTIVITY_STARTED: AtomId
ATOM_CACHED_APPS_HIGH_WATERMARK: AtomId
ATOM_ODREFRESH_REPORTED: AtomId
ATOM_ODSIGN_REPORTED: AtomId
ATOM_ART_DATUM_REPORTED: AtomId
ATOM_ART_DEVICE_DATUM_REPORTED: AtomId
ATOM_ART_DATUM_DELTA_REPORTED: AtomId
ATOM_BACKGROUND_DEXOPT_JOB_ENDED: AtomId
ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED: AtomId
ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED: AtomId
ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED: AtomId
ATOM_EMERGENCY_STATE_CHANGED: AtomId
ATOM_DND_STATE_CHANGED: AtomId
ATOM_MTE_STATE: AtomId
ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED: AtomId
ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED: AtomId
ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS: AtomId
ATOM_AD_SERVICES_ERROR_REPORTED: AtomId
ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED: AtomId
ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION: AtomId
ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION: AtomId
ATOM_AD_SERVICES_MEASUREMENT_JOBS: AtomId
ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT: AtomId
ATOM_AD_SERVICES_CONSENT_MIGRATED: AtomId
ATOM_RKPD_POOL_STATS: AtomId
ATOM_RKPD_CLIENT_OPERATION: AtomId
ATOM_AUTOFILL_UI_EVENT_REPORTED: AtomId
ATOM_AUTOFILL_FILL_REQUEST_REPORTED: AtomId
ATOM_AUTOFILL_FILL_RESPONSE_REPORTED: AtomId
ATOM_AUTOFILL_SAVE_EVENT_REPORTED: AtomId
ATOM_AUTOFILL_SESSION_COMMITTED: AtomId
ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED: AtomId
ATOM_TEST_EXTENSION_ATOM_REPORTED: AtomId
ATOM_TEST_RESTRICTED_ATOM_REPORTED: AtomId
ATOM_STATS_SOCKET_LOSS_REPORTED: AtomId
ATOM_PLUGIN_INITIALIZED: AtomId
ATOM_TV_LOW_POWER_STANDBY_POLICY: AtomId
ATOM_LOCKSCREEN_SHORTCUT_SELECTED: AtomId
ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED: AtomId
ATOM_EMERGENCY_NUMBERS_INFO: AtomId
ATOM_QUALIFIED_RAT_LIST_CHANGED: AtomId
ATOM_QNS_IMS_CALL_DROP_STATS: AtomId
ATOM_QNS_FALLBACK_RESTRICTION_CHANGED: AtomId
ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO: AtomId
ATOM_QNS_HANDOVER_TIME_MILLIS: AtomId
ATOM_QNS_HANDOVER_PINGPONG: AtomId
ATOM_SATELLITE_CONTROLLER: AtomId
ATOM_SATELLITE_SESSION: AtomId
ATOM_SATELLITE_INCOMING_DATAGRAM: AtomId
ATOM_SATELLITE_OUTGOING_DATAGRAM: AtomId
ATOM_SATELLITE_PROVISION: AtomId
ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER: AtomId
ATOM_IKE_SESSION_TERMINATED: AtomId
ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED: AtomId
ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED: AtomId
ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION: AtomId
ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION: AtomId
ATOM_BLUETOOTH_LE_SESSION_CONNECTED: AtomId
ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED: AtomId
ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED: AtomId
ATOM_HEALTH_CONNECT_UI_IMPRESSION: AtomId
ATOM_HEALTH_CONNECT_UI_INTERACTION: AtomId
ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED: AtomId
ATOM_HEALTH_CONNECT_API_CALLED: AtomId
ATOM_HEALTH_CONNECT_USAGE_STATS: AtomId
ATOM_HEALTH_CONNECT_STORAGE_STATS: AtomId
ATOM_HEALTH_CONNECT_API_INVOKED: AtomId
ATOM_EXERCISE_ROUTE_API_CALLED: AtomId
ATOM_ATOM_9999: AtomId
ATOM_ATOM_99999: AtomId
ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED: AtomId
ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED: AtomId
ATOM_THREADNETWORK_DEVICE_INFO_REPORTED: AtomId
ATOM_EMERGENCY_NUMBER_DIALED: AtomId
ATOM_SANDBOX_API_CALLED: AtomId
ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED: AtomId
ATOM_SANDBOX_SDK_STORAGE: AtomId
ATOM_CRONET_ENGINE_CREATED: AtomId
ATOM_CRONET_TRAFFIC_REPORTED: AtomId
ATOM_CRONET_ENGINE_BUILDER_INITIALIZED: AtomId
ATOM_CRONET_HTTP_FLAGS_INITIALIZED: AtomId
ATOM_CRONET_INITIALIZED: AtomId
ATOM_DAILY_KEEPALIVE_INFO_REPORTED: AtomId
ATOM_IP_CLIENT_RA_INFO_REPORTED: AtomId
ATOM_APF_SESSION_INFO_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_API_CALLED: AtomId
ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_GET_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED: AtomId
ATOM_CREDENTIAL_MANAGER_APIV2_CALLED: AtomId
ATOM_UWB_ACTIVITY_INFO: AtomId
ATOM_MEDIA_ACTION_REPORTED: AtomId
ATOM_MEDIA_CONTROLS_LAUNCHED: AtomId
ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED: AtomId
ATOM_MEDIA_CODEC_STARTED: AtomId
ATOM_MEDIA_CODEC_STOPPED: AtomId
ATOM_MEDIA_CODEC_RENDERED: AtomId
MEMINFO_UNSPECIFIED: MeminfoCounters
MEMINFO_MEM_TOTAL: MeminfoCounters
MEMINFO_MEM_FREE: MeminfoCounters
MEMINFO_MEM_AVAILABLE: MeminfoCounters
MEMINFO_BUFFERS: MeminfoCounters
MEMINFO_CACHED: MeminfoCounters
MEMINFO_SWAP_CACHED: MeminfoCounters
MEMINFO_ACTIVE: MeminfoCounters
MEMINFO_INACTIVE: MeminfoCounters
MEMINFO_ACTIVE_ANON: MeminfoCounters
MEMINFO_INACTIVE_ANON: MeminfoCounters
MEMINFO_ACTIVE_FILE: MeminfoCounters
MEMINFO_INACTIVE_FILE: MeminfoCounters
MEMINFO_UNEVICTABLE: MeminfoCounters
MEMINFO_MLOCKED: MeminfoCounters
MEMINFO_SWAP_TOTAL: MeminfoCounters
MEMINFO_SWAP_FREE: MeminfoCounters
MEMINFO_DIRTY: MeminfoCounters
MEMINFO_WRITEBACK: MeminfoCounters
MEMINFO_ANON_PAGES: MeminfoCounters
MEMINFO_MAPPED: MeminfoCounters
MEMINFO_SHMEM: MeminfoCounters
MEMINFO_SLAB: MeminfoCounters
MEMINFO_SLAB_RECLAIMABLE: MeminfoCounters
MEMINFO_SLAB_UNRECLAIMABLE: MeminfoCounters
MEMINFO_KERNEL_STACK: MeminfoCounters
MEMINFO_PAGE_TABLES: MeminfoCounters
MEMINFO_COMMIT_LIMIT: MeminfoCounters
MEMINFO_COMMITED_AS: MeminfoCounters
MEMINFO_VMALLOC_TOTAL: MeminfoCounters
MEMINFO_VMALLOC_USED: MeminfoCounters
MEMINFO_VMALLOC_CHUNK: MeminfoCounters
MEMINFO_CMA_TOTAL: MeminfoCounters
MEMINFO_CMA_FREE: MeminfoCounters
VMSTAT_UNSPECIFIED: VmstatCounters
VMSTAT_NR_FREE_PAGES: VmstatCounters
VMSTAT_NR_ALLOC_BATCH: VmstatCounters
VMSTAT_NR_INACTIVE_ANON: VmstatCounters
VMSTAT_NR_ACTIVE_ANON: VmstatCounters
VMSTAT_NR_INACTIVE_FILE: VmstatCounters
VMSTAT_NR_ACTIVE_FILE: VmstatCounters
VMSTAT_NR_UNEVICTABLE: VmstatCounters
VMSTAT_NR_MLOCK: VmstatCounters
VMSTAT_NR_ANON_PAGES: VmstatCounters
VMSTAT_NR_MAPPED: VmstatCounters
VMSTAT_NR_FILE_PAGES: VmstatCounters
VMSTAT_NR_DIRTY: VmstatCounters
VMSTAT_NR_WRITEBACK: VmstatCounters
VMSTAT_NR_SLAB_RECLAIMABLE: VmstatCounters
VMSTAT_NR_SLAB_UNRECLAIMABLE: VmstatCounters
VMSTAT_NR_PAGE_TABLE_PAGES: VmstatCounters
VMSTAT_NR_KERNEL_STACK: VmstatCounters
VMSTAT_NR_OVERHEAD: VmstatCounters
VMSTAT_NR_UNSTABLE: VmstatCounters
VMSTAT_NR_BOUNCE: VmstatCounters
VMSTAT_NR_VMSCAN_WRITE: VmstatCounters
VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM: VmstatCounters
VMSTAT_NR_WRITEBACK_TEMP: VmstatCounters
VMSTAT_NR_ISOLATED_ANON: VmstatCounters
VMSTAT_NR_ISOLATED_FILE: VmstatCounters
VMSTAT_NR_SHMEM: VmstatCounters
VMSTAT_NR_DIRTIED: VmstatCounters
VMSTAT_NR_WRITTEN: VmstatCounters
VMSTAT_NR_PAGES_SCANNED: VmstatCounters
VMSTAT_WORKINGSET_REFAULT: VmstatCounters
VMSTAT_WORKINGSET_ACTIVATE: VmstatCounters
VMSTAT_WORKINGSET_NODERECLAIM: VmstatCounters
VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES: VmstatCounters
VMSTAT_NR_FREE_CMA: VmstatCounters
VMSTAT_NR_SWAPCACHE: VmstatCounters
VMSTAT_NR_DIRTY_THRESHOLD: VmstatCounters
VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD: VmstatCounters
VMSTAT_PGPGIN: VmstatCounters
VMSTAT_PGPGOUT: VmstatCounters
VMSTAT_PGPGOUTCLEAN: VmstatCounters
VMSTAT_PSWPIN: VmstatCounters
VMSTAT_PSWPOUT: VmstatCounters
VMSTAT_PGALLOC_DMA: VmstatCounters
VMSTAT_PGALLOC_NORMAL: VmstatCounters
VMSTAT_PGALLOC_MOVABLE: VmstatCounters
VMSTAT_PGFREE: VmstatCounters
VMSTAT_PGACTIVATE: VmstatCounters
VMSTAT_PGDEACTIVATE: VmstatCounters
VMSTAT_PGFAULT: VmstatCounters
VMSTAT_PGMAJFAULT: VmstatCounters
VMSTAT_PGREFILL_DMA: VmstatCounters
VMSTAT_PGREFILL_NORMAL: VmstatCounters
VMSTAT_PGREFILL_MOVABLE: VmstatCounters
VMSTAT_PGSTEAL_KSWAPD_DMA: VmstatCounters
VMSTAT_PGSTEAL_KSWAPD_NORMAL: VmstatCounters
VMSTAT_PGSTEAL_KSWAPD_MOVABLE: VmstatCounters
VMSTAT_PGSTEAL_DIRECT_DMA: VmstatCounters
VMSTAT_PGSTEAL_DIRECT_NORMAL: VmstatCounters
VMSTAT_PGSTEAL_DIRECT_MOVABLE: VmstatCounters
VMSTAT_PGSCAN_KSWAPD_DMA: VmstatCounters
VMSTAT_PGSCAN_KSWAPD_NORMAL: VmstatCounters
VMSTAT_PGSCAN_KSWAPD_MOVABLE: VmstatCounters
VMSTAT_PGSCAN_DIRECT_DMA: VmstatCounters
VMSTAT_PGSCAN_DIRECT_NORMAL: VmstatCounters
VMSTAT_PGSCAN_DIRECT_MOVABLE: VmstatCounters
VMSTAT_PGSCAN_DIRECT_THROTTLE: VmstatCounters
VMSTAT_PGINODESTEAL: VmstatCounters
VMSTAT_SLABS_SCANNED: VmstatCounters
VMSTAT_KSWAPD_INODESTEAL: VmstatCounters
VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY: VmstatCounters
VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY: VmstatCounters
VMSTAT_PAGEOUTRUN: VmstatCounters
VMSTAT_ALLOCSTALL: VmstatCounters
VMSTAT_PGROTATED: VmstatCounters
VMSTAT_DROP_PAGECACHE: VmstatCounters
VMSTAT_DROP_SLAB: VmstatCounters
VMSTAT_PGMIGRATE_SUCCESS: VmstatCounters
VMSTAT_PGMIGRATE_FAIL: VmstatCounters
VMSTAT_COMPACT_MIGRATE_SCANNED: VmstatCounters
VMSTAT_COMPACT_FREE_SCANNED: VmstatCounters
VMSTAT_COMPACT_ISOLATED: VmstatCounters
VMSTAT_COMPACT_STALL: VmstatCounters
VMSTAT_COMPACT_FAIL: VmstatCounters
VMSTAT_COMPACT_SUCCESS: VmstatCounters
VMSTAT_COMPACT_DAEMON_WAKE: VmstatCounters
VMSTAT_UNEVICTABLE_PGS_CULLED: VmstatCounters
VMSTAT_UNEVICTABLE_PGS_SCANNED: VmstatCounters
VMSTAT_UNEVICTABLE_PGS_RESCUED: VmstatCounters
VMSTAT_UNEVICTABLE_PGS_MLOCKED: VmstatCounters
VMSTAT_UNEVICTABLE_PGS_MUNLOCKED: VmstatCounters
VMSTAT_UNEVICTABLE_PGS_CLEARED: VmstatCounters
VMSTAT_UNEVICTABLE_PGS_STRANDED: VmstatCounters
VMSTAT_NR_ZSPAGES: VmstatCounters
VMSTAT_NR_ION_HEAP: VmstatCounters
VMSTAT_NR_GPU_HEAP: VmstatCounters
VMSTAT_ALLOCSTALL_DMA: VmstatCounters
VMSTAT_ALLOCSTALL_MOVABLE: VmstatCounters
VMSTAT_ALLOCSTALL_NORMAL: VmstatCounters
VMSTAT_COMPACT_DAEMON_FREE_SCANNED: VmstatCounters
VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED: VmstatCounters
VMSTAT_NR_FASTRPC: VmstatCounters
VMSTAT_NR_INDIRECTLY_RECLAIMABLE: VmstatCounters
VMSTAT_NR_ION_HEAP_POOL: VmstatCounters
VMSTAT_NR_KERNEL_MISC_RECLAIMABLE: VmstatCounters
VMSTAT_NR_SHADOW_CALL_STACK_BYTES: VmstatCounters
VMSTAT_NR_SHMEM_HUGEPAGES: VmstatCounters
VMSTAT_NR_SHMEM_PMDMAPPED: VmstatCounters
VMSTAT_NR_UNRECLAIMABLE_PAGES: VmstatCounters
VMSTAT_NR_ZONE_ACTIVE_ANON: VmstatCounters
VMSTAT_NR_ZONE_ACTIVE_FILE: VmstatCounters
VMSTAT_NR_ZONE_INACTIVE_ANON: VmstatCounters
VMSTAT_NR_ZONE_INACTIVE_FILE: VmstatCounters
VMSTAT_NR_ZONE_UNEVICTABLE: VmstatCounters
VMSTAT_NR_ZONE_WRITE_PENDING: VmstatCounters
VMSTAT_OOM_KILL: VmstatCounters
VMSTAT_PGLAZYFREE: VmstatCounters
VMSTAT_PGLAZYFREED: VmstatCounters
VMSTAT_PGREFILL: VmstatCounters
VMSTAT_PGSCAN_DIRECT: VmstatCounters
VMSTAT_PGSCAN_KSWAPD: VmstatCounters
VMSTAT_PGSKIP_DMA: VmstatCounters
VMSTAT_PGSKIP_MOVABLE: VmstatCounters
VMSTAT_PGSKIP_NORMAL: VmstatCounters
VMSTAT_PGSTEAL_DIRECT: VmstatCounters
VMSTAT_PGSTEAL_KSWAPD: VmstatCounters
VMSTAT_SWAP_RA: VmstatCounters
VMSTAT_SWAP_RA_HIT: VmstatCounters
VMSTAT_WORKINGSET_RESTORE: VmstatCounters
VMSTAT_ALLOCSTALL_DEVICE: VmstatCounters
VMSTAT_ALLOCSTALL_DMA32: VmstatCounters
VMSTAT_BALLOON_DEFLATE: VmstatCounters
VMSTAT_BALLOON_INFLATE: VmstatCounters
VMSTAT_BALLOON_MIGRATE: VmstatCounters
VMSTAT_CMA_ALLOC_FAIL: VmstatCounters
VMSTAT_CMA_ALLOC_SUCCESS: VmstatCounters
VMSTAT_NR_FILE_HUGEPAGES: VmstatCounters
VMSTAT_NR_FILE_PMDMAPPED: VmstatCounters
VMSTAT_NR_FOLL_PIN_ACQUIRED: VmstatCounters
VMSTAT_NR_FOLL_PIN_RELEASED: VmstatCounters
VMSTAT_NR_SEC_PAGE_TABLE_PAGES: VmstatCounters
VMSTAT_NR_SHADOW_CALL_STACK: VmstatCounters
VMSTAT_NR_SWAPCACHED: VmstatCounters
VMSTAT_NR_THROTTLED_WRITTEN: VmstatCounters
VMSTAT_PGALLOC_DEVICE: VmstatCounters
VMSTAT_PGALLOC_DMA32: VmstatCounters
VMSTAT_PGDEMOTE_DIRECT: VmstatCounters
VMSTAT_PGDEMOTE_KSWAPD: VmstatCounters
VMSTAT_PGREUSE: VmstatCounters
VMSTAT_PGSCAN_ANON: VmstatCounters
VMSTAT_PGSCAN_FILE: VmstatCounters
VMSTAT_PGSKIP_DEVICE: VmstatCounters
VMSTAT_PGSKIP_DMA32: VmstatCounters
VMSTAT_PGSTEAL_ANON: VmstatCounters
VMSTAT_PGSTEAL_FILE: VmstatCounters
VMSTAT_THP_COLLAPSE_ALLOC: VmstatCounters
VMSTAT_THP_COLLAPSE_ALLOC_FAILED: VmstatCounters
VMSTAT_THP_DEFERRED_SPLIT_PAGE: VmstatCounters
VMSTAT_THP_FAULT_ALLOC: VmstatCounters
VMSTAT_THP_FAULT_FALLBACK: VmstatCounters
VMSTAT_THP_FAULT_FALLBACK_CHARGE: VmstatCounters
VMSTAT_THP_FILE_ALLOC: VmstatCounters
VMSTAT_THP_FILE_FALLBACK: VmstatCounters
VMSTAT_THP_FILE_FALLBACK_CHARGE: VmstatCounters
VMSTAT_THP_FILE_MAPPED: VmstatCounters
VMSTAT_THP_MIGRATION_FAIL: VmstatCounters
VMSTAT_THP_MIGRATION_SPLIT: VmstatCounters
VMSTAT_THP_MIGRATION_SUCCESS: VmstatCounters
VMSTAT_THP_SCAN_EXCEED_NONE_PTE: VmstatCounters
VMSTAT_THP_SCAN_EXCEED_SHARE_PTE: VmstatCounters
VMSTAT_THP_SCAN_EXCEED_SWAP_PTE: VmstatCounters
VMSTAT_THP_SPLIT_PAGE: VmstatCounters
VMSTAT_THP_SPLIT_PAGE_FAILED: VmstatCounters
VMSTAT_THP_SPLIT_PMD: VmstatCounters
VMSTAT_THP_SWPOUT: VmstatCounters
VMSTAT_THP_SWPOUT_FALLBACK: VmstatCounters
VMSTAT_THP_ZERO_PAGE_ALLOC: VmstatCounters
VMSTAT_THP_ZERO_PAGE_ALLOC_FAILED: VmstatCounters
VMSTAT_VMA_LOCK_ABORT: VmstatCounters
VMSTAT_VMA_LOCK_MISS: VmstatCounters
VMSTAT_VMA_LOCK_RETRY: VmstatCounters
VMSTAT_VMA_LOCK_SUCCESS: VmstatCounters
VMSTAT_WORKINGSET_ACTIVATE_ANON: VmstatCounters
VMSTAT_WORKINGSET_ACTIVATE_FILE: VmstatCounters
VMSTAT_WORKINGSET_NODES: VmstatCounters
VMSTAT_WORKINGSET_REFAULT_ANON: VmstatCounters
VMSTAT_WORKINGSET_REFAULT_FILE: VmstatCounters
VMSTAT_WORKINGSET_RESTORE_ANON: VmstatCounters
VMSTAT_WORKINGSET_RESTORE_FILE: VmstatCounters
DIR_UNSPECIFIED: TrafficDirection
DIR_INGRESS: TrafficDirection
DIR_EGRESS: TrafficDirection
HWC_TYPE_UNSPECIFIED: HwcCompositionType
HWC_TYPE_CLIENT: HwcCompositionType
HWC_TYPE_DEVICE: HwcCompositionType
HWC_TYPE_SOLID_COLOR: HwcCompositionType
HWC_TYPE_CURSOR: HwcCompositionType
HWC_TYPE_SIDEBAND: HwcCompositionType
FTRACE_STATUS_UNSPECIFIED: FtraceParseStatus
FTRACE_STATUS_OK: FtraceParseStatus
FTRACE_STATUS_UNEXPECTED_READ_ERROR: FtraceParseStatus
FTRACE_STATUS_PARTIAL_PAGE_READ: FtraceParseStatus
FTRACE_STATUS_ABI_INVALID_PAGE_HEADER: FtraceParseStatus
FTRACE_STATUS_ABI_SHORT_EVENT_HEADER: FtraceParseStatus
FTRACE_STATUS_ABI_NULL_PADDING: FtraceParseStatus
FTRACE_STATUS_ABI_SHORT_PADDING_LENGTH: FtraceParseStatus
FTRACE_STATUS_ABI_INVALID_PADDING_LENGTH: FtraceParseStatus
FTRACE_STATUS_ABI_SHORT_TIME_EXTEND: FtraceParseStatus
FTRACE_STATUS_ABI_SHORT_TIME_STAMP: FtraceParseStatus
FTRACE_STATUS_ABI_SHORT_DATA_LENGTH: FtraceParseStatus
FTRACE_STATUS_ABI_ZERO_DATA_LENGTH: FtraceParseStatus
FTRACE_STATUS_ABI_INVALID_DATA_LENGTH: FtraceParseStatus
FTRACE_STATUS_ABI_SHORT_EVENT_ID: FtraceParseStatus
FTRACE_STATUS_ABI_END_OVERFLOW: FtraceParseStatus
FTRACE_STATUS_SHORT_COMPACT_EVENT: FtraceParseStatus
FTRACE_STATUS_INVALID_EVENT: FtraceParseStatus
FTRACE_CLOCK_UNSPECIFIED: FtraceClock
FTRACE_CLOCK_UNKNOWN: FtraceClock
FTRACE_CLOCK_GLOBAL: FtraceClock
FTRACE_CLOCK_LOCAL: FtraceClock
FTRACE_CLOCK_MONO_RAW: FtraceClock
CC_SCHEDULER_ACTION_UNSPECIFIED: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_NONE: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_COMMIT: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_DRAW_FORCED: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_DRAW_ABORT: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_PREPARE_TILES: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL: ChromeCompositorSchedulerAction
CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON: ChromeCompositorSchedulerAction
RAIL_MODE_NONE: ChromeRAILMode
RAIL_MODE_RESPONSE: ChromeRAILMode
RAIL_MODE_ANIMATION: ChromeRAILMode
RAIL_MODE_IDLE: ChromeRAILMode
RAIL_MODE_LOAD: ChromeRAILMode

class FtraceDescriptor(_message.Message):
    __slots__ = ("atrace_categories",)

    class AtraceCategory(_message.Message):
        __slots__ = ("name", "description")
        NAME_FIELD_NUMBER: _ClassVar[int]
        DESCRIPTION_FIELD_NUMBER: _ClassVar[int]
        name: str
        description: str
        def __init__(self, name: _Optional[str] = ..., description: _Optional[str] = ...) -> None: ...

    ATRACE_CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    atrace_categories: _containers.RepeatedCompositeFieldContainer[FtraceDescriptor.AtraceCategory]
    def __init__(
        self, atrace_categories: _Optional[_Iterable[_Union[FtraceDescriptor.AtraceCategory, _Mapping]]] = ...
    ) -> None: ...

class GpuCounterDescriptor(_message.Message):
    __slots__ = (
        "specs",
        "blocks",
        "min_sampling_period_ns",
        "max_sampling_period_ns",
        "supports_instrumented_sampling",
    )

    class GpuCounterGroup(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNCLASSIFIED: _ClassVar[GpuCounterDescriptor.GpuCounterGroup]
        SYSTEM: _ClassVar[GpuCounterDescriptor.GpuCounterGroup]
        VERTICES: _ClassVar[GpuCounterDescriptor.GpuCounterGroup]
        FRAGMENTS: _ClassVar[GpuCounterDescriptor.GpuCounterGroup]
        PRIMITIVES: _ClassVar[GpuCounterDescriptor.GpuCounterGroup]
        MEMORY: _ClassVar[GpuCounterDescriptor.GpuCounterGroup]
        COMPUTE: _ClassVar[GpuCounterDescriptor.GpuCounterGroup]

    UNCLASSIFIED: GpuCounterDescriptor.GpuCounterGroup
    SYSTEM: GpuCounterDescriptor.GpuCounterGroup
    VERTICES: GpuCounterDescriptor.GpuCounterGroup
    FRAGMENTS: GpuCounterDescriptor.GpuCounterGroup
    PRIMITIVES: GpuCounterDescriptor.GpuCounterGroup
    MEMORY: GpuCounterDescriptor.GpuCounterGroup
    COMPUTE: GpuCounterDescriptor.GpuCounterGroup

    class MeasureUnit(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        NONE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        BIT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        KILOBIT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        MEGABIT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        GIGABIT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        TERABIT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        PETABIT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        BYTE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        KILOBYTE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        MEGABYTE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        GIGABYTE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        TERABYTE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        PETABYTE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        HERTZ: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        KILOHERTZ: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        MEGAHERTZ: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        GIGAHERTZ: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        TERAHERTZ: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        PETAHERTZ: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        NANOSECOND: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        MICROSECOND: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        MILLISECOND: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        SECOND: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        MINUTE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        HOUR: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        VERTEX: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        PIXEL: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        TRIANGLE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        PRIMITIVE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        FRAGMENT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        MILLIWATT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        WATT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        KILOWATT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        JOULE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        VOLT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        AMPERE: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        CELSIUS: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        FAHRENHEIT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        KELVIN: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        PERCENT: _ClassVar[GpuCounterDescriptor.MeasureUnit]
        INSTRUCTION: _ClassVar[GpuCounterDescriptor.MeasureUnit]

    NONE: GpuCounterDescriptor.MeasureUnit
    BIT: GpuCounterDescriptor.MeasureUnit
    KILOBIT: GpuCounterDescriptor.MeasureUnit
    MEGABIT: GpuCounterDescriptor.MeasureUnit
    GIGABIT: GpuCounterDescriptor.MeasureUnit
    TERABIT: GpuCounterDescriptor.MeasureUnit
    PETABIT: GpuCounterDescriptor.MeasureUnit
    BYTE: GpuCounterDescriptor.MeasureUnit
    KILOBYTE: GpuCounterDescriptor.MeasureUnit
    MEGABYTE: GpuCounterDescriptor.MeasureUnit
    GIGABYTE: GpuCounterDescriptor.MeasureUnit
    TERABYTE: GpuCounterDescriptor.MeasureUnit
    PETABYTE: GpuCounterDescriptor.MeasureUnit
    HERTZ: GpuCounterDescriptor.MeasureUnit
    KILOHERTZ: GpuCounterDescriptor.MeasureUnit
    MEGAHERTZ: GpuCounterDescriptor.MeasureUnit
    GIGAHERTZ: GpuCounterDescriptor.MeasureUnit
    TERAHERTZ: GpuCounterDescriptor.MeasureUnit
    PETAHERTZ: GpuCounterDescriptor.MeasureUnit
    NANOSECOND: GpuCounterDescriptor.MeasureUnit
    MICROSECOND: GpuCounterDescriptor.MeasureUnit
    MILLISECOND: GpuCounterDescriptor.MeasureUnit
    SECOND: GpuCounterDescriptor.MeasureUnit
    MINUTE: GpuCounterDescriptor.MeasureUnit
    HOUR: GpuCounterDescriptor.MeasureUnit
    VERTEX: GpuCounterDescriptor.MeasureUnit
    PIXEL: GpuCounterDescriptor.MeasureUnit
    TRIANGLE: GpuCounterDescriptor.MeasureUnit
    PRIMITIVE: GpuCounterDescriptor.MeasureUnit
    FRAGMENT: GpuCounterDescriptor.MeasureUnit
    MILLIWATT: GpuCounterDescriptor.MeasureUnit
    WATT: GpuCounterDescriptor.MeasureUnit
    KILOWATT: GpuCounterDescriptor.MeasureUnit
    JOULE: GpuCounterDescriptor.MeasureUnit
    VOLT: GpuCounterDescriptor.MeasureUnit
    AMPERE: GpuCounterDescriptor.MeasureUnit
    CELSIUS: GpuCounterDescriptor.MeasureUnit
    FAHRENHEIT: GpuCounterDescriptor.MeasureUnit
    KELVIN: GpuCounterDescriptor.MeasureUnit
    PERCENT: GpuCounterDescriptor.MeasureUnit
    INSTRUCTION: GpuCounterDescriptor.MeasureUnit

    class GpuCounterSpec(_message.Message):
        __slots__ = (
            "counter_id",
            "name",
            "description",
            "int_peak_value",
            "double_peak_value",
            "numerator_units",
            "denominator_units",
            "select_by_default",
            "groups",
        )
        COUNTER_ID_FIELD_NUMBER: _ClassVar[int]
        NAME_FIELD_NUMBER: _ClassVar[int]
        DESCRIPTION_FIELD_NUMBER: _ClassVar[int]
        INT_PEAK_VALUE_FIELD_NUMBER: _ClassVar[int]
        DOUBLE_PEAK_VALUE_FIELD_NUMBER: _ClassVar[int]
        NUMERATOR_UNITS_FIELD_NUMBER: _ClassVar[int]
        DENOMINATOR_UNITS_FIELD_NUMBER: _ClassVar[int]
        SELECT_BY_DEFAULT_FIELD_NUMBER: _ClassVar[int]
        GROUPS_FIELD_NUMBER: _ClassVar[int]
        counter_id: int
        name: str
        description: str
        int_peak_value: int
        double_peak_value: float
        numerator_units: _containers.RepeatedScalarFieldContainer[GpuCounterDescriptor.MeasureUnit]
        denominator_units: _containers.RepeatedScalarFieldContainer[GpuCounterDescriptor.MeasureUnit]
        select_by_default: bool
        groups: _containers.RepeatedScalarFieldContainer[GpuCounterDescriptor.GpuCounterGroup]
        def __init__(
            self,
            counter_id: _Optional[int] = ...,
            name: _Optional[str] = ...,
            description: _Optional[str] = ...,
            int_peak_value: _Optional[int] = ...,
            double_peak_value: _Optional[float] = ...,
            numerator_units: _Optional[_Iterable[_Union[GpuCounterDescriptor.MeasureUnit, str]]] = ...,
            denominator_units: _Optional[_Iterable[_Union[GpuCounterDescriptor.MeasureUnit, str]]] = ...,
            select_by_default: bool = ...,
            groups: _Optional[_Iterable[_Union[GpuCounterDescriptor.GpuCounterGroup, str]]] = ...,
        ) -> None: ...

    class GpuCounterBlock(_message.Message):
        __slots__ = ("block_id", "block_capacity", "name", "description", "counter_ids")
        BLOCK_ID_FIELD_NUMBER: _ClassVar[int]
        BLOCK_CAPACITY_FIELD_NUMBER: _ClassVar[int]
        NAME_FIELD_NUMBER: _ClassVar[int]
        DESCRIPTION_FIELD_NUMBER: _ClassVar[int]
        COUNTER_IDS_FIELD_NUMBER: _ClassVar[int]
        block_id: int
        block_capacity: int
        name: str
        description: str
        counter_ids: _containers.RepeatedScalarFieldContainer[int]
        def __init__(
            self,
            block_id: _Optional[int] = ...,
            block_capacity: _Optional[int] = ...,
            name: _Optional[str] = ...,
            description: _Optional[str] = ...,
            counter_ids: _Optional[_Iterable[int]] = ...,
        ) -> None: ...

    SPECS_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    MIN_SAMPLING_PERIOD_NS_FIELD_NUMBER: _ClassVar[int]
    MAX_SAMPLING_PERIOD_NS_FIELD_NUMBER: _ClassVar[int]
    SUPPORTS_INSTRUMENTED_SAMPLING_FIELD_NUMBER: _ClassVar[int]
    specs: _containers.RepeatedCompositeFieldContainer[GpuCounterDescriptor.GpuCounterSpec]
    blocks: _containers.RepeatedCompositeFieldContainer[GpuCounterDescriptor.GpuCounterBlock]
    min_sampling_period_ns: int
    max_sampling_period_ns: int
    supports_instrumented_sampling: bool
    def __init__(
        self,
        specs: _Optional[_Iterable[_Union[GpuCounterDescriptor.GpuCounterSpec, _Mapping]]] = ...,
        blocks: _Optional[_Iterable[_Union[GpuCounterDescriptor.GpuCounterBlock, _Mapping]]] = ...,
        min_sampling_period_ns: _Optional[int] = ...,
        max_sampling_period_ns: _Optional[int] = ...,
        supports_instrumented_sampling: bool = ...,
    ) -> None: ...

class TrackEventCategory(_message.Message):
    __slots__ = ("name", "description", "tags")
    NAME_FIELD_NUMBER: _ClassVar[int]
    DESCRIPTION_FIELD_NUMBER: _ClassVar[int]
    TAGS_FIELD_NUMBER: _ClassVar[int]
    name: str
    description: str
    tags: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self, name: _Optional[str] = ..., description: _Optional[str] = ..., tags: _Optional[_Iterable[str]] = ...
    ) -> None: ...

class TrackEventDescriptor(_message.Message):
    __slots__ = ("available_categories",)
    AVAILABLE_CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    available_categories: _containers.RepeatedCompositeFieldContainer[TrackEventCategory]
    def __init__(
        self, available_categories: _Optional[_Iterable[_Union[TrackEventCategory, _Mapping]]] = ...
    ) -> None: ...

class DataSourceDescriptor(_message.Message):
    __slots__ = (
        "name",
        "id",
        "will_notify_on_stop",
        "will_notify_on_start",
        "handles_incremental_state_clear",
        "no_flush",
        "gpu_counter_descriptor",
        "track_event_descriptor",
        "ftrace_descriptor",
    )
    NAME_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    WILL_NOTIFY_ON_STOP_FIELD_NUMBER: _ClassVar[int]
    WILL_NOTIFY_ON_START_FIELD_NUMBER: _ClassVar[int]
    HANDLES_INCREMENTAL_STATE_CLEAR_FIELD_NUMBER: _ClassVar[int]
    NO_FLUSH_FIELD_NUMBER: _ClassVar[int]
    GPU_COUNTER_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    TRACK_EVENT_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    FTRACE_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    name: str
    id: int
    will_notify_on_stop: bool
    will_notify_on_start: bool
    handles_incremental_state_clear: bool
    no_flush: bool
    gpu_counter_descriptor: GpuCounterDescriptor
    track_event_descriptor: TrackEventDescriptor
    ftrace_descriptor: FtraceDescriptor
    def __init__(
        self,
        name: _Optional[str] = ...,
        id: _Optional[int] = ...,
        will_notify_on_stop: bool = ...,
        will_notify_on_start: bool = ...,
        handles_incremental_state_clear: bool = ...,
        no_flush: bool = ...,
        gpu_counter_descriptor: _Optional[_Union[GpuCounterDescriptor, _Mapping]] = ...,
        track_event_descriptor: _Optional[_Union[TrackEventDescriptor, _Mapping]] = ...,
        ftrace_descriptor: _Optional[_Union[FtraceDescriptor, _Mapping]] = ...,
    ) -> None: ...

class TracingServiceState(_message.Message):
    __slots__ = (
        "producers",
        "data_sources",
        "tracing_sessions",
        "supports_tracing_sessions",
        "num_sessions",
        "num_sessions_started",
        "tracing_service_version",
    )

    class Producer(_message.Message):
        __slots__ = ("id", "name", "pid", "uid", "sdk_version")
        ID_FIELD_NUMBER: _ClassVar[int]
        NAME_FIELD_NUMBER: _ClassVar[int]
        PID_FIELD_NUMBER: _ClassVar[int]
        UID_FIELD_NUMBER: _ClassVar[int]
        SDK_VERSION_FIELD_NUMBER: _ClassVar[int]
        id: int
        name: str
        pid: int
        uid: int
        sdk_version: str
        def __init__(
            self,
            id: _Optional[int] = ...,
            name: _Optional[str] = ...,
            pid: _Optional[int] = ...,
            uid: _Optional[int] = ...,
            sdk_version: _Optional[str] = ...,
        ) -> None: ...

    class DataSource(_message.Message):
        __slots__ = ("ds_descriptor", "producer_id")
        DS_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
        PRODUCER_ID_FIELD_NUMBER: _ClassVar[int]
        ds_descriptor: DataSourceDescriptor
        producer_id: int
        def __init__(
            self,
            ds_descriptor: _Optional[_Union[DataSourceDescriptor, _Mapping]] = ...,
            producer_id: _Optional[int] = ...,
        ) -> None: ...

    class TracingSession(_message.Message):
        __slots__ = (
            "id",
            "consumer_uid",
            "state",
            "unique_session_name",
            "buffer_size_kb",
            "duration_ms",
            "num_data_sources",
            "start_realtime_ns",
            "bugreport_score",
            "bugreport_filename",
            "is_started",
        )
        ID_FIELD_NUMBER: _ClassVar[int]
        CONSUMER_UID_FIELD_NUMBER: _ClassVar[int]
        STATE_FIELD_NUMBER: _ClassVar[int]
        UNIQUE_SESSION_NAME_FIELD_NUMBER: _ClassVar[int]
        BUFFER_SIZE_KB_FIELD_NUMBER: _ClassVar[int]
        DURATION_MS_FIELD_NUMBER: _ClassVar[int]
        NUM_DATA_SOURCES_FIELD_NUMBER: _ClassVar[int]
        START_REALTIME_NS_FIELD_NUMBER: _ClassVar[int]
        BUGREPORT_SCORE_FIELD_NUMBER: _ClassVar[int]
        BUGREPORT_FILENAME_FIELD_NUMBER: _ClassVar[int]
        IS_STARTED_FIELD_NUMBER: _ClassVar[int]
        id: int
        consumer_uid: int
        state: str
        unique_session_name: str
        buffer_size_kb: _containers.RepeatedScalarFieldContainer[int]
        duration_ms: int
        num_data_sources: int
        start_realtime_ns: int
        bugreport_score: int
        bugreport_filename: str
        is_started: bool
        def __init__(
            self,
            id: _Optional[int] = ...,
            consumer_uid: _Optional[int] = ...,
            state: _Optional[str] = ...,
            unique_session_name: _Optional[str] = ...,
            buffer_size_kb: _Optional[_Iterable[int]] = ...,
            duration_ms: _Optional[int] = ...,
            num_data_sources: _Optional[int] = ...,
            start_realtime_ns: _Optional[int] = ...,
            bugreport_score: _Optional[int] = ...,
            bugreport_filename: _Optional[str] = ...,
            is_started: bool = ...,
        ) -> None: ...

    PRODUCERS_FIELD_NUMBER: _ClassVar[int]
    DATA_SOURCES_FIELD_NUMBER: _ClassVar[int]
    TRACING_SESSIONS_FIELD_NUMBER: _ClassVar[int]
    SUPPORTS_TRACING_SESSIONS_FIELD_NUMBER: _ClassVar[int]
    NUM_SESSIONS_FIELD_NUMBER: _ClassVar[int]
    NUM_SESSIONS_STARTED_FIELD_NUMBER: _ClassVar[int]
    TRACING_SERVICE_VERSION_FIELD_NUMBER: _ClassVar[int]
    producers: _containers.RepeatedCompositeFieldContainer[TracingServiceState.Producer]
    data_sources: _containers.RepeatedCompositeFieldContainer[TracingServiceState.DataSource]
    tracing_sessions: _containers.RepeatedCompositeFieldContainer[TracingServiceState.TracingSession]
    supports_tracing_sessions: bool
    num_sessions: int
    num_sessions_started: int
    tracing_service_version: str
    def __init__(
        self,
        producers: _Optional[_Iterable[_Union[TracingServiceState.Producer, _Mapping]]] = ...,
        data_sources: _Optional[_Iterable[_Union[TracingServiceState.DataSource, _Mapping]]] = ...,
        tracing_sessions: _Optional[_Iterable[_Union[TracingServiceState.TracingSession, _Mapping]]] = ...,
        supports_tracing_sessions: bool = ...,
        num_sessions: _Optional[int] = ...,
        num_sessions_started: _Optional[int] = ...,
        tracing_service_version: _Optional[str] = ...,
    ) -> None: ...

class AndroidGameInterventionListConfig(_message.Message):
    __slots__ = ("package_name_filter",)
    PACKAGE_NAME_FILTER_FIELD_NUMBER: _ClassVar[int]
    package_name_filter: _containers.RepeatedScalarFieldContainer[str]
    def __init__(self, package_name_filter: _Optional[_Iterable[str]] = ...) -> None: ...

class AndroidLogConfig(_message.Message):
    __slots__ = ("log_ids", "min_prio", "filter_tags")
    LOG_IDS_FIELD_NUMBER: _ClassVar[int]
    MIN_PRIO_FIELD_NUMBER: _ClassVar[int]
    FILTER_TAGS_FIELD_NUMBER: _ClassVar[int]
    log_ids: _containers.RepeatedScalarFieldContainer[AndroidLogId]
    min_prio: AndroidLogPriority
    filter_tags: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        log_ids: _Optional[_Iterable[_Union[AndroidLogId, str]]] = ...,
        min_prio: _Optional[_Union[AndroidLogPriority, str]] = ...,
        filter_tags: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class AndroidPolledStateConfig(_message.Message):
    __slots__ = ("poll_ms",)
    POLL_MS_FIELD_NUMBER: _ClassVar[int]
    poll_ms: int
    def __init__(self, poll_ms: _Optional[int] = ...) -> None: ...

class AndroidSdkSyspropGuardConfig(_message.Message):
    __slots__ = ("surfaceflinger_skia_track_events", "hwui_skia_track_events", "hwui_package_name_filter")
    SURFACEFLINGER_SKIA_TRACK_EVENTS_FIELD_NUMBER: _ClassVar[int]
    HWUI_SKIA_TRACK_EVENTS_FIELD_NUMBER: _ClassVar[int]
    HWUI_PACKAGE_NAME_FILTER_FIELD_NUMBER: _ClassVar[int]
    surfaceflinger_skia_track_events: bool
    hwui_skia_track_events: bool
    hwui_package_name_filter: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        surfaceflinger_skia_track_events: bool = ...,
        hwui_skia_track_events: bool = ...,
        hwui_package_name_filter: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class AndroidSystemPropertyConfig(_message.Message):
    __slots__ = ("poll_ms", "property_name")
    POLL_MS_FIELD_NUMBER: _ClassVar[int]
    PROPERTY_NAME_FIELD_NUMBER: _ClassVar[int]
    poll_ms: int
    property_name: _containers.RepeatedScalarFieldContainer[str]
    def __init__(self, poll_ms: _Optional[int] = ..., property_name: _Optional[_Iterable[str]] = ...) -> None: ...

class NetworkPacketTraceConfig(_message.Message):
    __slots__ = (
        "poll_ms",
        "aggregation_threshold",
        "intern_limit",
        "drop_local_port",
        "drop_remote_port",
        "drop_tcp_flags",
    )
    POLL_MS_FIELD_NUMBER: _ClassVar[int]
    AGGREGATION_THRESHOLD_FIELD_NUMBER: _ClassVar[int]
    INTERN_LIMIT_FIELD_NUMBER: _ClassVar[int]
    DROP_LOCAL_PORT_FIELD_NUMBER: _ClassVar[int]
    DROP_REMOTE_PORT_FIELD_NUMBER: _ClassVar[int]
    DROP_TCP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    poll_ms: int
    aggregation_threshold: int
    intern_limit: int
    drop_local_port: bool
    drop_remote_port: bool
    drop_tcp_flags: bool
    def __init__(
        self,
        poll_ms: _Optional[int] = ...,
        aggregation_threshold: _Optional[int] = ...,
        intern_limit: _Optional[int] = ...,
        drop_local_port: bool = ...,
        drop_remote_port: bool = ...,
        drop_tcp_flags: bool = ...,
    ) -> None: ...

class PackagesListConfig(_message.Message):
    __slots__ = ("package_name_filter",)
    PACKAGE_NAME_FILTER_FIELD_NUMBER: _ClassVar[int]
    package_name_filter: _containers.RepeatedScalarFieldContainer[str]
    def __init__(self, package_name_filter: _Optional[_Iterable[str]] = ...) -> None: ...

class ProtoLogConfig(_message.Message):
    __slots__ = ("group_overrides", "tracing_mode")

    class TracingMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        DEFAULT: _ClassVar[ProtoLogConfig.TracingMode]
        ENABLE_ALL: _ClassVar[ProtoLogConfig.TracingMode]

    DEFAULT: ProtoLogConfig.TracingMode
    ENABLE_ALL: ProtoLogConfig.TracingMode
    GROUP_OVERRIDES_FIELD_NUMBER: _ClassVar[int]
    TRACING_MODE_FIELD_NUMBER: _ClassVar[int]
    group_overrides: _containers.RepeatedCompositeFieldContainer[ProtoLogGroup]
    tracing_mode: ProtoLogConfig.TracingMode
    def __init__(
        self,
        group_overrides: _Optional[_Iterable[_Union[ProtoLogGroup, _Mapping]]] = ...,
        tracing_mode: _Optional[_Union[ProtoLogConfig.TracingMode, str]] = ...,
    ) -> None: ...

class ProtoLogGroup(_message.Message):
    __slots__ = ("tag", "log_from")
    TAG_FIELD_NUMBER: _ClassVar[int]
    LOG_FROM_FIELD_NUMBER: _ClassVar[int]
    tag: str
    log_from: ProtoLogLevel
    def __init__(self, tag: _Optional[str] = ..., log_from: _Optional[_Union[ProtoLogLevel, str]] = ...) -> None: ...

class SurfaceFlingerLayersConfig(_message.Message):
    __slots__ = ("mode", "trace_flags")

    class Mode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        MODE_UNSPECIFIED: _ClassVar[SurfaceFlingerLayersConfig.Mode]
        MODE_ACTIVE: _ClassVar[SurfaceFlingerLayersConfig.Mode]
        MODE_GENERATED: _ClassVar[SurfaceFlingerLayersConfig.Mode]
        MODE_DUMP: _ClassVar[SurfaceFlingerLayersConfig.Mode]
        MODE_GENERATED_BUGREPORT_ONLY: _ClassVar[SurfaceFlingerLayersConfig.Mode]

    MODE_UNSPECIFIED: SurfaceFlingerLayersConfig.Mode
    MODE_ACTIVE: SurfaceFlingerLayersConfig.Mode
    MODE_GENERATED: SurfaceFlingerLayersConfig.Mode
    MODE_DUMP: SurfaceFlingerLayersConfig.Mode
    MODE_GENERATED_BUGREPORT_ONLY: SurfaceFlingerLayersConfig.Mode

    class TraceFlag(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TRACE_FLAG_UNSPECIFIED: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]
        TRACE_FLAG_INPUT: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]
        TRACE_FLAG_COMPOSITION: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]
        TRACE_FLAG_EXTRA: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]
        TRACE_FLAG_HWC: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]
        TRACE_FLAG_BUFFERS: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]
        TRACE_FLAG_VIRTUAL_DISPLAYS: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]
        TRACE_FLAG_ALL: _ClassVar[SurfaceFlingerLayersConfig.TraceFlag]

    TRACE_FLAG_UNSPECIFIED: SurfaceFlingerLayersConfig.TraceFlag
    TRACE_FLAG_INPUT: SurfaceFlingerLayersConfig.TraceFlag
    TRACE_FLAG_COMPOSITION: SurfaceFlingerLayersConfig.TraceFlag
    TRACE_FLAG_EXTRA: SurfaceFlingerLayersConfig.TraceFlag
    TRACE_FLAG_HWC: SurfaceFlingerLayersConfig.TraceFlag
    TRACE_FLAG_BUFFERS: SurfaceFlingerLayersConfig.TraceFlag
    TRACE_FLAG_VIRTUAL_DISPLAYS: SurfaceFlingerLayersConfig.TraceFlag
    TRACE_FLAG_ALL: SurfaceFlingerLayersConfig.TraceFlag
    MODE_FIELD_NUMBER: _ClassVar[int]
    TRACE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    mode: SurfaceFlingerLayersConfig.Mode
    trace_flags: _containers.RepeatedScalarFieldContainer[SurfaceFlingerLayersConfig.TraceFlag]
    def __init__(
        self,
        mode: _Optional[_Union[SurfaceFlingerLayersConfig.Mode, str]] = ...,
        trace_flags: _Optional[_Iterable[_Union[SurfaceFlingerLayersConfig.TraceFlag, str]]] = ...,
    ) -> None: ...

class SurfaceFlingerTransactionsConfig(_message.Message):
    __slots__ = ("mode",)

    class Mode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        MODE_UNSPECIFIED: _ClassVar[SurfaceFlingerTransactionsConfig.Mode]
        MODE_CONTINUOUS: _ClassVar[SurfaceFlingerTransactionsConfig.Mode]
        MODE_ACTIVE: _ClassVar[SurfaceFlingerTransactionsConfig.Mode]

    MODE_UNSPECIFIED: SurfaceFlingerTransactionsConfig.Mode
    MODE_CONTINUOUS: SurfaceFlingerTransactionsConfig.Mode
    MODE_ACTIVE: SurfaceFlingerTransactionsConfig.Mode
    MODE_FIELD_NUMBER: _ClassVar[int]
    mode: SurfaceFlingerTransactionsConfig.Mode
    def __init__(self, mode: _Optional[_Union[SurfaceFlingerTransactionsConfig.Mode, str]] = ...) -> None: ...

class ChromeConfig(_message.Message):
    __slots__ = (
        "trace_config",
        "privacy_filtering_enabled",
        "convert_to_legacy_json",
        "client_priority",
        "json_agent_label_filter",
    )

    class ClientPriority(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNKNOWN: _ClassVar[ChromeConfig.ClientPriority]
        BACKGROUND: _ClassVar[ChromeConfig.ClientPriority]
        USER_INITIATED: _ClassVar[ChromeConfig.ClientPriority]

    UNKNOWN: ChromeConfig.ClientPriority
    BACKGROUND: ChromeConfig.ClientPriority
    USER_INITIATED: ChromeConfig.ClientPriority
    TRACE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    PRIVACY_FILTERING_ENABLED_FIELD_NUMBER: _ClassVar[int]
    CONVERT_TO_LEGACY_JSON_FIELD_NUMBER: _ClassVar[int]
    CLIENT_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    JSON_AGENT_LABEL_FILTER_FIELD_NUMBER: _ClassVar[int]
    trace_config: str
    privacy_filtering_enabled: bool
    convert_to_legacy_json: bool
    client_priority: ChromeConfig.ClientPriority
    json_agent_label_filter: str
    def __init__(
        self,
        trace_config: _Optional[str] = ...,
        privacy_filtering_enabled: bool = ...,
        convert_to_legacy_json: bool = ...,
        client_priority: _Optional[_Union[ChromeConfig.ClientPriority, str]] = ...,
        json_agent_label_filter: _Optional[str] = ...,
    ) -> None: ...

class V8Config(_message.Message):
    __slots__ = ("log_script_sources", "log_instructions")
    LOG_SCRIPT_SOURCES_FIELD_NUMBER: _ClassVar[int]
    LOG_INSTRUCTIONS_FIELD_NUMBER: _ClassVar[int]
    log_script_sources: bool
    log_instructions: bool
    def __init__(self, log_script_sources: bool = ..., log_instructions: bool = ...) -> None: ...

class EtwConfig(_message.Message):
    __slots__ = ("kernel_flags",)

    class KernelFlag(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        CSWITCH: _ClassVar[EtwConfig.KernelFlag]
        DISPATCHER: _ClassVar[EtwConfig.KernelFlag]

    CSWITCH: EtwConfig.KernelFlag
    DISPATCHER: EtwConfig.KernelFlag
    KERNEL_FLAGS_FIELD_NUMBER: _ClassVar[int]
    kernel_flags: _containers.RepeatedScalarFieldContainer[EtwConfig.KernelFlag]
    def __init__(self, kernel_flags: _Optional[_Iterable[_Union[EtwConfig.KernelFlag, str]]] = ...) -> None: ...

class FtraceConfig(_message.Message):
    __slots__ = (
        "ftrace_events",
        "atrace_categories",
        "atrace_apps",
        "buffer_size_kb",
        "drain_period_ms",
        "compact_sched",
        "print_filter",
        "symbolize_ksyms",
        "ksyms_mem_policy",
        "initialize_ksyms_synchronously_for_testing",
        "throttle_rss_stat",
        "disable_generic_events",
        "syscall_events",
        "enable_function_graph",
        "function_filters",
        "function_graph_roots",
        "preserve_ftrace_buffer",
        "use_monotonic_raw_clock",
        "instance_name",
    )

    class KsymsMemPolicy(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        KSYMS_UNSPECIFIED: _ClassVar[FtraceConfig.KsymsMemPolicy]
        KSYMS_CLEANUP_ON_STOP: _ClassVar[FtraceConfig.KsymsMemPolicy]
        KSYMS_RETAIN: _ClassVar[FtraceConfig.KsymsMemPolicy]

    KSYMS_UNSPECIFIED: FtraceConfig.KsymsMemPolicy
    KSYMS_CLEANUP_ON_STOP: FtraceConfig.KsymsMemPolicy
    KSYMS_RETAIN: FtraceConfig.KsymsMemPolicy

    class CompactSchedConfig(_message.Message):
        __slots__ = ("enabled",)
        ENABLED_FIELD_NUMBER: _ClassVar[int]
        enabled: bool
        def __init__(self, enabled: bool = ...) -> None: ...

    class PrintFilter(_message.Message):
        __slots__ = ("rules",)

        class Rule(_message.Message):
            __slots__ = ("prefix", "atrace_msg", "allow")

            class AtraceMessage(_message.Message):
                __slots__ = ("type", "prefix")
                TYPE_FIELD_NUMBER: _ClassVar[int]
                PREFIX_FIELD_NUMBER: _ClassVar[int]
                type: str
                prefix: str
                def __init__(self, type: _Optional[str] = ..., prefix: _Optional[str] = ...) -> None: ...

            PREFIX_FIELD_NUMBER: _ClassVar[int]
            ATRACE_MSG_FIELD_NUMBER: _ClassVar[int]
            ALLOW_FIELD_NUMBER: _ClassVar[int]
            prefix: str
            atrace_msg: FtraceConfig.PrintFilter.Rule.AtraceMessage
            allow: bool
            def __init__(
                self,
                prefix: _Optional[str] = ...,
                atrace_msg: _Optional[_Union[FtraceConfig.PrintFilter.Rule.AtraceMessage, _Mapping]] = ...,
                allow: bool = ...,
            ) -> None: ...

        RULES_FIELD_NUMBER: _ClassVar[int]
        rules: _containers.RepeatedCompositeFieldContainer[FtraceConfig.PrintFilter.Rule]
        def __init__(
            self, rules: _Optional[_Iterable[_Union[FtraceConfig.PrintFilter.Rule, _Mapping]]] = ...
        ) -> None: ...

    FTRACE_EVENTS_FIELD_NUMBER: _ClassVar[int]
    ATRACE_CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    ATRACE_APPS_FIELD_NUMBER: _ClassVar[int]
    BUFFER_SIZE_KB_FIELD_NUMBER: _ClassVar[int]
    DRAIN_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    COMPACT_SCHED_FIELD_NUMBER: _ClassVar[int]
    PRINT_FILTER_FIELD_NUMBER: _ClassVar[int]
    SYMBOLIZE_KSYMS_FIELD_NUMBER: _ClassVar[int]
    KSYMS_MEM_POLICY_FIELD_NUMBER: _ClassVar[int]
    INITIALIZE_KSYMS_SYNCHRONOUSLY_FOR_TESTING_FIELD_NUMBER: _ClassVar[int]
    THROTTLE_RSS_STAT_FIELD_NUMBER: _ClassVar[int]
    DISABLE_GENERIC_EVENTS_FIELD_NUMBER: _ClassVar[int]
    SYSCALL_EVENTS_FIELD_NUMBER: _ClassVar[int]
    ENABLE_FUNCTION_GRAPH_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_FILTERS_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_GRAPH_ROOTS_FIELD_NUMBER: _ClassVar[int]
    PRESERVE_FTRACE_BUFFER_FIELD_NUMBER: _ClassVar[int]
    USE_MONOTONIC_RAW_CLOCK_FIELD_NUMBER: _ClassVar[int]
    INSTANCE_NAME_FIELD_NUMBER: _ClassVar[int]
    ftrace_events: _containers.RepeatedScalarFieldContainer[str]
    atrace_categories: _containers.RepeatedScalarFieldContainer[str]
    atrace_apps: _containers.RepeatedScalarFieldContainer[str]
    buffer_size_kb: int
    drain_period_ms: int
    compact_sched: FtraceConfig.CompactSchedConfig
    print_filter: FtraceConfig.PrintFilter
    symbolize_ksyms: bool
    ksyms_mem_policy: FtraceConfig.KsymsMemPolicy
    initialize_ksyms_synchronously_for_testing: bool
    throttle_rss_stat: bool
    disable_generic_events: bool
    syscall_events: _containers.RepeatedScalarFieldContainer[str]
    enable_function_graph: bool
    function_filters: _containers.RepeatedScalarFieldContainer[str]
    function_graph_roots: _containers.RepeatedScalarFieldContainer[str]
    preserve_ftrace_buffer: bool
    use_monotonic_raw_clock: bool
    instance_name: str
    def __init__(
        self,
        ftrace_events: _Optional[_Iterable[str]] = ...,
        atrace_categories: _Optional[_Iterable[str]] = ...,
        atrace_apps: _Optional[_Iterable[str]] = ...,
        buffer_size_kb: _Optional[int] = ...,
        drain_period_ms: _Optional[int] = ...,
        compact_sched: _Optional[_Union[FtraceConfig.CompactSchedConfig, _Mapping]] = ...,
        print_filter: _Optional[_Union[FtraceConfig.PrintFilter, _Mapping]] = ...,
        symbolize_ksyms: bool = ...,
        ksyms_mem_policy: _Optional[_Union[FtraceConfig.KsymsMemPolicy, str]] = ...,
        initialize_ksyms_synchronously_for_testing: bool = ...,
        throttle_rss_stat: bool = ...,
        disable_generic_events: bool = ...,
        syscall_events: _Optional[_Iterable[str]] = ...,
        enable_function_graph: bool = ...,
        function_filters: _Optional[_Iterable[str]] = ...,
        function_graph_roots: _Optional[_Iterable[str]] = ...,
        preserve_ftrace_buffer: bool = ...,
        use_monotonic_raw_clock: bool = ...,
        instance_name: _Optional[str] = ...,
    ) -> None: ...

class GpuCounterConfig(_message.Message):
    __slots__ = ("counter_period_ns", "counter_ids", "instrumented_sampling", "fix_gpu_clock")
    COUNTER_PERIOD_NS_FIELD_NUMBER: _ClassVar[int]
    COUNTER_IDS_FIELD_NUMBER: _ClassVar[int]
    INSTRUMENTED_SAMPLING_FIELD_NUMBER: _ClassVar[int]
    FIX_GPU_CLOCK_FIELD_NUMBER: _ClassVar[int]
    counter_period_ns: int
    counter_ids: _containers.RepeatedScalarFieldContainer[int]
    instrumented_sampling: bool
    fix_gpu_clock: bool
    def __init__(
        self,
        counter_period_ns: _Optional[int] = ...,
        counter_ids: _Optional[_Iterable[int]] = ...,
        instrumented_sampling: bool = ...,
        fix_gpu_clock: bool = ...,
    ) -> None: ...

class VulkanMemoryConfig(_message.Message):
    __slots__ = ("track_driver_memory_usage", "track_device_memory_usage")
    TRACK_DRIVER_MEMORY_USAGE_FIELD_NUMBER: _ClassVar[int]
    TRACK_DEVICE_MEMORY_USAGE_FIELD_NUMBER: _ClassVar[int]
    track_driver_memory_usage: bool
    track_device_memory_usage: bool
    def __init__(self, track_driver_memory_usage: bool = ..., track_device_memory_usage: bool = ...) -> None: ...

class InodeFileConfig(_message.Message):
    __slots__ = (
        "scan_interval_ms",
        "scan_delay_ms",
        "scan_batch_size",
        "do_not_scan",
        "scan_mount_points",
        "mount_point_mapping",
    )

    class MountPointMappingEntry(_message.Message):
        __slots__ = ("mountpoint", "scan_roots")
        MOUNTPOINT_FIELD_NUMBER: _ClassVar[int]
        SCAN_ROOTS_FIELD_NUMBER: _ClassVar[int]
        mountpoint: str
        scan_roots: _containers.RepeatedScalarFieldContainer[str]
        def __init__(self, mountpoint: _Optional[str] = ..., scan_roots: _Optional[_Iterable[str]] = ...) -> None: ...

    SCAN_INTERVAL_MS_FIELD_NUMBER: _ClassVar[int]
    SCAN_DELAY_MS_FIELD_NUMBER: _ClassVar[int]
    SCAN_BATCH_SIZE_FIELD_NUMBER: _ClassVar[int]
    DO_NOT_SCAN_FIELD_NUMBER: _ClassVar[int]
    SCAN_MOUNT_POINTS_FIELD_NUMBER: _ClassVar[int]
    MOUNT_POINT_MAPPING_FIELD_NUMBER: _ClassVar[int]
    scan_interval_ms: int
    scan_delay_ms: int
    scan_batch_size: int
    do_not_scan: bool
    scan_mount_points: _containers.RepeatedScalarFieldContainer[str]
    mount_point_mapping: _containers.RepeatedCompositeFieldContainer[InodeFileConfig.MountPointMappingEntry]
    def __init__(
        self,
        scan_interval_ms: _Optional[int] = ...,
        scan_delay_ms: _Optional[int] = ...,
        scan_batch_size: _Optional[int] = ...,
        do_not_scan: bool = ...,
        scan_mount_points: _Optional[_Iterable[str]] = ...,
        mount_point_mapping: _Optional[_Iterable[_Union[InodeFileConfig.MountPointMappingEntry, _Mapping]]] = ...,
    ) -> None: ...

class ConsoleConfig(_message.Message):
    __slots__ = ("output", "enable_colors")

    class Output(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        OUTPUT_UNSPECIFIED: _ClassVar[ConsoleConfig.Output]
        OUTPUT_STDOUT: _ClassVar[ConsoleConfig.Output]
        OUTPUT_STDERR: _ClassVar[ConsoleConfig.Output]

    OUTPUT_UNSPECIFIED: ConsoleConfig.Output
    OUTPUT_STDOUT: ConsoleConfig.Output
    OUTPUT_STDERR: ConsoleConfig.Output
    OUTPUT_FIELD_NUMBER: _ClassVar[int]
    ENABLE_COLORS_FIELD_NUMBER: _ClassVar[int]
    output: ConsoleConfig.Output
    enable_colors: bool
    def __init__(
        self, output: _Optional[_Union[ConsoleConfig.Output, str]] = ..., enable_colors: bool = ...
    ) -> None: ...

class InterceptorConfig(_message.Message):
    __slots__ = ("name", "console_config")
    NAME_FIELD_NUMBER: _ClassVar[int]
    CONSOLE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    name: str
    console_config: ConsoleConfig
    def __init__(
        self, name: _Optional[str] = ..., console_config: _Optional[_Union[ConsoleConfig, _Mapping]] = ...
    ) -> None: ...

class AndroidPowerConfig(_message.Message):
    __slots__ = (
        "battery_poll_ms",
        "battery_counters",
        "collect_power_rails",
        "collect_energy_estimation_breakdown",
        "collect_entity_state_residency",
    )

    class BatteryCounters(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        BATTERY_COUNTER_UNSPECIFIED: _ClassVar[AndroidPowerConfig.BatteryCounters]
        BATTERY_COUNTER_CHARGE: _ClassVar[AndroidPowerConfig.BatteryCounters]
        BATTERY_COUNTER_CAPACITY_PERCENT: _ClassVar[AndroidPowerConfig.BatteryCounters]
        BATTERY_COUNTER_CURRENT: _ClassVar[AndroidPowerConfig.BatteryCounters]
        BATTERY_COUNTER_CURRENT_AVG: _ClassVar[AndroidPowerConfig.BatteryCounters]
        BATTERY_COUNTER_VOLTAGE: _ClassVar[AndroidPowerConfig.BatteryCounters]

    BATTERY_COUNTER_UNSPECIFIED: AndroidPowerConfig.BatteryCounters
    BATTERY_COUNTER_CHARGE: AndroidPowerConfig.BatteryCounters
    BATTERY_COUNTER_CAPACITY_PERCENT: AndroidPowerConfig.BatteryCounters
    BATTERY_COUNTER_CURRENT: AndroidPowerConfig.BatteryCounters
    BATTERY_COUNTER_CURRENT_AVG: AndroidPowerConfig.BatteryCounters
    BATTERY_COUNTER_VOLTAGE: AndroidPowerConfig.BatteryCounters
    BATTERY_POLL_MS_FIELD_NUMBER: _ClassVar[int]
    BATTERY_COUNTERS_FIELD_NUMBER: _ClassVar[int]
    COLLECT_POWER_RAILS_FIELD_NUMBER: _ClassVar[int]
    COLLECT_ENERGY_ESTIMATION_BREAKDOWN_FIELD_NUMBER: _ClassVar[int]
    COLLECT_ENTITY_STATE_RESIDENCY_FIELD_NUMBER: _ClassVar[int]
    battery_poll_ms: int
    battery_counters: _containers.RepeatedScalarFieldContainer[AndroidPowerConfig.BatteryCounters]
    collect_power_rails: bool
    collect_energy_estimation_breakdown: bool
    collect_entity_state_residency: bool
    def __init__(
        self,
        battery_poll_ms: _Optional[int] = ...,
        battery_counters: _Optional[_Iterable[_Union[AndroidPowerConfig.BatteryCounters, str]]] = ...,
        collect_power_rails: bool = ...,
        collect_energy_estimation_breakdown: bool = ...,
        collect_entity_state_residency: bool = ...,
    ) -> None: ...

class ProcessStatsConfig(_message.Message):
    __slots__ = (
        "quirks",
        "scan_all_processes_on_start",
        "record_thread_names",
        "proc_stats_poll_ms",
        "proc_stats_cache_ttl_ms",
        "resolve_process_fds",
        "scan_smaps_rollup",
    )

    class Quirks(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        QUIRKS_UNSPECIFIED: _ClassVar[ProcessStatsConfig.Quirks]
        DISABLE_INITIAL_DUMP: _ClassVar[ProcessStatsConfig.Quirks]
        DISABLE_ON_DEMAND: _ClassVar[ProcessStatsConfig.Quirks]

    QUIRKS_UNSPECIFIED: ProcessStatsConfig.Quirks
    DISABLE_INITIAL_DUMP: ProcessStatsConfig.Quirks
    DISABLE_ON_DEMAND: ProcessStatsConfig.Quirks
    QUIRKS_FIELD_NUMBER: _ClassVar[int]
    SCAN_ALL_PROCESSES_ON_START_FIELD_NUMBER: _ClassVar[int]
    RECORD_THREAD_NAMES_FIELD_NUMBER: _ClassVar[int]
    PROC_STATS_POLL_MS_FIELD_NUMBER: _ClassVar[int]
    PROC_STATS_CACHE_TTL_MS_FIELD_NUMBER: _ClassVar[int]
    RESOLVE_PROCESS_FDS_FIELD_NUMBER: _ClassVar[int]
    SCAN_SMAPS_ROLLUP_FIELD_NUMBER: _ClassVar[int]
    quirks: _containers.RepeatedScalarFieldContainer[ProcessStatsConfig.Quirks]
    scan_all_processes_on_start: bool
    record_thread_names: bool
    proc_stats_poll_ms: int
    proc_stats_cache_ttl_ms: int
    resolve_process_fds: bool
    scan_smaps_rollup: bool
    def __init__(
        self,
        quirks: _Optional[_Iterable[_Union[ProcessStatsConfig.Quirks, str]]] = ...,
        scan_all_processes_on_start: bool = ...,
        record_thread_names: bool = ...,
        proc_stats_poll_ms: _Optional[int] = ...,
        proc_stats_cache_ttl_ms: _Optional[int] = ...,
        resolve_process_fds: bool = ...,
        scan_smaps_rollup: bool = ...,
    ) -> None: ...

class HeapprofdConfig(_message.Message):
    __slots__ = (
        "sampling_interval_bytes",
        "adaptive_sampling_shmem_threshold",
        "adaptive_sampling_max_sampling_interval_bytes",
        "process_cmdline",
        "pid",
        "target_installed_by",
        "heaps",
        "exclude_heaps",
        "stream_allocations",
        "heap_sampling_intervals",
        "all_heaps",
        "all",
        "min_anonymous_memory_kb",
        "max_heapprofd_memory_kb",
        "max_heapprofd_cpu_secs",
        "skip_symbol_prefix",
        "continuous_dump_config",
        "shmem_size_bytes",
        "block_client",
        "block_client_timeout_us",
        "no_startup",
        "no_running",
        "dump_at_max",
        "disable_fork_teardown",
        "disable_vfork_detection",
    )

    class ContinuousDumpConfig(_message.Message):
        __slots__ = ("dump_phase_ms", "dump_interval_ms")
        DUMP_PHASE_MS_FIELD_NUMBER: _ClassVar[int]
        DUMP_INTERVAL_MS_FIELD_NUMBER: _ClassVar[int]
        dump_phase_ms: int
        dump_interval_ms: int
        def __init__(self, dump_phase_ms: _Optional[int] = ..., dump_interval_ms: _Optional[int] = ...) -> None: ...

    SAMPLING_INTERVAL_BYTES_FIELD_NUMBER: _ClassVar[int]
    ADAPTIVE_SAMPLING_SHMEM_THRESHOLD_FIELD_NUMBER: _ClassVar[int]
    ADAPTIVE_SAMPLING_MAX_SAMPLING_INTERVAL_BYTES_FIELD_NUMBER: _ClassVar[int]
    PROCESS_CMDLINE_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    TARGET_INSTALLED_BY_FIELD_NUMBER: _ClassVar[int]
    HEAPS_FIELD_NUMBER: _ClassVar[int]
    EXCLUDE_HEAPS_FIELD_NUMBER: _ClassVar[int]
    STREAM_ALLOCATIONS_FIELD_NUMBER: _ClassVar[int]
    HEAP_SAMPLING_INTERVALS_FIELD_NUMBER: _ClassVar[int]
    ALL_HEAPS_FIELD_NUMBER: _ClassVar[int]
    ALL_FIELD_NUMBER: _ClassVar[int]
    MIN_ANONYMOUS_MEMORY_KB_FIELD_NUMBER: _ClassVar[int]
    MAX_HEAPPROFD_MEMORY_KB_FIELD_NUMBER: _ClassVar[int]
    MAX_HEAPPROFD_CPU_SECS_FIELD_NUMBER: _ClassVar[int]
    SKIP_SYMBOL_PREFIX_FIELD_NUMBER: _ClassVar[int]
    CONTINUOUS_DUMP_CONFIG_FIELD_NUMBER: _ClassVar[int]
    SHMEM_SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
    BLOCK_CLIENT_FIELD_NUMBER: _ClassVar[int]
    BLOCK_CLIENT_TIMEOUT_US_FIELD_NUMBER: _ClassVar[int]
    NO_STARTUP_FIELD_NUMBER: _ClassVar[int]
    NO_RUNNING_FIELD_NUMBER: _ClassVar[int]
    DUMP_AT_MAX_FIELD_NUMBER: _ClassVar[int]
    DISABLE_FORK_TEARDOWN_FIELD_NUMBER: _ClassVar[int]
    DISABLE_VFORK_DETECTION_FIELD_NUMBER: _ClassVar[int]
    sampling_interval_bytes: int
    adaptive_sampling_shmem_threshold: int
    adaptive_sampling_max_sampling_interval_bytes: int
    process_cmdline: _containers.RepeatedScalarFieldContainer[str]
    pid: _containers.RepeatedScalarFieldContainer[int]
    target_installed_by: _containers.RepeatedScalarFieldContainer[str]
    heaps: _containers.RepeatedScalarFieldContainer[str]
    exclude_heaps: _containers.RepeatedScalarFieldContainer[str]
    stream_allocations: bool
    heap_sampling_intervals: _containers.RepeatedScalarFieldContainer[int]
    all_heaps: bool
    all: bool
    min_anonymous_memory_kb: int
    max_heapprofd_memory_kb: int
    max_heapprofd_cpu_secs: int
    skip_symbol_prefix: _containers.RepeatedScalarFieldContainer[str]
    continuous_dump_config: HeapprofdConfig.ContinuousDumpConfig
    shmem_size_bytes: int
    block_client: bool
    block_client_timeout_us: int
    no_startup: bool
    no_running: bool
    dump_at_max: bool
    disable_fork_teardown: bool
    disable_vfork_detection: bool
    def __init__(
        self,
        sampling_interval_bytes: _Optional[int] = ...,
        adaptive_sampling_shmem_threshold: _Optional[int] = ...,
        adaptive_sampling_max_sampling_interval_bytes: _Optional[int] = ...,
        process_cmdline: _Optional[_Iterable[str]] = ...,
        pid: _Optional[_Iterable[int]] = ...,
        target_installed_by: _Optional[_Iterable[str]] = ...,
        heaps: _Optional[_Iterable[str]] = ...,
        exclude_heaps: _Optional[_Iterable[str]] = ...,
        stream_allocations: bool = ...,
        heap_sampling_intervals: _Optional[_Iterable[int]] = ...,
        all_heaps: bool = ...,
        all: bool = ...,
        min_anonymous_memory_kb: _Optional[int] = ...,
        max_heapprofd_memory_kb: _Optional[int] = ...,
        max_heapprofd_cpu_secs: _Optional[int] = ...,
        skip_symbol_prefix: _Optional[_Iterable[str]] = ...,
        continuous_dump_config: _Optional[_Union[HeapprofdConfig.ContinuousDumpConfig, _Mapping]] = ...,
        shmem_size_bytes: _Optional[int] = ...,
        block_client: bool = ...,
        block_client_timeout_us: _Optional[int] = ...,
        no_startup: bool = ...,
        no_running: bool = ...,
        dump_at_max: bool = ...,
        disable_fork_teardown: bool = ...,
        disable_vfork_detection: bool = ...,
    ) -> None: ...

class JavaHprofConfig(_message.Message):
    __slots__ = (
        "process_cmdline",
        "pid",
        "target_installed_by",
        "continuous_dump_config",
        "min_anonymous_memory_kb",
        "dump_smaps",
        "ignored_types",
    )

    class ContinuousDumpConfig(_message.Message):
        __slots__ = ("dump_phase_ms", "dump_interval_ms", "scan_pids_only_on_start")
        DUMP_PHASE_MS_FIELD_NUMBER: _ClassVar[int]
        DUMP_INTERVAL_MS_FIELD_NUMBER: _ClassVar[int]
        SCAN_PIDS_ONLY_ON_START_FIELD_NUMBER: _ClassVar[int]
        dump_phase_ms: int
        dump_interval_ms: int
        scan_pids_only_on_start: bool
        def __init__(
            self,
            dump_phase_ms: _Optional[int] = ...,
            dump_interval_ms: _Optional[int] = ...,
            scan_pids_only_on_start: bool = ...,
        ) -> None: ...

    PROCESS_CMDLINE_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    TARGET_INSTALLED_BY_FIELD_NUMBER: _ClassVar[int]
    CONTINUOUS_DUMP_CONFIG_FIELD_NUMBER: _ClassVar[int]
    MIN_ANONYMOUS_MEMORY_KB_FIELD_NUMBER: _ClassVar[int]
    DUMP_SMAPS_FIELD_NUMBER: _ClassVar[int]
    IGNORED_TYPES_FIELD_NUMBER: _ClassVar[int]
    process_cmdline: _containers.RepeatedScalarFieldContainer[str]
    pid: _containers.RepeatedScalarFieldContainer[int]
    target_installed_by: _containers.RepeatedScalarFieldContainer[str]
    continuous_dump_config: JavaHprofConfig.ContinuousDumpConfig
    min_anonymous_memory_kb: int
    dump_smaps: bool
    ignored_types: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        process_cmdline: _Optional[_Iterable[str]] = ...,
        pid: _Optional[_Iterable[int]] = ...,
        target_installed_by: _Optional[_Iterable[str]] = ...,
        continuous_dump_config: _Optional[_Union[JavaHprofConfig.ContinuousDumpConfig, _Mapping]] = ...,
        min_anonymous_memory_kb: _Optional[int] = ...,
        dump_smaps: bool = ...,
        ignored_types: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class PerfEvents(_message.Message):
    __slots__ = ()

    class Counter(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNKNOWN_COUNTER: _ClassVar[PerfEvents.Counter]
        SW_CPU_CLOCK: _ClassVar[PerfEvents.Counter]
        SW_PAGE_FAULTS: _ClassVar[PerfEvents.Counter]
        SW_TASK_CLOCK: _ClassVar[PerfEvents.Counter]
        SW_CONTEXT_SWITCHES: _ClassVar[PerfEvents.Counter]
        SW_CPU_MIGRATIONS: _ClassVar[PerfEvents.Counter]
        SW_PAGE_FAULTS_MIN: _ClassVar[PerfEvents.Counter]
        SW_PAGE_FAULTS_MAJ: _ClassVar[PerfEvents.Counter]
        SW_ALIGNMENT_FAULTS: _ClassVar[PerfEvents.Counter]
        SW_EMULATION_FAULTS: _ClassVar[PerfEvents.Counter]
        SW_DUMMY: _ClassVar[PerfEvents.Counter]
        HW_CPU_CYCLES: _ClassVar[PerfEvents.Counter]
        HW_INSTRUCTIONS: _ClassVar[PerfEvents.Counter]
        HW_CACHE_REFERENCES: _ClassVar[PerfEvents.Counter]
        HW_CACHE_MISSES: _ClassVar[PerfEvents.Counter]
        HW_BRANCH_INSTRUCTIONS: _ClassVar[PerfEvents.Counter]
        HW_BRANCH_MISSES: _ClassVar[PerfEvents.Counter]
        HW_BUS_CYCLES: _ClassVar[PerfEvents.Counter]
        HW_STALLED_CYCLES_FRONTEND: _ClassVar[PerfEvents.Counter]
        HW_STALLED_CYCLES_BACKEND: _ClassVar[PerfEvents.Counter]
        HW_REF_CPU_CYCLES: _ClassVar[PerfEvents.Counter]

    UNKNOWN_COUNTER: PerfEvents.Counter
    SW_CPU_CLOCK: PerfEvents.Counter
    SW_PAGE_FAULTS: PerfEvents.Counter
    SW_TASK_CLOCK: PerfEvents.Counter
    SW_CONTEXT_SWITCHES: PerfEvents.Counter
    SW_CPU_MIGRATIONS: PerfEvents.Counter
    SW_PAGE_FAULTS_MIN: PerfEvents.Counter
    SW_PAGE_FAULTS_MAJ: PerfEvents.Counter
    SW_ALIGNMENT_FAULTS: PerfEvents.Counter
    SW_EMULATION_FAULTS: PerfEvents.Counter
    SW_DUMMY: PerfEvents.Counter
    HW_CPU_CYCLES: PerfEvents.Counter
    HW_INSTRUCTIONS: PerfEvents.Counter
    HW_CACHE_REFERENCES: PerfEvents.Counter
    HW_CACHE_MISSES: PerfEvents.Counter
    HW_BRANCH_INSTRUCTIONS: PerfEvents.Counter
    HW_BRANCH_MISSES: PerfEvents.Counter
    HW_BUS_CYCLES: PerfEvents.Counter
    HW_STALLED_CYCLES_FRONTEND: PerfEvents.Counter
    HW_STALLED_CYCLES_BACKEND: PerfEvents.Counter
    HW_REF_CPU_CYCLES: PerfEvents.Counter

    class PerfClock(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNKNOWN_PERF_CLOCK: _ClassVar[PerfEvents.PerfClock]
        PERF_CLOCK_REALTIME: _ClassVar[PerfEvents.PerfClock]
        PERF_CLOCK_MONOTONIC: _ClassVar[PerfEvents.PerfClock]
        PERF_CLOCK_MONOTONIC_RAW: _ClassVar[PerfEvents.PerfClock]
        PERF_CLOCK_BOOTTIME: _ClassVar[PerfEvents.PerfClock]

    UNKNOWN_PERF_CLOCK: PerfEvents.PerfClock
    PERF_CLOCK_REALTIME: PerfEvents.PerfClock
    PERF_CLOCK_MONOTONIC: PerfEvents.PerfClock
    PERF_CLOCK_MONOTONIC_RAW: PerfEvents.PerfClock
    PERF_CLOCK_BOOTTIME: PerfEvents.PerfClock

    class Timebase(_message.Message):
        __slots__ = ("frequency", "period", "counter", "tracepoint", "raw_event", "timestamp_clock", "name")
        FREQUENCY_FIELD_NUMBER: _ClassVar[int]
        PERIOD_FIELD_NUMBER: _ClassVar[int]
        COUNTER_FIELD_NUMBER: _ClassVar[int]
        TRACEPOINT_FIELD_NUMBER: _ClassVar[int]
        RAW_EVENT_FIELD_NUMBER: _ClassVar[int]
        TIMESTAMP_CLOCK_FIELD_NUMBER: _ClassVar[int]
        NAME_FIELD_NUMBER: _ClassVar[int]
        frequency: int
        period: int
        counter: PerfEvents.Counter
        tracepoint: PerfEvents.Tracepoint
        raw_event: PerfEvents.RawEvent
        timestamp_clock: PerfEvents.PerfClock
        name: str
        def __init__(
            self,
            frequency: _Optional[int] = ...,
            period: _Optional[int] = ...,
            counter: _Optional[_Union[PerfEvents.Counter, str]] = ...,
            tracepoint: _Optional[_Union[PerfEvents.Tracepoint, _Mapping]] = ...,
            raw_event: _Optional[_Union[PerfEvents.RawEvent, _Mapping]] = ...,
            timestamp_clock: _Optional[_Union[PerfEvents.PerfClock, str]] = ...,
            name: _Optional[str] = ...,
        ) -> None: ...

    class Tracepoint(_message.Message):
        __slots__ = ("name", "filter")
        NAME_FIELD_NUMBER: _ClassVar[int]
        FILTER_FIELD_NUMBER: _ClassVar[int]
        name: str
        filter: str
        def __init__(self, name: _Optional[str] = ..., filter: _Optional[str] = ...) -> None: ...

    class RawEvent(_message.Message):
        __slots__ = ("type", "config", "config1", "config2")
        TYPE_FIELD_NUMBER: _ClassVar[int]
        CONFIG_FIELD_NUMBER: _ClassVar[int]
        CONFIG1_FIELD_NUMBER: _ClassVar[int]
        CONFIG2_FIELD_NUMBER: _ClassVar[int]
        type: int
        config: int
        config1: int
        config2: int
        def __init__(
            self,
            type: _Optional[int] = ...,
            config: _Optional[int] = ...,
            config1: _Optional[int] = ...,
            config2: _Optional[int] = ...,
        ) -> None: ...

    def __init__(self) -> None: ...

class PerfEventConfig(_message.Message):
    __slots__ = (
        "timebase",
        "callstack_sampling",
        "ring_buffer_read_period_ms",
        "ring_buffer_pages",
        "max_enqueued_footprint_kb",
        "max_daemon_memory_kb",
        "remote_descriptor_timeout_ms",
        "unwind_state_clear_period_ms",
        "target_installed_by",
        "all_cpus",
        "sampling_frequency",
        "kernel_frames",
        "target_pid",
        "target_cmdline",
        "exclude_pid",
        "exclude_cmdline",
        "additional_cmdline_count",
    )

    class UnwindMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNWIND_UNKNOWN: _ClassVar[PerfEventConfig.UnwindMode]
        UNWIND_SKIP: _ClassVar[PerfEventConfig.UnwindMode]
        UNWIND_DWARF: _ClassVar[PerfEventConfig.UnwindMode]

    UNWIND_UNKNOWN: PerfEventConfig.UnwindMode
    UNWIND_SKIP: PerfEventConfig.UnwindMode
    UNWIND_DWARF: PerfEventConfig.UnwindMode

    class CallstackSampling(_message.Message):
        __slots__ = ("scope", "kernel_frames", "user_frames")
        SCOPE_FIELD_NUMBER: _ClassVar[int]
        KERNEL_FRAMES_FIELD_NUMBER: _ClassVar[int]
        USER_FRAMES_FIELD_NUMBER: _ClassVar[int]
        scope: PerfEventConfig.Scope
        kernel_frames: bool
        user_frames: PerfEventConfig.UnwindMode
        def __init__(
            self,
            scope: _Optional[_Union[PerfEventConfig.Scope, _Mapping]] = ...,
            kernel_frames: bool = ...,
            user_frames: _Optional[_Union[PerfEventConfig.UnwindMode, str]] = ...,
        ) -> None: ...

    class Scope(_message.Message):
        __slots__ = (
            "target_pid",
            "target_cmdline",
            "exclude_pid",
            "exclude_cmdline",
            "additional_cmdline_count",
            "process_shard_count",
        )
        TARGET_PID_FIELD_NUMBER: _ClassVar[int]
        TARGET_CMDLINE_FIELD_NUMBER: _ClassVar[int]
        EXCLUDE_PID_FIELD_NUMBER: _ClassVar[int]
        EXCLUDE_CMDLINE_FIELD_NUMBER: _ClassVar[int]
        ADDITIONAL_CMDLINE_COUNT_FIELD_NUMBER: _ClassVar[int]
        PROCESS_SHARD_COUNT_FIELD_NUMBER: _ClassVar[int]
        target_pid: _containers.RepeatedScalarFieldContainer[int]
        target_cmdline: _containers.RepeatedScalarFieldContainer[str]
        exclude_pid: _containers.RepeatedScalarFieldContainer[int]
        exclude_cmdline: _containers.RepeatedScalarFieldContainer[str]
        additional_cmdline_count: int
        process_shard_count: int
        def __init__(
            self,
            target_pid: _Optional[_Iterable[int]] = ...,
            target_cmdline: _Optional[_Iterable[str]] = ...,
            exclude_pid: _Optional[_Iterable[int]] = ...,
            exclude_cmdline: _Optional[_Iterable[str]] = ...,
            additional_cmdline_count: _Optional[int] = ...,
            process_shard_count: _Optional[int] = ...,
        ) -> None: ...

    TIMEBASE_FIELD_NUMBER: _ClassVar[int]
    CALLSTACK_SAMPLING_FIELD_NUMBER: _ClassVar[int]
    RING_BUFFER_READ_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    RING_BUFFER_PAGES_FIELD_NUMBER: _ClassVar[int]
    MAX_ENQUEUED_FOOTPRINT_KB_FIELD_NUMBER: _ClassVar[int]
    MAX_DAEMON_MEMORY_KB_FIELD_NUMBER: _ClassVar[int]
    REMOTE_DESCRIPTOR_TIMEOUT_MS_FIELD_NUMBER: _ClassVar[int]
    UNWIND_STATE_CLEAR_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    TARGET_INSTALLED_BY_FIELD_NUMBER: _ClassVar[int]
    ALL_CPUS_FIELD_NUMBER: _ClassVar[int]
    SAMPLING_FREQUENCY_FIELD_NUMBER: _ClassVar[int]
    KERNEL_FRAMES_FIELD_NUMBER: _ClassVar[int]
    TARGET_PID_FIELD_NUMBER: _ClassVar[int]
    TARGET_CMDLINE_FIELD_NUMBER: _ClassVar[int]
    EXCLUDE_PID_FIELD_NUMBER: _ClassVar[int]
    EXCLUDE_CMDLINE_FIELD_NUMBER: _ClassVar[int]
    ADDITIONAL_CMDLINE_COUNT_FIELD_NUMBER: _ClassVar[int]
    timebase: PerfEvents.Timebase
    callstack_sampling: PerfEventConfig.CallstackSampling
    ring_buffer_read_period_ms: int
    ring_buffer_pages: int
    max_enqueued_footprint_kb: int
    max_daemon_memory_kb: int
    remote_descriptor_timeout_ms: int
    unwind_state_clear_period_ms: int
    target_installed_by: _containers.RepeatedScalarFieldContainer[str]
    all_cpus: bool
    sampling_frequency: int
    kernel_frames: bool
    target_pid: _containers.RepeatedScalarFieldContainer[int]
    target_cmdline: _containers.RepeatedScalarFieldContainer[str]
    exclude_pid: _containers.RepeatedScalarFieldContainer[int]
    exclude_cmdline: _containers.RepeatedScalarFieldContainer[str]
    additional_cmdline_count: int
    def __init__(
        self,
        timebase: _Optional[_Union[PerfEvents.Timebase, _Mapping]] = ...,
        callstack_sampling: _Optional[_Union[PerfEventConfig.CallstackSampling, _Mapping]] = ...,
        ring_buffer_read_period_ms: _Optional[int] = ...,
        ring_buffer_pages: _Optional[int] = ...,
        max_enqueued_footprint_kb: _Optional[int] = ...,
        max_daemon_memory_kb: _Optional[int] = ...,
        remote_descriptor_timeout_ms: _Optional[int] = ...,
        unwind_state_clear_period_ms: _Optional[int] = ...,
        target_installed_by: _Optional[_Iterable[str]] = ...,
        all_cpus: bool = ...,
        sampling_frequency: _Optional[int] = ...,
        kernel_frames: bool = ...,
        target_pid: _Optional[_Iterable[int]] = ...,
        target_cmdline: _Optional[_Iterable[str]] = ...,
        exclude_pid: _Optional[_Iterable[int]] = ...,
        exclude_cmdline: _Optional[_Iterable[str]] = ...,
        additional_cmdline_count: _Optional[int] = ...,
    ) -> None: ...

class StatsdTracingConfig(_message.Message):
    __slots__ = ("push_atom_id", "raw_push_atom_id", "pull_config")
    PUSH_ATOM_ID_FIELD_NUMBER: _ClassVar[int]
    RAW_PUSH_ATOM_ID_FIELD_NUMBER: _ClassVar[int]
    PULL_CONFIG_FIELD_NUMBER: _ClassVar[int]
    push_atom_id: _containers.RepeatedScalarFieldContainer[AtomId]
    raw_push_atom_id: _containers.RepeatedScalarFieldContainer[int]
    pull_config: _containers.RepeatedCompositeFieldContainer[StatsdPullAtomConfig]
    def __init__(
        self,
        push_atom_id: _Optional[_Iterable[_Union[AtomId, str]]] = ...,
        raw_push_atom_id: _Optional[_Iterable[int]] = ...,
        pull_config: _Optional[_Iterable[_Union[StatsdPullAtomConfig, _Mapping]]] = ...,
    ) -> None: ...

class StatsdPullAtomConfig(_message.Message):
    __slots__ = ("pull_atom_id", "raw_pull_atom_id", "pull_frequency_ms", "packages")
    PULL_ATOM_ID_FIELD_NUMBER: _ClassVar[int]
    RAW_PULL_ATOM_ID_FIELD_NUMBER: _ClassVar[int]
    PULL_FREQUENCY_MS_FIELD_NUMBER: _ClassVar[int]
    PACKAGES_FIELD_NUMBER: _ClassVar[int]
    pull_atom_id: _containers.RepeatedScalarFieldContainer[AtomId]
    raw_pull_atom_id: _containers.RepeatedScalarFieldContainer[int]
    pull_frequency_ms: int
    packages: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        pull_atom_id: _Optional[_Iterable[_Union[AtomId, str]]] = ...,
        raw_pull_atom_id: _Optional[_Iterable[int]] = ...,
        pull_frequency_ms: _Optional[int] = ...,
        packages: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class SysStatsConfig(_message.Message):
    __slots__ = (
        "meminfo_period_ms",
        "meminfo_counters",
        "vmstat_period_ms",
        "vmstat_counters",
        "stat_period_ms",
        "stat_counters",
        "devfreq_period_ms",
        "cpufreq_period_ms",
        "buddyinfo_period_ms",
        "diskstat_period_ms",
        "psi_period_ms",
    )

    class StatCounters(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        STAT_UNSPECIFIED: _ClassVar[SysStatsConfig.StatCounters]
        STAT_CPU_TIMES: _ClassVar[SysStatsConfig.StatCounters]
        STAT_IRQ_COUNTS: _ClassVar[SysStatsConfig.StatCounters]
        STAT_SOFTIRQ_COUNTS: _ClassVar[SysStatsConfig.StatCounters]
        STAT_FORK_COUNT: _ClassVar[SysStatsConfig.StatCounters]

    STAT_UNSPECIFIED: SysStatsConfig.StatCounters
    STAT_CPU_TIMES: SysStatsConfig.StatCounters
    STAT_IRQ_COUNTS: SysStatsConfig.StatCounters
    STAT_SOFTIRQ_COUNTS: SysStatsConfig.StatCounters
    STAT_FORK_COUNT: SysStatsConfig.StatCounters
    MEMINFO_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    MEMINFO_COUNTERS_FIELD_NUMBER: _ClassVar[int]
    VMSTAT_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    VMSTAT_COUNTERS_FIELD_NUMBER: _ClassVar[int]
    STAT_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    STAT_COUNTERS_FIELD_NUMBER: _ClassVar[int]
    DEVFREQ_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    CPUFREQ_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    BUDDYINFO_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    DISKSTAT_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    PSI_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    meminfo_period_ms: int
    meminfo_counters: _containers.RepeatedScalarFieldContainer[MeminfoCounters]
    vmstat_period_ms: int
    vmstat_counters: _containers.RepeatedScalarFieldContainer[VmstatCounters]
    stat_period_ms: int
    stat_counters: _containers.RepeatedScalarFieldContainer[SysStatsConfig.StatCounters]
    devfreq_period_ms: int
    cpufreq_period_ms: int
    buddyinfo_period_ms: int
    diskstat_period_ms: int
    psi_period_ms: int
    def __init__(
        self,
        meminfo_period_ms: _Optional[int] = ...,
        meminfo_counters: _Optional[_Iterable[_Union[MeminfoCounters, str]]] = ...,
        vmstat_period_ms: _Optional[int] = ...,
        vmstat_counters: _Optional[_Iterable[_Union[VmstatCounters, str]]] = ...,
        stat_period_ms: _Optional[int] = ...,
        stat_counters: _Optional[_Iterable[_Union[SysStatsConfig.StatCounters, str]]] = ...,
        devfreq_period_ms: _Optional[int] = ...,
        cpufreq_period_ms: _Optional[int] = ...,
        buddyinfo_period_ms: _Optional[int] = ...,
        diskstat_period_ms: _Optional[int] = ...,
        psi_period_ms: _Optional[int] = ...,
    ) -> None: ...

class SystemInfoConfig(_message.Message):
    __slots__ = ()
    def __init__(self) -> None: ...

class TestConfig(_message.Message):
    __slots__ = (
        "message_count",
        "max_messages_per_second",
        "seed",
        "message_size",
        "send_batch_on_register",
        "dummy_fields",
    )

    class DummyFields(_message.Message):
        __slots__ = (
            "field_uint32",
            "field_int32",
            "field_uint64",
            "field_int64",
            "field_fixed64",
            "field_sfixed64",
            "field_fixed32",
            "field_sfixed32",
            "field_double",
            "field_float",
            "field_sint64",
            "field_sint32",
            "field_string",
            "field_bytes",
        )
        FIELD_UINT32_FIELD_NUMBER: _ClassVar[int]
        FIELD_INT32_FIELD_NUMBER: _ClassVar[int]
        FIELD_UINT64_FIELD_NUMBER: _ClassVar[int]
        FIELD_INT64_FIELD_NUMBER: _ClassVar[int]
        FIELD_FIXED64_FIELD_NUMBER: _ClassVar[int]
        FIELD_SFIXED64_FIELD_NUMBER: _ClassVar[int]
        FIELD_FIXED32_FIELD_NUMBER: _ClassVar[int]
        FIELD_SFIXED32_FIELD_NUMBER: _ClassVar[int]
        FIELD_DOUBLE_FIELD_NUMBER: _ClassVar[int]
        FIELD_FLOAT_FIELD_NUMBER: _ClassVar[int]
        FIELD_SINT64_FIELD_NUMBER: _ClassVar[int]
        FIELD_SINT32_FIELD_NUMBER: _ClassVar[int]
        FIELD_STRING_FIELD_NUMBER: _ClassVar[int]
        FIELD_BYTES_FIELD_NUMBER: _ClassVar[int]
        field_uint32: int
        field_int32: int
        field_uint64: int
        field_int64: int
        field_fixed64: int
        field_sfixed64: int
        field_fixed32: int
        field_sfixed32: int
        field_double: float
        field_float: float
        field_sint64: int
        field_sint32: int
        field_string: str
        field_bytes: bytes
        def __init__(
            self,
            field_uint32: _Optional[int] = ...,
            field_int32: _Optional[int] = ...,
            field_uint64: _Optional[int] = ...,
            field_int64: _Optional[int] = ...,
            field_fixed64: _Optional[int] = ...,
            field_sfixed64: _Optional[int] = ...,
            field_fixed32: _Optional[int] = ...,
            field_sfixed32: _Optional[int] = ...,
            field_double: _Optional[float] = ...,
            field_float: _Optional[float] = ...,
            field_sint64: _Optional[int] = ...,
            field_sint32: _Optional[int] = ...,
            field_string: _Optional[str] = ...,
            field_bytes: _Optional[bytes] = ...,
        ) -> None: ...

    MESSAGE_COUNT_FIELD_NUMBER: _ClassVar[int]
    MAX_MESSAGES_PER_SECOND_FIELD_NUMBER: _ClassVar[int]
    SEED_FIELD_NUMBER: _ClassVar[int]
    MESSAGE_SIZE_FIELD_NUMBER: _ClassVar[int]
    SEND_BATCH_ON_REGISTER_FIELD_NUMBER: _ClassVar[int]
    DUMMY_FIELDS_FIELD_NUMBER: _ClassVar[int]
    message_count: int
    max_messages_per_second: int
    seed: int
    message_size: int
    send_batch_on_register: bool
    dummy_fields: TestConfig.DummyFields
    def __init__(
        self,
        message_count: _Optional[int] = ...,
        max_messages_per_second: _Optional[int] = ...,
        seed: _Optional[int] = ...,
        message_size: _Optional[int] = ...,
        send_batch_on_register: bool = ...,
        dummy_fields: _Optional[_Union[TestConfig.DummyFields, _Mapping]] = ...,
    ) -> None: ...

class TrackEventConfig(_message.Message):
    __slots__ = (
        "disabled_categories",
        "enabled_categories",
        "disabled_tags",
        "enabled_tags",
        "disable_incremental_timestamps",
        "timestamp_unit_multiplier",
        "filter_debug_annotations",
        "enable_thread_time_sampling",
        "filter_dynamic_event_names",
    )
    DISABLED_CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    ENABLED_CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    DISABLED_TAGS_FIELD_NUMBER: _ClassVar[int]
    ENABLED_TAGS_FIELD_NUMBER: _ClassVar[int]
    DISABLE_INCREMENTAL_TIMESTAMPS_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_UNIT_MULTIPLIER_FIELD_NUMBER: _ClassVar[int]
    FILTER_DEBUG_ANNOTATIONS_FIELD_NUMBER: _ClassVar[int]
    ENABLE_THREAD_TIME_SAMPLING_FIELD_NUMBER: _ClassVar[int]
    FILTER_DYNAMIC_EVENT_NAMES_FIELD_NUMBER: _ClassVar[int]
    disabled_categories: _containers.RepeatedScalarFieldContainer[str]
    enabled_categories: _containers.RepeatedScalarFieldContainer[str]
    disabled_tags: _containers.RepeatedScalarFieldContainer[str]
    enabled_tags: _containers.RepeatedScalarFieldContainer[str]
    disable_incremental_timestamps: bool
    timestamp_unit_multiplier: int
    filter_debug_annotations: bool
    enable_thread_time_sampling: bool
    filter_dynamic_event_names: bool
    def __init__(
        self,
        disabled_categories: _Optional[_Iterable[str]] = ...,
        enabled_categories: _Optional[_Iterable[str]] = ...,
        disabled_tags: _Optional[_Iterable[str]] = ...,
        enabled_tags: _Optional[_Iterable[str]] = ...,
        disable_incremental_timestamps: bool = ...,
        timestamp_unit_multiplier: _Optional[int] = ...,
        filter_debug_annotations: bool = ...,
        enable_thread_time_sampling: bool = ...,
        filter_dynamic_event_names: bool = ...,
    ) -> None: ...

class DataSourceConfig(_message.Message):
    __slots__ = (
        "name",
        "target_buffer",
        "trace_duration_ms",
        "prefer_suspend_clock_for_duration",
        "stop_timeout_ms",
        "enable_extra_guardrails",
        "session_initiator",
        "tracing_session_id",
        "ftrace_config",
        "inode_file_config",
        "process_stats_config",
        "sys_stats_config",
        "heapprofd_config",
        "java_hprof_config",
        "android_power_config",
        "android_log_config",
        "gpu_counter_config",
        "android_game_intervention_list_config",
        "packages_list_config",
        "perf_event_config",
        "vulkan_memory_config",
        "track_event_config",
        "android_polled_state_config",
        "android_system_property_config",
        "statsd_tracing_config",
        "system_info_config",
        "chrome_config",
        "v8_config",
        "interceptor_config",
        "network_packet_trace_config",
        "surfaceflinger_layers_config",
        "surfaceflinger_transactions_config",
        "android_sdk_sysprop_guard_config",
        "etw_config",
        "protolog_config",
        "legacy_config",
        "for_testing",
    )

    class SessionInitiator(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        SESSION_INITIATOR_UNSPECIFIED: _ClassVar[DataSourceConfig.SessionInitiator]
        SESSION_INITIATOR_TRUSTED_SYSTEM: _ClassVar[DataSourceConfig.SessionInitiator]

    SESSION_INITIATOR_UNSPECIFIED: DataSourceConfig.SessionInitiator
    SESSION_INITIATOR_TRUSTED_SYSTEM: DataSourceConfig.SessionInitiator
    NAME_FIELD_NUMBER: _ClassVar[int]
    TARGET_BUFFER_FIELD_NUMBER: _ClassVar[int]
    TRACE_DURATION_MS_FIELD_NUMBER: _ClassVar[int]
    PREFER_SUSPEND_CLOCK_FOR_DURATION_FIELD_NUMBER: _ClassVar[int]
    STOP_TIMEOUT_MS_FIELD_NUMBER: _ClassVar[int]
    ENABLE_EXTRA_GUARDRAILS_FIELD_NUMBER: _ClassVar[int]
    SESSION_INITIATOR_FIELD_NUMBER: _ClassVar[int]
    TRACING_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
    FTRACE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    INODE_FILE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    PROCESS_STATS_CONFIG_FIELD_NUMBER: _ClassVar[int]
    SYS_STATS_CONFIG_FIELD_NUMBER: _ClassVar[int]
    HEAPPROFD_CONFIG_FIELD_NUMBER: _ClassVar[int]
    JAVA_HPROF_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ANDROID_POWER_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ANDROID_LOG_CONFIG_FIELD_NUMBER: _ClassVar[int]
    GPU_COUNTER_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ANDROID_GAME_INTERVENTION_LIST_CONFIG_FIELD_NUMBER: _ClassVar[int]
    PACKAGES_LIST_CONFIG_FIELD_NUMBER: _ClassVar[int]
    PERF_EVENT_CONFIG_FIELD_NUMBER: _ClassVar[int]
    VULKAN_MEMORY_CONFIG_FIELD_NUMBER: _ClassVar[int]
    TRACK_EVENT_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ANDROID_POLLED_STATE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ANDROID_SYSTEM_PROPERTY_CONFIG_FIELD_NUMBER: _ClassVar[int]
    STATSD_TRACING_CONFIG_FIELD_NUMBER: _ClassVar[int]
    SYSTEM_INFO_CONFIG_FIELD_NUMBER: _ClassVar[int]
    CHROME_CONFIG_FIELD_NUMBER: _ClassVar[int]
    V8_CONFIG_FIELD_NUMBER: _ClassVar[int]
    INTERCEPTOR_CONFIG_FIELD_NUMBER: _ClassVar[int]
    NETWORK_PACKET_TRACE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    SURFACEFLINGER_LAYERS_CONFIG_FIELD_NUMBER: _ClassVar[int]
    SURFACEFLINGER_TRANSACTIONS_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ANDROID_SDK_SYSPROP_GUARD_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ETW_CONFIG_FIELD_NUMBER: _ClassVar[int]
    PROTOLOG_CONFIG_FIELD_NUMBER: _ClassVar[int]
    LEGACY_CONFIG_FIELD_NUMBER: _ClassVar[int]
    FOR_TESTING_FIELD_NUMBER: _ClassVar[int]
    name: str
    target_buffer: int
    trace_duration_ms: int
    prefer_suspend_clock_for_duration: bool
    stop_timeout_ms: int
    enable_extra_guardrails: bool
    session_initiator: DataSourceConfig.SessionInitiator
    tracing_session_id: int
    ftrace_config: FtraceConfig
    inode_file_config: InodeFileConfig
    process_stats_config: ProcessStatsConfig
    sys_stats_config: SysStatsConfig
    heapprofd_config: HeapprofdConfig
    java_hprof_config: JavaHprofConfig
    android_power_config: AndroidPowerConfig
    android_log_config: AndroidLogConfig
    gpu_counter_config: GpuCounterConfig
    android_game_intervention_list_config: AndroidGameInterventionListConfig
    packages_list_config: PackagesListConfig
    perf_event_config: PerfEventConfig
    vulkan_memory_config: VulkanMemoryConfig
    track_event_config: TrackEventConfig
    android_polled_state_config: AndroidPolledStateConfig
    android_system_property_config: AndroidSystemPropertyConfig
    statsd_tracing_config: StatsdTracingConfig
    system_info_config: SystemInfoConfig
    chrome_config: ChromeConfig
    v8_config: V8Config
    interceptor_config: InterceptorConfig
    network_packet_trace_config: NetworkPacketTraceConfig
    surfaceflinger_layers_config: SurfaceFlingerLayersConfig
    surfaceflinger_transactions_config: SurfaceFlingerTransactionsConfig
    android_sdk_sysprop_guard_config: AndroidSdkSyspropGuardConfig
    etw_config: EtwConfig
    protolog_config: ProtoLogConfig
    legacy_config: str
    for_testing: TestConfig
    def __init__(
        self,
        name: _Optional[str] = ...,
        target_buffer: _Optional[int] = ...,
        trace_duration_ms: _Optional[int] = ...,
        prefer_suspend_clock_for_duration: bool = ...,
        stop_timeout_ms: _Optional[int] = ...,
        enable_extra_guardrails: bool = ...,
        session_initiator: _Optional[_Union[DataSourceConfig.SessionInitiator, str]] = ...,
        tracing_session_id: _Optional[int] = ...,
        ftrace_config: _Optional[_Union[FtraceConfig, _Mapping]] = ...,
        inode_file_config: _Optional[_Union[InodeFileConfig, _Mapping]] = ...,
        process_stats_config: _Optional[_Union[ProcessStatsConfig, _Mapping]] = ...,
        sys_stats_config: _Optional[_Union[SysStatsConfig, _Mapping]] = ...,
        heapprofd_config: _Optional[_Union[HeapprofdConfig, _Mapping]] = ...,
        java_hprof_config: _Optional[_Union[JavaHprofConfig, _Mapping]] = ...,
        android_power_config: _Optional[_Union[AndroidPowerConfig, _Mapping]] = ...,
        android_log_config: _Optional[_Union[AndroidLogConfig, _Mapping]] = ...,
        gpu_counter_config: _Optional[_Union[GpuCounterConfig, _Mapping]] = ...,
        android_game_intervention_list_config: _Optional[_Union[AndroidGameInterventionListConfig, _Mapping]] = ...,
        packages_list_config: _Optional[_Union[PackagesListConfig, _Mapping]] = ...,
        perf_event_config: _Optional[_Union[PerfEventConfig, _Mapping]] = ...,
        vulkan_memory_config: _Optional[_Union[VulkanMemoryConfig, _Mapping]] = ...,
        track_event_config: _Optional[_Union[TrackEventConfig, _Mapping]] = ...,
        android_polled_state_config: _Optional[_Union[AndroidPolledStateConfig, _Mapping]] = ...,
        android_system_property_config: _Optional[_Union[AndroidSystemPropertyConfig, _Mapping]] = ...,
        statsd_tracing_config: _Optional[_Union[StatsdTracingConfig, _Mapping]] = ...,
        system_info_config: _Optional[_Union[SystemInfoConfig, _Mapping]] = ...,
        chrome_config: _Optional[_Union[ChromeConfig, _Mapping]] = ...,
        v8_config: _Optional[_Union[V8Config, _Mapping]] = ...,
        interceptor_config: _Optional[_Union[InterceptorConfig, _Mapping]] = ...,
        network_packet_trace_config: _Optional[_Union[NetworkPacketTraceConfig, _Mapping]] = ...,
        surfaceflinger_layers_config: _Optional[_Union[SurfaceFlingerLayersConfig, _Mapping]] = ...,
        surfaceflinger_transactions_config: _Optional[_Union[SurfaceFlingerTransactionsConfig, _Mapping]] = ...,
        android_sdk_sysprop_guard_config: _Optional[_Union[AndroidSdkSyspropGuardConfig, _Mapping]] = ...,
        etw_config: _Optional[_Union[EtwConfig, _Mapping]] = ...,
        protolog_config: _Optional[_Union[ProtoLogConfig, _Mapping]] = ...,
        legacy_config: _Optional[str] = ...,
        for_testing: _Optional[_Union[TestConfig, _Mapping]] = ...,
    ) -> None: ...

class TraceConfig(_message.Message):
    __slots__ = (
        "buffers",
        "data_sources",
        "builtin_data_sources",
        "duration_ms",
        "prefer_suspend_clock_for_duration",
        "enable_extra_guardrails",
        "lockdown_mode",
        "producers",
        "statsd_metadata",
        "write_into_file",
        "output_path",
        "file_write_period_ms",
        "max_file_size_bytes",
        "guardrail_overrides",
        "deferred_start",
        "flush_period_ms",
        "flush_timeout_ms",
        "data_source_stop_timeout_ms",
        "notify_traceur",
        "bugreport_score",
        "bugreport_filename",
        "trigger_config",
        "activate_triggers",
        "incremental_state_config",
        "allow_user_build_tracing",
        "unique_session_name",
        "compression_type",
        "incident_report_config",
        "statsd_logging",
        "trace_uuid_msb",
        "trace_uuid_lsb",
        "trace_filter",
        "android_report_config",
        "cmd_trace_start_delay",
    )

    class LockdownModeOperation(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        LOCKDOWN_UNCHANGED: _ClassVar[TraceConfig.LockdownModeOperation]
        LOCKDOWN_CLEAR: _ClassVar[TraceConfig.LockdownModeOperation]
        LOCKDOWN_SET: _ClassVar[TraceConfig.LockdownModeOperation]

    LOCKDOWN_UNCHANGED: TraceConfig.LockdownModeOperation
    LOCKDOWN_CLEAR: TraceConfig.LockdownModeOperation
    LOCKDOWN_SET: TraceConfig.LockdownModeOperation

    class CompressionType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        COMPRESSION_TYPE_UNSPECIFIED: _ClassVar[TraceConfig.CompressionType]
        COMPRESSION_TYPE_DEFLATE: _ClassVar[TraceConfig.CompressionType]

    COMPRESSION_TYPE_UNSPECIFIED: TraceConfig.CompressionType
    COMPRESSION_TYPE_DEFLATE: TraceConfig.CompressionType

    class StatsdLogging(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        STATSD_LOGGING_UNSPECIFIED: _ClassVar[TraceConfig.StatsdLogging]
        STATSD_LOGGING_ENABLED: _ClassVar[TraceConfig.StatsdLogging]
        STATSD_LOGGING_DISABLED: _ClassVar[TraceConfig.StatsdLogging]

    STATSD_LOGGING_UNSPECIFIED: TraceConfig.StatsdLogging
    STATSD_LOGGING_ENABLED: TraceConfig.StatsdLogging
    STATSD_LOGGING_DISABLED: TraceConfig.StatsdLogging

    class BufferConfig(_message.Message):
        __slots__ = ("size_kb", "fill_policy", "transfer_on_clone", "clear_before_clone")

        class FillPolicy(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            UNSPECIFIED: _ClassVar[TraceConfig.BufferConfig.FillPolicy]
            RING_BUFFER: _ClassVar[TraceConfig.BufferConfig.FillPolicy]
            DISCARD: _ClassVar[TraceConfig.BufferConfig.FillPolicy]

        UNSPECIFIED: TraceConfig.BufferConfig.FillPolicy
        RING_BUFFER: TraceConfig.BufferConfig.FillPolicy
        DISCARD: TraceConfig.BufferConfig.FillPolicy
        SIZE_KB_FIELD_NUMBER: _ClassVar[int]
        FILL_POLICY_FIELD_NUMBER: _ClassVar[int]
        TRANSFER_ON_CLONE_FIELD_NUMBER: _ClassVar[int]
        CLEAR_BEFORE_CLONE_FIELD_NUMBER: _ClassVar[int]
        size_kb: int
        fill_policy: TraceConfig.BufferConfig.FillPolicy
        transfer_on_clone: bool
        clear_before_clone: bool
        def __init__(
            self,
            size_kb: _Optional[int] = ...,
            fill_policy: _Optional[_Union[TraceConfig.BufferConfig.FillPolicy, str]] = ...,
            transfer_on_clone: bool = ...,
            clear_before_clone: bool = ...,
        ) -> None: ...

    class DataSource(_message.Message):
        __slots__ = ("config", "producer_name_filter", "producer_name_regex_filter")
        CONFIG_FIELD_NUMBER: _ClassVar[int]
        PRODUCER_NAME_FILTER_FIELD_NUMBER: _ClassVar[int]
        PRODUCER_NAME_REGEX_FILTER_FIELD_NUMBER: _ClassVar[int]
        config: DataSourceConfig
        producer_name_filter: _containers.RepeatedScalarFieldContainer[str]
        producer_name_regex_filter: _containers.RepeatedScalarFieldContainer[str]
        def __init__(
            self,
            config: _Optional[_Union[DataSourceConfig, _Mapping]] = ...,
            producer_name_filter: _Optional[_Iterable[str]] = ...,
            producer_name_regex_filter: _Optional[_Iterable[str]] = ...,
        ) -> None: ...

    class BuiltinDataSource(_message.Message):
        __slots__ = (
            "disable_clock_snapshotting",
            "disable_trace_config",
            "disable_system_info",
            "disable_service_events",
            "primary_trace_clock",
            "snapshot_interval_ms",
            "prefer_suspend_clock_for_snapshot",
            "disable_chunk_usage_histograms",
        )
        DISABLE_CLOCK_SNAPSHOTTING_FIELD_NUMBER: _ClassVar[int]
        DISABLE_TRACE_CONFIG_FIELD_NUMBER: _ClassVar[int]
        DISABLE_SYSTEM_INFO_FIELD_NUMBER: _ClassVar[int]
        DISABLE_SERVICE_EVENTS_FIELD_NUMBER: _ClassVar[int]
        PRIMARY_TRACE_CLOCK_FIELD_NUMBER: _ClassVar[int]
        SNAPSHOT_INTERVAL_MS_FIELD_NUMBER: _ClassVar[int]
        PREFER_SUSPEND_CLOCK_FOR_SNAPSHOT_FIELD_NUMBER: _ClassVar[int]
        DISABLE_CHUNK_USAGE_HISTOGRAMS_FIELD_NUMBER: _ClassVar[int]
        disable_clock_snapshotting: bool
        disable_trace_config: bool
        disable_system_info: bool
        disable_service_events: bool
        primary_trace_clock: BuiltinClock
        snapshot_interval_ms: int
        prefer_suspend_clock_for_snapshot: bool
        disable_chunk_usage_histograms: bool
        def __init__(
            self,
            disable_clock_snapshotting: bool = ...,
            disable_trace_config: bool = ...,
            disable_system_info: bool = ...,
            disable_service_events: bool = ...,
            primary_trace_clock: _Optional[_Union[BuiltinClock, str]] = ...,
            snapshot_interval_ms: _Optional[int] = ...,
            prefer_suspend_clock_for_snapshot: bool = ...,
            disable_chunk_usage_histograms: bool = ...,
        ) -> None: ...

    class ProducerConfig(_message.Message):
        __slots__ = ("producer_name", "shm_size_kb", "page_size_kb")
        PRODUCER_NAME_FIELD_NUMBER: _ClassVar[int]
        SHM_SIZE_KB_FIELD_NUMBER: _ClassVar[int]
        PAGE_SIZE_KB_FIELD_NUMBER: _ClassVar[int]
        producer_name: str
        shm_size_kb: int
        page_size_kb: int
        def __init__(
            self,
            producer_name: _Optional[str] = ...,
            shm_size_kb: _Optional[int] = ...,
            page_size_kb: _Optional[int] = ...,
        ) -> None: ...

    class StatsdMetadata(_message.Message):
        __slots__ = (
            "triggering_alert_id",
            "triggering_config_uid",
            "triggering_config_id",
            "triggering_subscription_id",
        )
        TRIGGERING_ALERT_ID_FIELD_NUMBER: _ClassVar[int]
        TRIGGERING_CONFIG_UID_FIELD_NUMBER: _ClassVar[int]
        TRIGGERING_CONFIG_ID_FIELD_NUMBER: _ClassVar[int]
        TRIGGERING_SUBSCRIPTION_ID_FIELD_NUMBER: _ClassVar[int]
        triggering_alert_id: int
        triggering_config_uid: int
        triggering_config_id: int
        triggering_subscription_id: int
        def __init__(
            self,
            triggering_alert_id: _Optional[int] = ...,
            triggering_config_uid: _Optional[int] = ...,
            triggering_config_id: _Optional[int] = ...,
            triggering_subscription_id: _Optional[int] = ...,
        ) -> None: ...

    class GuardrailOverrides(_message.Message):
        __slots__ = ("max_upload_per_day_bytes", "max_tracing_buffer_size_kb")
        MAX_UPLOAD_PER_DAY_BYTES_FIELD_NUMBER: _ClassVar[int]
        MAX_TRACING_BUFFER_SIZE_KB_FIELD_NUMBER: _ClassVar[int]
        max_upload_per_day_bytes: int
        max_tracing_buffer_size_kb: int
        def __init__(
            self, max_upload_per_day_bytes: _Optional[int] = ..., max_tracing_buffer_size_kb: _Optional[int] = ...
        ) -> None: ...

    class TriggerConfig(_message.Message):
        __slots__ = ("trigger_mode", "use_clone_snapshot_if_available", "triggers", "trigger_timeout_ms")

        class TriggerMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            UNSPECIFIED: _ClassVar[TraceConfig.TriggerConfig.TriggerMode]
            START_TRACING: _ClassVar[TraceConfig.TriggerConfig.TriggerMode]
            STOP_TRACING: _ClassVar[TraceConfig.TriggerConfig.TriggerMode]
            CLONE_SNAPSHOT: _ClassVar[TraceConfig.TriggerConfig.TriggerMode]

        UNSPECIFIED: TraceConfig.TriggerConfig.TriggerMode
        START_TRACING: TraceConfig.TriggerConfig.TriggerMode
        STOP_TRACING: TraceConfig.TriggerConfig.TriggerMode
        CLONE_SNAPSHOT: TraceConfig.TriggerConfig.TriggerMode

        class Trigger(_message.Message):
            __slots__ = ("name", "producer_name_regex", "stop_delay_ms", "max_per_24_h", "skip_probability")
            NAME_FIELD_NUMBER: _ClassVar[int]
            PRODUCER_NAME_REGEX_FIELD_NUMBER: _ClassVar[int]
            STOP_DELAY_MS_FIELD_NUMBER: _ClassVar[int]
            MAX_PER_24_H_FIELD_NUMBER: _ClassVar[int]
            SKIP_PROBABILITY_FIELD_NUMBER: _ClassVar[int]
            name: str
            producer_name_regex: str
            stop_delay_ms: int
            max_per_24_h: int
            skip_probability: float
            def __init__(
                self,
                name: _Optional[str] = ...,
                producer_name_regex: _Optional[str] = ...,
                stop_delay_ms: _Optional[int] = ...,
                max_per_24_h: _Optional[int] = ...,
                skip_probability: _Optional[float] = ...,
            ) -> None: ...

        TRIGGER_MODE_FIELD_NUMBER: _ClassVar[int]
        USE_CLONE_SNAPSHOT_IF_AVAILABLE_FIELD_NUMBER: _ClassVar[int]
        TRIGGERS_FIELD_NUMBER: _ClassVar[int]
        TRIGGER_TIMEOUT_MS_FIELD_NUMBER: _ClassVar[int]
        trigger_mode: TraceConfig.TriggerConfig.TriggerMode
        use_clone_snapshot_if_available: bool
        triggers: _containers.RepeatedCompositeFieldContainer[TraceConfig.TriggerConfig.Trigger]
        trigger_timeout_ms: int
        def __init__(
            self,
            trigger_mode: _Optional[_Union[TraceConfig.TriggerConfig.TriggerMode, str]] = ...,
            use_clone_snapshot_if_available: bool = ...,
            triggers: _Optional[_Iterable[_Union[TraceConfig.TriggerConfig.Trigger, _Mapping]]] = ...,
            trigger_timeout_ms: _Optional[int] = ...,
        ) -> None: ...

    class IncrementalStateConfig(_message.Message):
        __slots__ = ("clear_period_ms",)
        CLEAR_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
        clear_period_ms: int
        def __init__(self, clear_period_ms: _Optional[int] = ...) -> None: ...

    class IncidentReportConfig(_message.Message):
        __slots__ = ("destination_package", "destination_class", "privacy_level", "skip_incidentd", "skip_dropbox")
        DESTINATION_PACKAGE_FIELD_NUMBER: _ClassVar[int]
        DESTINATION_CLASS_FIELD_NUMBER: _ClassVar[int]
        PRIVACY_LEVEL_FIELD_NUMBER: _ClassVar[int]
        SKIP_INCIDENTD_FIELD_NUMBER: _ClassVar[int]
        SKIP_DROPBOX_FIELD_NUMBER: _ClassVar[int]
        destination_package: str
        destination_class: str
        privacy_level: int
        skip_incidentd: bool
        skip_dropbox: bool
        def __init__(
            self,
            destination_package: _Optional[str] = ...,
            destination_class: _Optional[str] = ...,
            privacy_level: _Optional[int] = ...,
            skip_incidentd: bool = ...,
            skip_dropbox: bool = ...,
        ) -> None: ...

    class TraceFilter(_message.Message):
        __slots__ = ("bytecode", "bytecode_v2", "string_filter_chain")

        class StringFilterPolicy(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            SFP_UNSPECIFIED: _ClassVar[TraceConfig.TraceFilter.StringFilterPolicy]
            SFP_MATCH_REDACT_GROUPS: _ClassVar[TraceConfig.TraceFilter.StringFilterPolicy]
            SFP_ATRACE_MATCH_REDACT_GROUPS: _ClassVar[TraceConfig.TraceFilter.StringFilterPolicy]
            SFP_MATCH_BREAK: _ClassVar[TraceConfig.TraceFilter.StringFilterPolicy]
            SFP_ATRACE_MATCH_BREAK: _ClassVar[TraceConfig.TraceFilter.StringFilterPolicy]
            SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS: _ClassVar[TraceConfig.TraceFilter.StringFilterPolicy]

        SFP_UNSPECIFIED: TraceConfig.TraceFilter.StringFilterPolicy
        SFP_MATCH_REDACT_GROUPS: TraceConfig.TraceFilter.StringFilterPolicy
        SFP_ATRACE_MATCH_REDACT_GROUPS: TraceConfig.TraceFilter.StringFilterPolicy
        SFP_MATCH_BREAK: TraceConfig.TraceFilter.StringFilterPolicy
        SFP_ATRACE_MATCH_BREAK: TraceConfig.TraceFilter.StringFilterPolicy
        SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS: TraceConfig.TraceFilter.StringFilterPolicy

        class StringFilterRule(_message.Message):
            __slots__ = ("policy", "regex_pattern", "atrace_payload_starts_with")
            POLICY_FIELD_NUMBER: _ClassVar[int]
            REGEX_PATTERN_FIELD_NUMBER: _ClassVar[int]
            ATRACE_PAYLOAD_STARTS_WITH_FIELD_NUMBER: _ClassVar[int]
            policy: TraceConfig.TraceFilter.StringFilterPolicy
            regex_pattern: str
            atrace_payload_starts_with: str
            def __init__(
                self,
                policy: _Optional[_Union[TraceConfig.TraceFilter.StringFilterPolicy, str]] = ...,
                regex_pattern: _Optional[str] = ...,
                atrace_payload_starts_with: _Optional[str] = ...,
            ) -> None: ...

        class StringFilterChain(_message.Message):
            __slots__ = ("rules",)
            RULES_FIELD_NUMBER: _ClassVar[int]
            rules: _containers.RepeatedCompositeFieldContainer[TraceConfig.TraceFilter.StringFilterRule]
            def __init__(
                self, rules: _Optional[_Iterable[_Union[TraceConfig.TraceFilter.StringFilterRule, _Mapping]]] = ...
            ) -> None: ...

        BYTECODE_FIELD_NUMBER: _ClassVar[int]
        BYTECODE_V2_FIELD_NUMBER: _ClassVar[int]
        STRING_FILTER_CHAIN_FIELD_NUMBER: _ClassVar[int]
        bytecode: bytes
        bytecode_v2: bytes
        string_filter_chain: TraceConfig.TraceFilter.StringFilterChain
        def __init__(
            self,
            bytecode: _Optional[bytes] = ...,
            bytecode_v2: _Optional[bytes] = ...,
            string_filter_chain: _Optional[_Union[TraceConfig.TraceFilter.StringFilterChain, _Mapping]] = ...,
        ) -> None: ...

    class AndroidReportConfig(_message.Message):
        __slots__ = (
            "reporter_service_package",
            "reporter_service_class",
            "skip_report",
            "use_pipe_in_framework_for_testing",
        )
        REPORTER_SERVICE_PACKAGE_FIELD_NUMBER: _ClassVar[int]
        REPORTER_SERVICE_CLASS_FIELD_NUMBER: _ClassVar[int]
        SKIP_REPORT_FIELD_NUMBER: _ClassVar[int]
        USE_PIPE_IN_FRAMEWORK_FOR_TESTING_FIELD_NUMBER: _ClassVar[int]
        reporter_service_package: str
        reporter_service_class: str
        skip_report: bool
        use_pipe_in_framework_for_testing: bool
        def __init__(
            self,
            reporter_service_package: _Optional[str] = ...,
            reporter_service_class: _Optional[str] = ...,
            skip_report: bool = ...,
            use_pipe_in_framework_for_testing: bool = ...,
        ) -> None: ...

    class CmdTraceStartDelay(_message.Message):
        __slots__ = ("min_delay_ms", "max_delay_ms")
        MIN_DELAY_MS_FIELD_NUMBER: _ClassVar[int]
        MAX_DELAY_MS_FIELD_NUMBER: _ClassVar[int]
        min_delay_ms: int
        max_delay_ms: int
        def __init__(self, min_delay_ms: _Optional[int] = ..., max_delay_ms: _Optional[int] = ...) -> None: ...

    BUFFERS_FIELD_NUMBER: _ClassVar[int]
    DATA_SOURCES_FIELD_NUMBER: _ClassVar[int]
    BUILTIN_DATA_SOURCES_FIELD_NUMBER: _ClassVar[int]
    DURATION_MS_FIELD_NUMBER: _ClassVar[int]
    PREFER_SUSPEND_CLOCK_FOR_DURATION_FIELD_NUMBER: _ClassVar[int]
    ENABLE_EXTRA_GUARDRAILS_FIELD_NUMBER: _ClassVar[int]
    LOCKDOWN_MODE_FIELD_NUMBER: _ClassVar[int]
    PRODUCERS_FIELD_NUMBER: _ClassVar[int]
    STATSD_METADATA_FIELD_NUMBER: _ClassVar[int]
    WRITE_INTO_FILE_FIELD_NUMBER: _ClassVar[int]
    OUTPUT_PATH_FIELD_NUMBER: _ClassVar[int]
    FILE_WRITE_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    MAX_FILE_SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
    GUARDRAIL_OVERRIDES_FIELD_NUMBER: _ClassVar[int]
    DEFERRED_START_FIELD_NUMBER: _ClassVar[int]
    FLUSH_PERIOD_MS_FIELD_NUMBER: _ClassVar[int]
    FLUSH_TIMEOUT_MS_FIELD_NUMBER: _ClassVar[int]
    DATA_SOURCE_STOP_TIMEOUT_MS_FIELD_NUMBER: _ClassVar[int]
    NOTIFY_TRACEUR_FIELD_NUMBER: _ClassVar[int]
    BUGREPORT_SCORE_FIELD_NUMBER: _ClassVar[int]
    BUGREPORT_FILENAME_FIELD_NUMBER: _ClassVar[int]
    TRIGGER_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ACTIVATE_TRIGGERS_FIELD_NUMBER: _ClassVar[int]
    INCREMENTAL_STATE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ALLOW_USER_BUILD_TRACING_FIELD_NUMBER: _ClassVar[int]
    UNIQUE_SESSION_NAME_FIELD_NUMBER: _ClassVar[int]
    COMPRESSION_TYPE_FIELD_NUMBER: _ClassVar[int]
    INCIDENT_REPORT_CONFIG_FIELD_NUMBER: _ClassVar[int]
    STATSD_LOGGING_FIELD_NUMBER: _ClassVar[int]
    TRACE_UUID_MSB_FIELD_NUMBER: _ClassVar[int]
    TRACE_UUID_LSB_FIELD_NUMBER: _ClassVar[int]
    TRACE_FILTER_FIELD_NUMBER: _ClassVar[int]
    ANDROID_REPORT_CONFIG_FIELD_NUMBER: _ClassVar[int]
    CMD_TRACE_START_DELAY_FIELD_NUMBER: _ClassVar[int]
    buffers: _containers.RepeatedCompositeFieldContainer[TraceConfig.BufferConfig]
    data_sources: _containers.RepeatedCompositeFieldContainer[TraceConfig.DataSource]
    builtin_data_sources: TraceConfig.BuiltinDataSource
    duration_ms: int
    prefer_suspend_clock_for_duration: bool
    enable_extra_guardrails: bool
    lockdown_mode: TraceConfig.LockdownModeOperation
    producers: _containers.RepeatedCompositeFieldContainer[TraceConfig.ProducerConfig]
    statsd_metadata: TraceConfig.StatsdMetadata
    write_into_file: bool
    output_path: str
    file_write_period_ms: int
    max_file_size_bytes: int
    guardrail_overrides: TraceConfig.GuardrailOverrides
    deferred_start: bool
    flush_period_ms: int
    flush_timeout_ms: int
    data_source_stop_timeout_ms: int
    notify_traceur: bool
    bugreport_score: int
    bugreport_filename: str
    trigger_config: TraceConfig.TriggerConfig
    activate_triggers: _containers.RepeatedScalarFieldContainer[str]
    incremental_state_config: TraceConfig.IncrementalStateConfig
    allow_user_build_tracing: bool
    unique_session_name: str
    compression_type: TraceConfig.CompressionType
    incident_report_config: TraceConfig.IncidentReportConfig
    statsd_logging: TraceConfig.StatsdLogging
    trace_uuid_msb: int
    trace_uuid_lsb: int
    trace_filter: TraceConfig.TraceFilter
    android_report_config: TraceConfig.AndroidReportConfig
    cmd_trace_start_delay: TraceConfig.CmdTraceStartDelay
    def __init__(
        self,
        buffers: _Optional[_Iterable[_Union[TraceConfig.BufferConfig, _Mapping]]] = ...,
        data_sources: _Optional[_Iterable[_Union[TraceConfig.DataSource, _Mapping]]] = ...,
        builtin_data_sources: _Optional[_Union[TraceConfig.BuiltinDataSource, _Mapping]] = ...,
        duration_ms: _Optional[int] = ...,
        prefer_suspend_clock_for_duration: bool = ...,
        enable_extra_guardrails: bool = ...,
        lockdown_mode: _Optional[_Union[TraceConfig.LockdownModeOperation, str]] = ...,
        producers: _Optional[_Iterable[_Union[TraceConfig.ProducerConfig, _Mapping]]] = ...,
        statsd_metadata: _Optional[_Union[TraceConfig.StatsdMetadata, _Mapping]] = ...,
        write_into_file: bool = ...,
        output_path: _Optional[str] = ...,
        file_write_period_ms: _Optional[int] = ...,
        max_file_size_bytes: _Optional[int] = ...,
        guardrail_overrides: _Optional[_Union[TraceConfig.GuardrailOverrides, _Mapping]] = ...,
        deferred_start: bool = ...,
        flush_period_ms: _Optional[int] = ...,
        flush_timeout_ms: _Optional[int] = ...,
        data_source_stop_timeout_ms: _Optional[int] = ...,
        notify_traceur: bool = ...,
        bugreport_score: _Optional[int] = ...,
        bugreport_filename: _Optional[str] = ...,
        trigger_config: _Optional[_Union[TraceConfig.TriggerConfig, _Mapping]] = ...,
        activate_triggers: _Optional[_Iterable[str]] = ...,
        incremental_state_config: _Optional[_Union[TraceConfig.IncrementalStateConfig, _Mapping]] = ...,
        allow_user_build_tracing: bool = ...,
        unique_session_name: _Optional[str] = ...,
        compression_type: _Optional[_Union[TraceConfig.CompressionType, str]] = ...,
        incident_report_config: _Optional[_Union[TraceConfig.IncidentReportConfig, _Mapping]] = ...,
        statsd_logging: _Optional[_Union[TraceConfig.StatsdLogging, str]] = ...,
        trace_uuid_msb: _Optional[int] = ...,
        trace_uuid_lsb: _Optional[int] = ...,
        trace_filter: _Optional[_Union[TraceConfig.TraceFilter, _Mapping]] = ...,
        android_report_config: _Optional[_Union[TraceConfig.AndroidReportConfig, _Mapping]] = ...,
        cmd_trace_start_delay: _Optional[_Union[TraceConfig.CmdTraceStartDelay, _Mapping]] = ...,
    ) -> None: ...

class TraceStats(_message.Message):
    __slots__ = (
        "buffer_stats",
        "chunk_payload_histogram_def",
        "writer_stats",
        "producers_connected",
        "producers_seen",
        "data_sources_registered",
        "data_sources_seen",
        "tracing_sessions",
        "total_buffers",
        "chunks_discarded",
        "patches_discarded",
        "invalid_packets",
        "filter_stats",
        "flushes_requested",
        "flushes_succeeded",
        "flushes_failed",
        "final_flush_outcome",
    )

    class FinalFlushOutcome(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        FINAL_FLUSH_UNSPECIFIED: _ClassVar[TraceStats.FinalFlushOutcome]
        FINAL_FLUSH_SUCCEEDED: _ClassVar[TraceStats.FinalFlushOutcome]
        FINAL_FLUSH_FAILED: _ClassVar[TraceStats.FinalFlushOutcome]

    FINAL_FLUSH_UNSPECIFIED: TraceStats.FinalFlushOutcome
    FINAL_FLUSH_SUCCEEDED: TraceStats.FinalFlushOutcome
    FINAL_FLUSH_FAILED: TraceStats.FinalFlushOutcome

    class BufferStats(_message.Message):
        __slots__ = (
            "buffer_size",
            "bytes_written",
            "bytes_overwritten",
            "bytes_read",
            "padding_bytes_written",
            "padding_bytes_cleared",
            "chunks_written",
            "chunks_rewritten",
            "chunks_overwritten",
            "chunks_discarded",
            "chunks_read",
            "chunks_committed_out_of_order",
            "write_wrap_count",
            "patches_succeeded",
            "patches_failed",
            "readaheads_succeeded",
            "readaheads_failed",
            "abi_violations",
            "trace_writer_packet_loss",
        )
        BUFFER_SIZE_FIELD_NUMBER: _ClassVar[int]
        BYTES_WRITTEN_FIELD_NUMBER: _ClassVar[int]
        BYTES_OVERWRITTEN_FIELD_NUMBER: _ClassVar[int]
        BYTES_READ_FIELD_NUMBER: _ClassVar[int]
        PADDING_BYTES_WRITTEN_FIELD_NUMBER: _ClassVar[int]
        PADDING_BYTES_CLEARED_FIELD_NUMBER: _ClassVar[int]
        CHUNKS_WRITTEN_FIELD_NUMBER: _ClassVar[int]
        CHUNKS_REWRITTEN_FIELD_NUMBER: _ClassVar[int]
        CHUNKS_OVERWRITTEN_FIELD_NUMBER: _ClassVar[int]
        CHUNKS_DISCARDED_FIELD_NUMBER: _ClassVar[int]
        CHUNKS_READ_FIELD_NUMBER: _ClassVar[int]
        CHUNKS_COMMITTED_OUT_OF_ORDER_FIELD_NUMBER: _ClassVar[int]
        WRITE_WRAP_COUNT_FIELD_NUMBER: _ClassVar[int]
        PATCHES_SUCCEEDED_FIELD_NUMBER: _ClassVar[int]
        PATCHES_FAILED_FIELD_NUMBER: _ClassVar[int]
        READAHEADS_SUCCEEDED_FIELD_NUMBER: _ClassVar[int]
        READAHEADS_FAILED_FIELD_NUMBER: _ClassVar[int]
        ABI_VIOLATIONS_FIELD_NUMBER: _ClassVar[int]
        TRACE_WRITER_PACKET_LOSS_FIELD_NUMBER: _ClassVar[int]
        buffer_size: int
        bytes_written: int
        bytes_overwritten: int
        bytes_read: int
        padding_bytes_written: int
        padding_bytes_cleared: int
        chunks_written: int
        chunks_rewritten: int
        chunks_overwritten: int
        chunks_discarded: int
        chunks_read: int
        chunks_committed_out_of_order: int
        write_wrap_count: int
        patches_succeeded: int
        patches_failed: int
        readaheads_succeeded: int
        readaheads_failed: int
        abi_violations: int
        trace_writer_packet_loss: int
        def __init__(
            self,
            buffer_size: _Optional[int] = ...,
            bytes_written: _Optional[int] = ...,
            bytes_overwritten: _Optional[int] = ...,
            bytes_read: _Optional[int] = ...,
            padding_bytes_written: _Optional[int] = ...,
            padding_bytes_cleared: _Optional[int] = ...,
            chunks_written: _Optional[int] = ...,
            chunks_rewritten: _Optional[int] = ...,
            chunks_overwritten: _Optional[int] = ...,
            chunks_discarded: _Optional[int] = ...,
            chunks_read: _Optional[int] = ...,
            chunks_committed_out_of_order: _Optional[int] = ...,
            write_wrap_count: _Optional[int] = ...,
            patches_succeeded: _Optional[int] = ...,
            patches_failed: _Optional[int] = ...,
            readaheads_succeeded: _Optional[int] = ...,
            readaheads_failed: _Optional[int] = ...,
            abi_violations: _Optional[int] = ...,
            trace_writer_packet_loss: _Optional[int] = ...,
        ) -> None: ...

    class WriterStats(_message.Message):
        __slots__ = ("sequence_id", "buffer", "chunk_payload_histogram_counts", "chunk_payload_histogram_sum")
        SEQUENCE_ID_FIELD_NUMBER: _ClassVar[int]
        BUFFER_FIELD_NUMBER: _ClassVar[int]
        CHUNK_PAYLOAD_HISTOGRAM_COUNTS_FIELD_NUMBER: _ClassVar[int]
        CHUNK_PAYLOAD_HISTOGRAM_SUM_FIELD_NUMBER: _ClassVar[int]
        sequence_id: int
        buffer: int
        chunk_payload_histogram_counts: _containers.RepeatedScalarFieldContainer[int]
        chunk_payload_histogram_sum: _containers.RepeatedScalarFieldContainer[int]
        def __init__(
            self,
            sequence_id: _Optional[int] = ...,
            buffer: _Optional[int] = ...,
            chunk_payload_histogram_counts: _Optional[_Iterable[int]] = ...,
            chunk_payload_histogram_sum: _Optional[_Iterable[int]] = ...,
        ) -> None: ...

    class FilterStats(_message.Message):
        __slots__ = (
            "input_packets",
            "input_bytes",
            "output_bytes",
            "errors",
            "time_taken_ns",
            "bytes_discarded_per_buffer",
        )
        INPUT_PACKETS_FIELD_NUMBER: _ClassVar[int]
        INPUT_BYTES_FIELD_NUMBER: _ClassVar[int]
        OUTPUT_BYTES_FIELD_NUMBER: _ClassVar[int]
        ERRORS_FIELD_NUMBER: _ClassVar[int]
        TIME_TAKEN_NS_FIELD_NUMBER: _ClassVar[int]
        BYTES_DISCARDED_PER_BUFFER_FIELD_NUMBER: _ClassVar[int]
        input_packets: int
        input_bytes: int
        output_bytes: int
        errors: int
        time_taken_ns: int
        bytes_discarded_per_buffer: _containers.RepeatedScalarFieldContainer[int]
        def __init__(
            self,
            input_packets: _Optional[int] = ...,
            input_bytes: _Optional[int] = ...,
            output_bytes: _Optional[int] = ...,
            errors: _Optional[int] = ...,
            time_taken_ns: _Optional[int] = ...,
            bytes_discarded_per_buffer: _Optional[_Iterable[int]] = ...,
        ) -> None: ...

    BUFFER_STATS_FIELD_NUMBER: _ClassVar[int]
    CHUNK_PAYLOAD_HISTOGRAM_DEF_FIELD_NUMBER: _ClassVar[int]
    WRITER_STATS_FIELD_NUMBER: _ClassVar[int]
    PRODUCERS_CONNECTED_FIELD_NUMBER: _ClassVar[int]
    PRODUCERS_SEEN_FIELD_NUMBER: _ClassVar[int]
    DATA_SOURCES_REGISTERED_FIELD_NUMBER: _ClassVar[int]
    DATA_SOURCES_SEEN_FIELD_NUMBER: _ClassVar[int]
    TRACING_SESSIONS_FIELD_NUMBER: _ClassVar[int]
    TOTAL_BUFFERS_FIELD_NUMBER: _ClassVar[int]
    CHUNKS_DISCARDED_FIELD_NUMBER: _ClassVar[int]
    PATCHES_DISCARDED_FIELD_NUMBER: _ClassVar[int]
    INVALID_PACKETS_FIELD_NUMBER: _ClassVar[int]
    FILTER_STATS_FIELD_NUMBER: _ClassVar[int]
    FLUSHES_REQUESTED_FIELD_NUMBER: _ClassVar[int]
    FLUSHES_SUCCEEDED_FIELD_NUMBER: _ClassVar[int]
    FLUSHES_FAILED_FIELD_NUMBER: _ClassVar[int]
    FINAL_FLUSH_OUTCOME_FIELD_NUMBER: _ClassVar[int]
    buffer_stats: _containers.RepeatedCompositeFieldContainer[TraceStats.BufferStats]
    chunk_payload_histogram_def: _containers.RepeatedScalarFieldContainer[int]
    writer_stats: _containers.RepeatedCompositeFieldContainer[TraceStats.WriterStats]
    producers_connected: int
    producers_seen: int
    data_sources_registered: int
    data_sources_seen: int
    tracing_sessions: int
    total_buffers: int
    chunks_discarded: int
    patches_discarded: int
    invalid_packets: int
    filter_stats: TraceStats.FilterStats
    flushes_requested: int
    flushes_succeeded: int
    flushes_failed: int
    final_flush_outcome: TraceStats.FinalFlushOutcome
    def __init__(
        self,
        buffer_stats: _Optional[_Iterable[_Union[TraceStats.BufferStats, _Mapping]]] = ...,
        chunk_payload_histogram_def: _Optional[_Iterable[int]] = ...,
        writer_stats: _Optional[_Iterable[_Union[TraceStats.WriterStats, _Mapping]]] = ...,
        producers_connected: _Optional[int] = ...,
        producers_seen: _Optional[int] = ...,
        data_sources_registered: _Optional[int] = ...,
        data_sources_seen: _Optional[int] = ...,
        tracing_sessions: _Optional[int] = ...,
        total_buffers: _Optional[int] = ...,
        chunks_discarded: _Optional[int] = ...,
        patches_discarded: _Optional[int] = ...,
        invalid_packets: _Optional[int] = ...,
        filter_stats: _Optional[_Union[TraceStats.FilterStats, _Mapping]] = ...,
        flushes_requested: _Optional[int] = ...,
        flushes_succeeded: _Optional[int] = ...,
        flushes_failed: _Optional[int] = ...,
        final_flush_outcome: _Optional[_Union[TraceStats.FinalFlushOutcome, str]] = ...,
    ) -> None: ...

class AndroidGameInterventionList(_message.Message):
    __slots__ = ("game_packages", "parse_error", "read_error")

    class GameModeInfo(_message.Message):
        __slots__ = ("mode", "use_angle", "resolution_downscale", "fps")
        MODE_FIELD_NUMBER: _ClassVar[int]
        USE_ANGLE_FIELD_NUMBER: _ClassVar[int]
        RESOLUTION_DOWNSCALE_FIELD_NUMBER: _ClassVar[int]
        FPS_FIELD_NUMBER: _ClassVar[int]
        mode: int
        use_angle: bool
        resolution_downscale: float
        fps: float
        def __init__(
            self,
            mode: _Optional[int] = ...,
            use_angle: bool = ...,
            resolution_downscale: _Optional[float] = ...,
            fps: _Optional[float] = ...,
        ) -> None: ...

    class GamePackageInfo(_message.Message):
        __slots__ = ("name", "uid", "current_mode", "game_mode_info")
        NAME_FIELD_NUMBER: _ClassVar[int]
        UID_FIELD_NUMBER: _ClassVar[int]
        CURRENT_MODE_FIELD_NUMBER: _ClassVar[int]
        GAME_MODE_INFO_FIELD_NUMBER: _ClassVar[int]
        name: str
        uid: int
        current_mode: int
        game_mode_info: _containers.RepeatedCompositeFieldContainer[AndroidGameInterventionList.GameModeInfo]
        def __init__(
            self,
            name: _Optional[str] = ...,
            uid: _Optional[int] = ...,
            current_mode: _Optional[int] = ...,
            game_mode_info: _Optional[_Iterable[_Union[AndroidGameInterventionList.GameModeInfo, _Mapping]]] = ...,
        ) -> None: ...

    GAME_PACKAGES_FIELD_NUMBER: _ClassVar[int]
    PARSE_ERROR_FIELD_NUMBER: _ClassVar[int]
    READ_ERROR_FIELD_NUMBER: _ClassVar[int]
    game_packages: _containers.RepeatedCompositeFieldContainer[AndroidGameInterventionList.GamePackageInfo]
    parse_error: bool
    read_error: bool
    def __init__(
        self,
        game_packages: _Optional[_Iterable[_Union[AndroidGameInterventionList.GamePackageInfo, _Mapping]]] = ...,
        parse_error: bool = ...,
        read_error: bool = ...,
    ) -> None: ...

class AndroidMotionEvent(_message.Message):
    __slots__ = (
        "event_id",
        "event_time_nanos",
        "source",
        "action",
        "device_id",
        "display_id",
        "classification",
        "flags",
        "pointer",
        "original_event_id",
        "down_time_nanos",
        "cursor_position_x",
        "cursor_position_y",
        "action_button",
        "button_state",
        "meta_state",
        "policy_flags",
        "precision_x",
        "precision_y",
    )

    class Pointer(_message.Message):
        __slots__ = ("axis_value", "pointer_id", "tool_type")

        class AxisValue(_message.Message):
            __slots__ = ("axis", "value")
            AXIS_FIELD_NUMBER: _ClassVar[int]
            VALUE_FIELD_NUMBER: _ClassVar[int]
            axis: int
            value: float
            def __init__(self, axis: _Optional[int] = ..., value: _Optional[float] = ...) -> None: ...

        AXIS_VALUE_FIELD_NUMBER: _ClassVar[int]
        POINTER_ID_FIELD_NUMBER: _ClassVar[int]
        TOOL_TYPE_FIELD_NUMBER: _ClassVar[int]
        axis_value: _containers.RepeatedCompositeFieldContainer[AndroidMotionEvent.Pointer.AxisValue]
        pointer_id: int
        tool_type: int
        def __init__(
            self,
            axis_value: _Optional[_Iterable[_Union[AndroidMotionEvent.Pointer.AxisValue, _Mapping]]] = ...,
            pointer_id: _Optional[int] = ...,
            tool_type: _Optional[int] = ...,
        ) -> None: ...

    EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    EVENT_TIME_NANOS_FIELD_NUMBER: _ClassVar[int]
    SOURCE_FIELD_NUMBER: _ClassVar[int]
    ACTION_FIELD_NUMBER: _ClassVar[int]
    DEVICE_ID_FIELD_NUMBER: _ClassVar[int]
    DISPLAY_ID_FIELD_NUMBER: _ClassVar[int]
    CLASSIFICATION_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    POINTER_FIELD_NUMBER: _ClassVar[int]
    ORIGINAL_EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    DOWN_TIME_NANOS_FIELD_NUMBER: _ClassVar[int]
    CURSOR_POSITION_X_FIELD_NUMBER: _ClassVar[int]
    CURSOR_POSITION_Y_FIELD_NUMBER: _ClassVar[int]
    ACTION_BUTTON_FIELD_NUMBER: _ClassVar[int]
    BUTTON_STATE_FIELD_NUMBER: _ClassVar[int]
    META_STATE_FIELD_NUMBER: _ClassVar[int]
    POLICY_FLAGS_FIELD_NUMBER: _ClassVar[int]
    PRECISION_X_FIELD_NUMBER: _ClassVar[int]
    PRECISION_Y_FIELD_NUMBER: _ClassVar[int]
    event_id: int
    event_time_nanos: int
    source: int
    action: int
    device_id: int
    display_id: int
    classification: int
    flags: int
    pointer: _containers.RepeatedCompositeFieldContainer[AndroidMotionEvent.Pointer]
    original_event_id: _containers.RepeatedScalarFieldContainer[int]
    down_time_nanos: int
    cursor_position_x: float
    cursor_position_y: float
    action_button: int
    button_state: int
    meta_state: int
    policy_flags: int
    precision_x: float
    precision_y: float
    def __init__(
        self,
        event_id: _Optional[int] = ...,
        event_time_nanos: _Optional[int] = ...,
        source: _Optional[int] = ...,
        action: _Optional[int] = ...,
        device_id: _Optional[int] = ...,
        display_id: _Optional[int] = ...,
        classification: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        pointer: _Optional[_Iterable[_Union[AndroidMotionEvent.Pointer, _Mapping]]] = ...,
        original_event_id: _Optional[_Iterable[int]] = ...,
        down_time_nanos: _Optional[int] = ...,
        cursor_position_x: _Optional[float] = ...,
        cursor_position_y: _Optional[float] = ...,
        action_button: _Optional[int] = ...,
        button_state: _Optional[int] = ...,
        meta_state: _Optional[int] = ...,
        policy_flags: _Optional[int] = ...,
        precision_x: _Optional[float] = ...,
        precision_y: _Optional[float] = ...,
    ) -> None: ...

class AndroidKeyEvent(_message.Message):
    __slots__ = (
        "event_id",
        "event_time_nanos",
        "down_time_nanos",
        "source",
        "action",
        "device_id",
        "display_id",
        "key_code",
        "scan_code",
        "meta_state",
        "repeat_count",
        "flags",
        "policy_flags",
    )
    EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    EVENT_TIME_NANOS_FIELD_NUMBER: _ClassVar[int]
    DOWN_TIME_NANOS_FIELD_NUMBER: _ClassVar[int]
    SOURCE_FIELD_NUMBER: _ClassVar[int]
    ACTION_FIELD_NUMBER: _ClassVar[int]
    DEVICE_ID_FIELD_NUMBER: _ClassVar[int]
    DISPLAY_ID_FIELD_NUMBER: _ClassVar[int]
    KEY_CODE_FIELD_NUMBER: _ClassVar[int]
    SCAN_CODE_FIELD_NUMBER: _ClassVar[int]
    META_STATE_FIELD_NUMBER: _ClassVar[int]
    REPEAT_COUNT_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    POLICY_FLAGS_FIELD_NUMBER: _ClassVar[int]
    event_id: int
    event_time_nanos: int
    down_time_nanos: int
    source: int
    action: int
    device_id: int
    display_id: int
    key_code: int
    scan_code: int
    meta_state: int
    repeat_count: int
    flags: int
    policy_flags: int
    def __init__(
        self,
        event_id: _Optional[int] = ...,
        event_time_nanos: _Optional[int] = ...,
        down_time_nanos: _Optional[int] = ...,
        source: _Optional[int] = ...,
        action: _Optional[int] = ...,
        device_id: _Optional[int] = ...,
        display_id: _Optional[int] = ...,
        key_code: _Optional[int] = ...,
        scan_code: _Optional[int] = ...,
        meta_state: _Optional[int] = ...,
        repeat_count: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        policy_flags: _Optional[int] = ...,
    ) -> None: ...

class AndroidWindowInputDispatchEvent(_message.Message):
    __slots__ = ("event_id", "vsync_id", "window_id", "dispatched_pointer", "resolved_flags")

    class DispatchedPointer(_message.Message):
        __slots__ = ("pointer_id", "x_in_display", "y_in_display", "axis_value_in_window")
        POINTER_ID_FIELD_NUMBER: _ClassVar[int]
        X_IN_DISPLAY_FIELD_NUMBER: _ClassVar[int]
        Y_IN_DISPLAY_FIELD_NUMBER: _ClassVar[int]
        AXIS_VALUE_IN_WINDOW_FIELD_NUMBER: _ClassVar[int]
        pointer_id: int
        x_in_display: float
        y_in_display: float
        axis_value_in_window: _containers.RepeatedCompositeFieldContainer[AndroidMotionEvent.Pointer.AxisValue]
        def __init__(
            self,
            pointer_id: _Optional[int] = ...,
            x_in_display: _Optional[float] = ...,
            y_in_display: _Optional[float] = ...,
            axis_value_in_window: _Optional[_Iterable[_Union[AndroidMotionEvent.Pointer.AxisValue, _Mapping]]] = ...,
        ) -> None: ...

    EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    VSYNC_ID_FIELD_NUMBER: _ClassVar[int]
    WINDOW_ID_FIELD_NUMBER: _ClassVar[int]
    DISPATCHED_POINTER_FIELD_NUMBER: _ClassVar[int]
    RESOLVED_FLAGS_FIELD_NUMBER: _ClassVar[int]
    event_id: int
    vsync_id: int
    window_id: int
    dispatched_pointer: _containers.RepeatedCompositeFieldContainer[AndroidWindowInputDispatchEvent.DispatchedPointer]
    resolved_flags: int
    def __init__(
        self,
        event_id: _Optional[int] = ...,
        vsync_id: _Optional[int] = ...,
        window_id: _Optional[int] = ...,
        dispatched_pointer: _Optional[
            _Iterable[_Union[AndroidWindowInputDispatchEvent.DispatchedPointer, _Mapping]]
        ] = ...,
        resolved_flags: _Optional[int] = ...,
    ) -> None: ...

class AndroidInputEvent(_message.Message):
    __slots__ = (
        "dispatcher_motion_event",
        "dispatcher_motion_event_sensitive",
        "dispatcher_key_event",
        "dispatcher_key_event_sensitive",
        "dispatcher_window_dispatch_event",
        "dispatcher_window_dispatch_event_sensitive",
    )
    DISPATCHER_MOTION_EVENT_FIELD_NUMBER: _ClassVar[int]
    DISPATCHER_MOTION_EVENT_SENSITIVE_FIELD_NUMBER: _ClassVar[int]
    DISPATCHER_KEY_EVENT_FIELD_NUMBER: _ClassVar[int]
    DISPATCHER_KEY_EVENT_SENSITIVE_FIELD_NUMBER: _ClassVar[int]
    DISPATCHER_WINDOW_DISPATCH_EVENT_FIELD_NUMBER: _ClassVar[int]
    DISPATCHER_WINDOW_DISPATCH_EVENT_SENSITIVE_FIELD_NUMBER: _ClassVar[int]
    dispatcher_motion_event: AndroidMotionEvent
    dispatcher_motion_event_sensitive: AndroidMotionEvent
    dispatcher_key_event: AndroidKeyEvent
    dispatcher_key_event_sensitive: AndroidKeyEvent
    dispatcher_window_dispatch_event: AndroidWindowInputDispatchEvent
    dispatcher_window_dispatch_event_sensitive: AndroidWindowInputDispatchEvent
    def __init__(
        self,
        dispatcher_motion_event: _Optional[_Union[AndroidMotionEvent, _Mapping]] = ...,
        dispatcher_motion_event_sensitive: _Optional[_Union[AndroidMotionEvent, _Mapping]] = ...,
        dispatcher_key_event: _Optional[_Union[AndroidKeyEvent, _Mapping]] = ...,
        dispatcher_key_event_sensitive: _Optional[_Union[AndroidKeyEvent, _Mapping]] = ...,
        dispatcher_window_dispatch_event: _Optional[_Union[AndroidWindowInputDispatchEvent, _Mapping]] = ...,
        dispatcher_window_dispatch_event_sensitive: _Optional[_Union[AndroidWindowInputDispatchEvent, _Mapping]] = ...,
    ) -> None: ...

class AndroidLogPacket(_message.Message):
    __slots__ = ("events", "stats")

    class LogEvent(_message.Message):
        __slots__ = ("log_id", "pid", "tid", "uid", "timestamp", "tag", "prio", "message", "args")

        class Arg(_message.Message):
            __slots__ = ("name", "int_value", "float_value", "string_value")
            NAME_FIELD_NUMBER: _ClassVar[int]
            INT_VALUE_FIELD_NUMBER: _ClassVar[int]
            FLOAT_VALUE_FIELD_NUMBER: _ClassVar[int]
            STRING_VALUE_FIELD_NUMBER: _ClassVar[int]
            name: str
            int_value: int
            float_value: float
            string_value: str
            def __init__(
                self,
                name: _Optional[str] = ...,
                int_value: _Optional[int] = ...,
                float_value: _Optional[float] = ...,
                string_value: _Optional[str] = ...,
            ) -> None: ...

        LOG_ID_FIELD_NUMBER: _ClassVar[int]
        PID_FIELD_NUMBER: _ClassVar[int]
        TID_FIELD_NUMBER: _ClassVar[int]
        UID_FIELD_NUMBER: _ClassVar[int]
        TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
        TAG_FIELD_NUMBER: _ClassVar[int]
        PRIO_FIELD_NUMBER: _ClassVar[int]
        MESSAGE_FIELD_NUMBER: _ClassVar[int]
        ARGS_FIELD_NUMBER: _ClassVar[int]
        log_id: AndroidLogId
        pid: int
        tid: int
        uid: int
        timestamp: int
        tag: str
        prio: AndroidLogPriority
        message: str
        args: _containers.RepeatedCompositeFieldContainer[AndroidLogPacket.LogEvent.Arg]
        def __init__(
            self,
            log_id: _Optional[_Union[AndroidLogId, str]] = ...,
            pid: _Optional[int] = ...,
            tid: _Optional[int] = ...,
            uid: _Optional[int] = ...,
            timestamp: _Optional[int] = ...,
            tag: _Optional[str] = ...,
            prio: _Optional[_Union[AndroidLogPriority, str]] = ...,
            message: _Optional[str] = ...,
            args: _Optional[_Iterable[_Union[AndroidLogPacket.LogEvent.Arg, _Mapping]]] = ...,
        ) -> None: ...

    class Stats(_message.Message):
        __slots__ = ("num_total", "num_failed", "num_skipped")
        NUM_TOTAL_FIELD_NUMBER: _ClassVar[int]
        NUM_FAILED_FIELD_NUMBER: _ClassVar[int]
        NUM_SKIPPED_FIELD_NUMBER: _ClassVar[int]
        num_total: int
        num_failed: int
        num_skipped: int
        def __init__(
            self, num_total: _Optional[int] = ..., num_failed: _Optional[int] = ..., num_skipped: _Optional[int] = ...
        ) -> None: ...

    EVENTS_FIELD_NUMBER: _ClassVar[int]
    STATS_FIELD_NUMBER: _ClassVar[int]
    events: _containers.RepeatedCompositeFieldContainer[AndroidLogPacket.LogEvent]
    stats: AndroidLogPacket.Stats
    def __init__(
        self,
        events: _Optional[_Iterable[_Union[AndroidLogPacket.LogEvent, _Mapping]]] = ...,
        stats: _Optional[_Union[AndroidLogPacket.Stats, _Mapping]] = ...,
    ) -> None: ...

class AndroidSystemProperty(_message.Message):
    __slots__ = ("values",)

    class PropertyValue(_message.Message):
        __slots__ = ("name", "value")
        NAME_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        name: str
        value: str
        def __init__(self, name: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...

    VALUES_FIELD_NUMBER: _ClassVar[int]
    values: _containers.RepeatedCompositeFieldContainer[AndroidSystemProperty.PropertyValue]
    def __init__(
        self, values: _Optional[_Iterable[_Union[AndroidSystemProperty.PropertyValue, _Mapping]]] = ...
    ) -> None: ...

class AndroidCameraFrameEvent(_message.Message):
    __slots__ = (
        "session_id",
        "camera_id",
        "frame_number",
        "request_id",
        "request_received_ns",
        "request_processing_started_ns",
        "start_of_exposure_ns",
        "start_of_frame_ns",
        "responses_all_sent_ns",
        "capture_result_status",
        "skipped_sensor_frames",
        "capture_intent",
        "num_streams",
        "node_processing_details",
        "vendor_data_version",
        "vendor_data",
    )

    class CaptureResultStatus(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        STATUS_UNSPECIFIED: _ClassVar[AndroidCameraFrameEvent.CaptureResultStatus]
        STATUS_OK: _ClassVar[AndroidCameraFrameEvent.CaptureResultStatus]
        STATUS_EARLY_METADATA_ERROR: _ClassVar[AndroidCameraFrameEvent.CaptureResultStatus]
        STATUS_FINAL_METADATA_ERROR: _ClassVar[AndroidCameraFrameEvent.CaptureResultStatus]
        STATUS_BUFFER_ERROR: _ClassVar[AndroidCameraFrameEvent.CaptureResultStatus]
        STATUS_FLUSH_ERROR: _ClassVar[AndroidCameraFrameEvent.CaptureResultStatus]

    STATUS_UNSPECIFIED: AndroidCameraFrameEvent.CaptureResultStatus
    STATUS_OK: AndroidCameraFrameEvent.CaptureResultStatus
    STATUS_EARLY_METADATA_ERROR: AndroidCameraFrameEvent.CaptureResultStatus
    STATUS_FINAL_METADATA_ERROR: AndroidCameraFrameEvent.CaptureResultStatus
    STATUS_BUFFER_ERROR: AndroidCameraFrameEvent.CaptureResultStatus
    STATUS_FLUSH_ERROR: AndroidCameraFrameEvent.CaptureResultStatus

    class CameraNodeProcessingDetails(_message.Message):
        __slots__ = ("node_id", "start_processing_ns", "end_processing_ns", "scheduling_latency_ns")
        NODE_ID_FIELD_NUMBER: _ClassVar[int]
        START_PROCESSING_NS_FIELD_NUMBER: _ClassVar[int]
        END_PROCESSING_NS_FIELD_NUMBER: _ClassVar[int]
        SCHEDULING_LATENCY_NS_FIELD_NUMBER: _ClassVar[int]
        node_id: int
        start_processing_ns: int
        end_processing_ns: int
        scheduling_latency_ns: int
        def __init__(
            self,
            node_id: _Optional[int] = ...,
            start_processing_ns: _Optional[int] = ...,
            end_processing_ns: _Optional[int] = ...,
            scheduling_latency_ns: _Optional[int] = ...,
        ) -> None: ...

    SESSION_ID_FIELD_NUMBER: _ClassVar[int]
    CAMERA_ID_FIELD_NUMBER: _ClassVar[int]
    FRAME_NUMBER_FIELD_NUMBER: _ClassVar[int]
    REQUEST_ID_FIELD_NUMBER: _ClassVar[int]
    REQUEST_RECEIVED_NS_FIELD_NUMBER: _ClassVar[int]
    REQUEST_PROCESSING_STARTED_NS_FIELD_NUMBER: _ClassVar[int]
    START_OF_EXPOSURE_NS_FIELD_NUMBER: _ClassVar[int]
    START_OF_FRAME_NS_FIELD_NUMBER: _ClassVar[int]
    RESPONSES_ALL_SENT_NS_FIELD_NUMBER: _ClassVar[int]
    CAPTURE_RESULT_STATUS_FIELD_NUMBER: _ClassVar[int]
    SKIPPED_SENSOR_FRAMES_FIELD_NUMBER: _ClassVar[int]
    CAPTURE_INTENT_FIELD_NUMBER: _ClassVar[int]
    NUM_STREAMS_FIELD_NUMBER: _ClassVar[int]
    NODE_PROCESSING_DETAILS_FIELD_NUMBER: _ClassVar[int]
    VENDOR_DATA_VERSION_FIELD_NUMBER: _ClassVar[int]
    VENDOR_DATA_FIELD_NUMBER: _ClassVar[int]
    session_id: int
    camera_id: int
    frame_number: int
    request_id: int
    request_received_ns: int
    request_processing_started_ns: int
    start_of_exposure_ns: int
    start_of_frame_ns: int
    responses_all_sent_ns: int
    capture_result_status: AndroidCameraFrameEvent.CaptureResultStatus
    skipped_sensor_frames: int
    capture_intent: int
    num_streams: int
    node_processing_details: _containers.RepeatedCompositeFieldContainer[
        AndroidCameraFrameEvent.CameraNodeProcessingDetails
    ]
    vendor_data_version: int
    vendor_data: bytes
    def __init__(
        self,
        session_id: _Optional[int] = ...,
        camera_id: _Optional[int] = ...,
        frame_number: _Optional[int] = ...,
        request_id: _Optional[int] = ...,
        request_received_ns: _Optional[int] = ...,
        request_processing_started_ns: _Optional[int] = ...,
        start_of_exposure_ns: _Optional[int] = ...,
        start_of_frame_ns: _Optional[int] = ...,
        responses_all_sent_ns: _Optional[int] = ...,
        capture_result_status: _Optional[_Union[AndroidCameraFrameEvent.CaptureResultStatus, str]] = ...,
        skipped_sensor_frames: _Optional[int] = ...,
        capture_intent: _Optional[int] = ...,
        num_streams: _Optional[int] = ...,
        node_processing_details: _Optional[
            _Iterable[_Union[AndroidCameraFrameEvent.CameraNodeProcessingDetails, _Mapping]]
        ] = ...,
        vendor_data_version: _Optional[int] = ...,
        vendor_data: _Optional[bytes] = ...,
    ) -> None: ...

class AndroidCameraSessionStats(_message.Message):
    __slots__ = ("session_id", "graph")

    class CameraGraph(_message.Message):
        __slots__ = ("nodes", "edges")

        class CameraNode(_message.Message):
            __slots__ = ("node_id", "input_ids", "output_ids", "vendor_data_version", "vendor_data")
            NODE_ID_FIELD_NUMBER: _ClassVar[int]
            INPUT_IDS_FIELD_NUMBER: _ClassVar[int]
            OUTPUT_IDS_FIELD_NUMBER: _ClassVar[int]
            VENDOR_DATA_VERSION_FIELD_NUMBER: _ClassVar[int]
            VENDOR_DATA_FIELD_NUMBER: _ClassVar[int]
            node_id: int
            input_ids: _containers.RepeatedScalarFieldContainer[int]
            output_ids: _containers.RepeatedScalarFieldContainer[int]
            vendor_data_version: int
            vendor_data: bytes
            def __init__(
                self,
                node_id: _Optional[int] = ...,
                input_ids: _Optional[_Iterable[int]] = ...,
                output_ids: _Optional[_Iterable[int]] = ...,
                vendor_data_version: _Optional[int] = ...,
                vendor_data: _Optional[bytes] = ...,
            ) -> None: ...

        class CameraEdge(_message.Message):
            __slots__ = (
                "output_node_id",
                "output_id",
                "input_node_id",
                "input_id",
                "vendor_data_version",
                "vendor_data",
            )
            OUTPUT_NODE_ID_FIELD_NUMBER: _ClassVar[int]
            OUTPUT_ID_FIELD_NUMBER: _ClassVar[int]
            INPUT_NODE_ID_FIELD_NUMBER: _ClassVar[int]
            INPUT_ID_FIELD_NUMBER: _ClassVar[int]
            VENDOR_DATA_VERSION_FIELD_NUMBER: _ClassVar[int]
            VENDOR_DATA_FIELD_NUMBER: _ClassVar[int]
            output_node_id: int
            output_id: int
            input_node_id: int
            input_id: int
            vendor_data_version: int
            vendor_data: bytes
            def __init__(
                self,
                output_node_id: _Optional[int] = ...,
                output_id: _Optional[int] = ...,
                input_node_id: _Optional[int] = ...,
                input_id: _Optional[int] = ...,
                vendor_data_version: _Optional[int] = ...,
                vendor_data: _Optional[bytes] = ...,
            ) -> None: ...

        NODES_FIELD_NUMBER: _ClassVar[int]
        EDGES_FIELD_NUMBER: _ClassVar[int]
        nodes: _containers.RepeatedCompositeFieldContainer[AndroidCameraSessionStats.CameraGraph.CameraNode]
        edges: _containers.RepeatedCompositeFieldContainer[AndroidCameraSessionStats.CameraGraph.CameraEdge]
        def __init__(
            self,
            nodes: _Optional[_Iterable[_Union[AndroidCameraSessionStats.CameraGraph.CameraNode, _Mapping]]] = ...,
            edges: _Optional[_Iterable[_Union[AndroidCameraSessionStats.CameraGraph.CameraEdge, _Mapping]]] = ...,
        ) -> None: ...

    SESSION_ID_FIELD_NUMBER: _ClassVar[int]
    GRAPH_FIELD_NUMBER: _ClassVar[int]
    session_id: int
    graph: AndroidCameraSessionStats.CameraGraph
    def __init__(
        self,
        session_id: _Optional[int] = ...,
        graph: _Optional[_Union[AndroidCameraSessionStats.CameraGraph, _Mapping]] = ...,
    ) -> None: ...

class FrameTimelineEvent(_message.Message):
    __slots__ = (
        "expected_display_frame_start",
        "actual_display_frame_start",
        "expected_surface_frame_start",
        "actual_surface_frame_start",
        "frame_end",
    )

    class JankType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        JANK_UNSPECIFIED: _ClassVar[FrameTimelineEvent.JankType]
        JANK_NONE: _ClassVar[FrameTimelineEvent.JankType]
        JANK_SF_SCHEDULING: _ClassVar[FrameTimelineEvent.JankType]
        JANK_PREDICTION_ERROR: _ClassVar[FrameTimelineEvent.JankType]
        JANK_DISPLAY_HAL: _ClassVar[FrameTimelineEvent.JankType]
        JANK_SF_CPU_DEADLINE_MISSED: _ClassVar[FrameTimelineEvent.JankType]
        JANK_SF_GPU_DEADLINE_MISSED: _ClassVar[FrameTimelineEvent.JankType]
        JANK_APP_DEADLINE_MISSED: _ClassVar[FrameTimelineEvent.JankType]
        JANK_BUFFER_STUFFING: _ClassVar[FrameTimelineEvent.JankType]
        JANK_UNKNOWN: _ClassVar[FrameTimelineEvent.JankType]
        JANK_SF_STUFFING: _ClassVar[FrameTimelineEvent.JankType]
        JANK_DROPPED: _ClassVar[FrameTimelineEvent.JankType]

    JANK_UNSPECIFIED: FrameTimelineEvent.JankType
    JANK_NONE: FrameTimelineEvent.JankType
    JANK_SF_SCHEDULING: FrameTimelineEvent.JankType
    JANK_PREDICTION_ERROR: FrameTimelineEvent.JankType
    JANK_DISPLAY_HAL: FrameTimelineEvent.JankType
    JANK_SF_CPU_DEADLINE_MISSED: FrameTimelineEvent.JankType
    JANK_SF_GPU_DEADLINE_MISSED: FrameTimelineEvent.JankType
    JANK_APP_DEADLINE_MISSED: FrameTimelineEvent.JankType
    JANK_BUFFER_STUFFING: FrameTimelineEvent.JankType
    JANK_UNKNOWN: FrameTimelineEvent.JankType
    JANK_SF_STUFFING: FrameTimelineEvent.JankType
    JANK_DROPPED: FrameTimelineEvent.JankType

    class JankSeverityType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        SEVERITY_UNKNOWN: _ClassVar[FrameTimelineEvent.JankSeverityType]
        SEVERITY_NONE: _ClassVar[FrameTimelineEvent.JankSeverityType]
        SEVERITY_PARTIAL: _ClassVar[FrameTimelineEvent.JankSeverityType]
        SEVERITY_FULL: _ClassVar[FrameTimelineEvent.JankSeverityType]

    SEVERITY_UNKNOWN: FrameTimelineEvent.JankSeverityType
    SEVERITY_NONE: FrameTimelineEvent.JankSeverityType
    SEVERITY_PARTIAL: FrameTimelineEvent.JankSeverityType
    SEVERITY_FULL: FrameTimelineEvent.JankSeverityType

    class PresentType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        PRESENT_UNSPECIFIED: _ClassVar[FrameTimelineEvent.PresentType]
        PRESENT_ON_TIME: _ClassVar[FrameTimelineEvent.PresentType]
        PRESENT_LATE: _ClassVar[FrameTimelineEvent.PresentType]
        PRESENT_EARLY: _ClassVar[FrameTimelineEvent.PresentType]
        PRESENT_DROPPED: _ClassVar[FrameTimelineEvent.PresentType]
        PRESENT_UNKNOWN: _ClassVar[FrameTimelineEvent.PresentType]

    PRESENT_UNSPECIFIED: FrameTimelineEvent.PresentType
    PRESENT_ON_TIME: FrameTimelineEvent.PresentType
    PRESENT_LATE: FrameTimelineEvent.PresentType
    PRESENT_EARLY: FrameTimelineEvent.PresentType
    PRESENT_DROPPED: FrameTimelineEvent.PresentType
    PRESENT_UNKNOWN: FrameTimelineEvent.PresentType

    class PredictionType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        PREDICTION_UNSPECIFIED: _ClassVar[FrameTimelineEvent.PredictionType]
        PREDICTION_VALID: _ClassVar[FrameTimelineEvent.PredictionType]
        PREDICTION_EXPIRED: _ClassVar[FrameTimelineEvent.PredictionType]
        PREDICTION_UNKNOWN: _ClassVar[FrameTimelineEvent.PredictionType]

    PREDICTION_UNSPECIFIED: FrameTimelineEvent.PredictionType
    PREDICTION_VALID: FrameTimelineEvent.PredictionType
    PREDICTION_EXPIRED: FrameTimelineEvent.PredictionType
    PREDICTION_UNKNOWN: FrameTimelineEvent.PredictionType

    class ExpectedSurfaceFrameStart(_message.Message):
        __slots__ = ("cookie", "token", "display_frame_token", "pid", "layer_name")
        COOKIE_FIELD_NUMBER: _ClassVar[int]
        TOKEN_FIELD_NUMBER: _ClassVar[int]
        DISPLAY_FRAME_TOKEN_FIELD_NUMBER: _ClassVar[int]
        PID_FIELD_NUMBER: _ClassVar[int]
        LAYER_NAME_FIELD_NUMBER: _ClassVar[int]
        cookie: int
        token: int
        display_frame_token: int
        pid: int
        layer_name: str
        def __init__(
            self,
            cookie: _Optional[int] = ...,
            token: _Optional[int] = ...,
            display_frame_token: _Optional[int] = ...,
            pid: _Optional[int] = ...,
            layer_name: _Optional[str] = ...,
        ) -> None: ...

    class ActualSurfaceFrameStart(_message.Message):
        __slots__ = (
            "cookie",
            "token",
            "display_frame_token",
            "pid",
            "layer_name",
            "present_type",
            "on_time_finish",
            "gpu_composition",
            "jank_type",
            "prediction_type",
            "is_buffer",
            "jank_severity_type",
        )
        COOKIE_FIELD_NUMBER: _ClassVar[int]
        TOKEN_FIELD_NUMBER: _ClassVar[int]
        DISPLAY_FRAME_TOKEN_FIELD_NUMBER: _ClassVar[int]
        PID_FIELD_NUMBER: _ClassVar[int]
        LAYER_NAME_FIELD_NUMBER: _ClassVar[int]
        PRESENT_TYPE_FIELD_NUMBER: _ClassVar[int]
        ON_TIME_FINISH_FIELD_NUMBER: _ClassVar[int]
        GPU_COMPOSITION_FIELD_NUMBER: _ClassVar[int]
        JANK_TYPE_FIELD_NUMBER: _ClassVar[int]
        PREDICTION_TYPE_FIELD_NUMBER: _ClassVar[int]
        IS_BUFFER_FIELD_NUMBER: _ClassVar[int]
        JANK_SEVERITY_TYPE_FIELD_NUMBER: _ClassVar[int]
        cookie: int
        token: int
        display_frame_token: int
        pid: int
        layer_name: str
        present_type: FrameTimelineEvent.PresentType
        on_time_finish: bool
        gpu_composition: bool
        jank_type: int
        prediction_type: FrameTimelineEvent.PredictionType
        is_buffer: bool
        jank_severity_type: FrameTimelineEvent.JankSeverityType
        def __init__(
            self,
            cookie: _Optional[int] = ...,
            token: _Optional[int] = ...,
            display_frame_token: _Optional[int] = ...,
            pid: _Optional[int] = ...,
            layer_name: _Optional[str] = ...,
            present_type: _Optional[_Union[FrameTimelineEvent.PresentType, str]] = ...,
            on_time_finish: bool = ...,
            gpu_composition: bool = ...,
            jank_type: _Optional[int] = ...,
            prediction_type: _Optional[_Union[FrameTimelineEvent.PredictionType, str]] = ...,
            is_buffer: bool = ...,
            jank_severity_type: _Optional[_Union[FrameTimelineEvent.JankSeverityType, str]] = ...,
        ) -> None: ...

    class ExpectedDisplayFrameStart(_message.Message):
        __slots__ = ("cookie", "token", "pid")
        COOKIE_FIELD_NUMBER: _ClassVar[int]
        TOKEN_FIELD_NUMBER: _ClassVar[int]
        PID_FIELD_NUMBER: _ClassVar[int]
        cookie: int
        token: int
        pid: int
        def __init__(
            self, cookie: _Optional[int] = ..., token: _Optional[int] = ..., pid: _Optional[int] = ...
        ) -> None: ...

    class ActualDisplayFrameStart(_message.Message):
        __slots__ = (
            "cookie",
            "token",
            "pid",
            "present_type",
            "on_time_finish",
            "gpu_composition",
            "jank_type",
            "prediction_type",
            "jank_severity_type",
        )
        COOKIE_FIELD_NUMBER: _ClassVar[int]
        TOKEN_FIELD_NUMBER: _ClassVar[int]
        PID_FIELD_NUMBER: _ClassVar[int]
        PRESENT_TYPE_FIELD_NUMBER: _ClassVar[int]
        ON_TIME_FINISH_FIELD_NUMBER: _ClassVar[int]
        GPU_COMPOSITION_FIELD_NUMBER: _ClassVar[int]
        JANK_TYPE_FIELD_NUMBER: _ClassVar[int]
        PREDICTION_TYPE_FIELD_NUMBER: _ClassVar[int]
        JANK_SEVERITY_TYPE_FIELD_NUMBER: _ClassVar[int]
        cookie: int
        token: int
        pid: int
        present_type: FrameTimelineEvent.PresentType
        on_time_finish: bool
        gpu_composition: bool
        jank_type: int
        prediction_type: FrameTimelineEvent.PredictionType
        jank_severity_type: FrameTimelineEvent.JankSeverityType
        def __init__(
            self,
            cookie: _Optional[int] = ...,
            token: _Optional[int] = ...,
            pid: _Optional[int] = ...,
            present_type: _Optional[_Union[FrameTimelineEvent.PresentType, str]] = ...,
            on_time_finish: bool = ...,
            gpu_composition: bool = ...,
            jank_type: _Optional[int] = ...,
            prediction_type: _Optional[_Union[FrameTimelineEvent.PredictionType, str]] = ...,
            jank_severity_type: _Optional[_Union[FrameTimelineEvent.JankSeverityType, str]] = ...,
        ) -> None: ...

    class FrameEnd(_message.Message):
        __slots__ = ("cookie",)
        COOKIE_FIELD_NUMBER: _ClassVar[int]
        cookie: int
        def __init__(self, cookie: _Optional[int] = ...) -> None: ...

    EXPECTED_DISPLAY_FRAME_START_FIELD_NUMBER: _ClassVar[int]
    ACTUAL_DISPLAY_FRAME_START_FIELD_NUMBER: _ClassVar[int]
    EXPECTED_SURFACE_FRAME_START_FIELD_NUMBER: _ClassVar[int]
    ACTUAL_SURFACE_FRAME_START_FIELD_NUMBER: _ClassVar[int]
    FRAME_END_FIELD_NUMBER: _ClassVar[int]
    expected_display_frame_start: FrameTimelineEvent.ExpectedDisplayFrameStart
    actual_display_frame_start: FrameTimelineEvent.ActualDisplayFrameStart
    expected_surface_frame_start: FrameTimelineEvent.ExpectedSurfaceFrameStart
    actual_surface_frame_start: FrameTimelineEvent.ActualSurfaceFrameStart
    frame_end: FrameTimelineEvent.FrameEnd
    def __init__(
        self,
        expected_display_frame_start: _Optional[_Union[FrameTimelineEvent.ExpectedDisplayFrameStart, _Mapping]] = ...,
        actual_display_frame_start: _Optional[_Union[FrameTimelineEvent.ActualDisplayFrameStart, _Mapping]] = ...,
        expected_surface_frame_start: _Optional[_Union[FrameTimelineEvent.ExpectedSurfaceFrameStart, _Mapping]] = ...,
        actual_surface_frame_start: _Optional[_Union[FrameTimelineEvent.ActualSurfaceFrameStart, _Mapping]] = ...,
        frame_end: _Optional[_Union[FrameTimelineEvent.FrameEnd, _Mapping]] = ...,
    ) -> None: ...

class GpuMemTotalEvent(_message.Message):
    __slots__ = ("gpu_id", "pid", "size")
    GPU_ID_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    gpu_id: int
    pid: int
    size: int
    def __init__(self, gpu_id: _Optional[int] = ..., pid: _Optional[int] = ..., size: _Optional[int] = ...) -> None: ...

class GraphicsFrameEvent(_message.Message):
    __slots__ = ("buffer_event",)

    class BufferEventType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNSPECIFIED: _ClassVar[GraphicsFrameEvent.BufferEventType]
        DEQUEUE: _ClassVar[GraphicsFrameEvent.BufferEventType]
        QUEUE: _ClassVar[GraphicsFrameEvent.BufferEventType]
        POST: _ClassVar[GraphicsFrameEvent.BufferEventType]
        ACQUIRE_FENCE: _ClassVar[GraphicsFrameEvent.BufferEventType]
        LATCH: _ClassVar[GraphicsFrameEvent.BufferEventType]
        HWC_COMPOSITION_QUEUED: _ClassVar[GraphicsFrameEvent.BufferEventType]
        FALLBACK_COMPOSITION: _ClassVar[GraphicsFrameEvent.BufferEventType]
        PRESENT_FENCE: _ClassVar[GraphicsFrameEvent.BufferEventType]
        RELEASE_FENCE: _ClassVar[GraphicsFrameEvent.BufferEventType]
        MODIFY: _ClassVar[GraphicsFrameEvent.BufferEventType]
        DETACH: _ClassVar[GraphicsFrameEvent.BufferEventType]
        ATTACH: _ClassVar[GraphicsFrameEvent.BufferEventType]
        CANCEL: _ClassVar[GraphicsFrameEvent.BufferEventType]

    UNSPECIFIED: GraphicsFrameEvent.BufferEventType
    DEQUEUE: GraphicsFrameEvent.BufferEventType
    QUEUE: GraphicsFrameEvent.BufferEventType
    POST: GraphicsFrameEvent.BufferEventType
    ACQUIRE_FENCE: GraphicsFrameEvent.BufferEventType
    LATCH: GraphicsFrameEvent.BufferEventType
    HWC_COMPOSITION_QUEUED: GraphicsFrameEvent.BufferEventType
    FALLBACK_COMPOSITION: GraphicsFrameEvent.BufferEventType
    PRESENT_FENCE: GraphicsFrameEvent.BufferEventType
    RELEASE_FENCE: GraphicsFrameEvent.BufferEventType
    MODIFY: GraphicsFrameEvent.BufferEventType
    DETACH: GraphicsFrameEvent.BufferEventType
    ATTACH: GraphicsFrameEvent.BufferEventType
    CANCEL: GraphicsFrameEvent.BufferEventType

    class BufferEvent(_message.Message):
        __slots__ = ("frame_number", "type", "layer_name", "duration_ns", "buffer_id")
        FRAME_NUMBER_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIELD_NUMBER: _ClassVar[int]
        LAYER_NAME_FIELD_NUMBER: _ClassVar[int]
        DURATION_NS_FIELD_NUMBER: _ClassVar[int]
        BUFFER_ID_FIELD_NUMBER: _ClassVar[int]
        frame_number: int
        type: GraphicsFrameEvent.BufferEventType
        layer_name: str
        duration_ns: int
        buffer_id: int
        def __init__(
            self,
            frame_number: _Optional[int] = ...,
            type: _Optional[_Union[GraphicsFrameEvent.BufferEventType, str]] = ...,
            layer_name: _Optional[str] = ...,
            duration_ns: _Optional[int] = ...,
            buffer_id: _Optional[int] = ...,
        ) -> None: ...

    BUFFER_EVENT_FIELD_NUMBER: _ClassVar[int]
    buffer_event: GraphicsFrameEvent.BufferEvent
    def __init__(self, buffer_event: _Optional[_Union[GraphicsFrameEvent.BufferEvent, _Mapping]] = ...) -> None: ...

class InitialDisplayState(_message.Message):
    __slots__ = ("display_state", "brightness")
    DISPLAY_STATE_FIELD_NUMBER: _ClassVar[int]
    BRIGHTNESS_FIELD_NUMBER: _ClassVar[int]
    display_state: int
    brightness: float
    def __init__(self, display_state: _Optional[int] = ..., brightness: _Optional[float] = ...) -> None: ...

class NetworkPacketEvent(_message.Message):
    __slots__ = (
        "direction",
        "interface",
        "length",
        "uid",
        "tag",
        "ip_proto",
        "tcp_flags",
        "local_port",
        "remote_port",
        "icmp_type",
        "icmp_code",
    )
    DIRECTION_FIELD_NUMBER: _ClassVar[int]
    INTERFACE_FIELD_NUMBER: _ClassVar[int]
    LENGTH_FIELD_NUMBER: _ClassVar[int]
    UID_FIELD_NUMBER: _ClassVar[int]
    TAG_FIELD_NUMBER: _ClassVar[int]
    IP_PROTO_FIELD_NUMBER: _ClassVar[int]
    TCP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    LOCAL_PORT_FIELD_NUMBER: _ClassVar[int]
    REMOTE_PORT_FIELD_NUMBER: _ClassVar[int]
    ICMP_TYPE_FIELD_NUMBER: _ClassVar[int]
    ICMP_CODE_FIELD_NUMBER: _ClassVar[int]
    direction: TrafficDirection
    interface: str
    length: int
    uid: int
    tag: int
    ip_proto: int
    tcp_flags: int
    local_port: int
    remote_port: int
    icmp_type: int
    icmp_code: int
    def __init__(
        self,
        direction: _Optional[_Union[TrafficDirection, str]] = ...,
        interface: _Optional[str] = ...,
        length: _Optional[int] = ...,
        uid: _Optional[int] = ...,
        tag: _Optional[int] = ...,
        ip_proto: _Optional[int] = ...,
        tcp_flags: _Optional[int] = ...,
        local_port: _Optional[int] = ...,
        remote_port: _Optional[int] = ...,
        icmp_type: _Optional[int] = ...,
        icmp_code: _Optional[int] = ...,
    ) -> None: ...

class NetworkPacketBundle(_message.Message):
    __slots__ = ("iid", "ctx", "packet_timestamps", "packet_lengths", "total_packets", "total_duration", "total_length")
    IID_FIELD_NUMBER: _ClassVar[int]
    CTX_FIELD_NUMBER: _ClassVar[int]
    PACKET_TIMESTAMPS_FIELD_NUMBER: _ClassVar[int]
    PACKET_LENGTHS_FIELD_NUMBER: _ClassVar[int]
    TOTAL_PACKETS_FIELD_NUMBER: _ClassVar[int]
    TOTAL_DURATION_FIELD_NUMBER: _ClassVar[int]
    TOTAL_LENGTH_FIELD_NUMBER: _ClassVar[int]
    iid: int
    ctx: NetworkPacketEvent
    packet_timestamps: _containers.RepeatedScalarFieldContainer[int]
    packet_lengths: _containers.RepeatedScalarFieldContainer[int]
    total_packets: int
    total_duration: int
    total_length: int
    def __init__(
        self,
        iid: _Optional[int] = ...,
        ctx: _Optional[_Union[NetworkPacketEvent, _Mapping]] = ...,
        packet_timestamps: _Optional[_Iterable[int]] = ...,
        packet_lengths: _Optional[_Iterable[int]] = ...,
        total_packets: _Optional[int] = ...,
        total_duration: _Optional[int] = ...,
        total_length: _Optional[int] = ...,
    ) -> None: ...

class NetworkPacketContext(_message.Message):
    __slots__ = ("iid", "ctx")
    IID_FIELD_NUMBER: _ClassVar[int]
    CTX_FIELD_NUMBER: _ClassVar[int]
    iid: int
    ctx: NetworkPacketEvent
    def __init__(
        self, iid: _Optional[int] = ..., ctx: _Optional[_Union[NetworkPacketEvent, _Mapping]] = ...
    ) -> None: ...

class PackagesList(_message.Message):
    __slots__ = ("packages", "parse_error", "read_error")

    class PackageInfo(_message.Message):
        __slots__ = ("name", "uid", "debuggable", "profileable_from_shell", "version_code")
        NAME_FIELD_NUMBER: _ClassVar[int]
        UID_FIELD_NUMBER: _ClassVar[int]
        DEBUGGABLE_FIELD_NUMBER: _ClassVar[int]
        PROFILEABLE_FROM_SHELL_FIELD_NUMBER: _ClassVar[int]
        VERSION_CODE_FIELD_NUMBER: _ClassVar[int]
        name: str
        uid: int
        debuggable: bool
        profileable_from_shell: bool
        version_code: int
        def __init__(
            self,
            name: _Optional[str] = ...,
            uid: _Optional[int] = ...,
            debuggable: bool = ...,
            profileable_from_shell: bool = ...,
            version_code: _Optional[int] = ...,
        ) -> None: ...

    PACKAGES_FIELD_NUMBER: _ClassVar[int]
    PARSE_ERROR_FIELD_NUMBER: _ClassVar[int]
    READ_ERROR_FIELD_NUMBER: _ClassVar[int]
    packages: _containers.RepeatedCompositeFieldContainer[PackagesList.PackageInfo]
    parse_error: bool
    read_error: bool
    def __init__(
        self,
        packages: _Optional[_Iterable[_Union[PackagesList.PackageInfo, _Mapping]]] = ...,
        parse_error: bool = ...,
        read_error: bool = ...,
    ) -> None: ...

class ProtoLogMessage(_message.Message):
    __slots__ = ("message_id", "interned_str_params", "sint64_params", "double_params", "boolean_params")
    MESSAGE_ID_FIELD_NUMBER: _ClassVar[int]
    INTERNED_STR_PARAMS_FIELD_NUMBER: _ClassVar[int]
    SINT64_PARAMS_FIELD_NUMBER: _ClassVar[int]
    DOUBLE_PARAMS_FIELD_NUMBER: _ClassVar[int]
    BOOLEAN_PARAMS_FIELD_NUMBER: _ClassVar[int]
    message_id: int
    interned_str_params: _containers.RepeatedScalarFieldContainer[int]
    sint64_params: _containers.RepeatedScalarFieldContainer[int]
    double_params: _containers.RepeatedScalarFieldContainer[float]
    boolean_params: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self,
        message_id: _Optional[int] = ...,
        interned_str_params: _Optional[_Iterable[int]] = ...,
        sint64_params: _Optional[_Iterable[int]] = ...,
        double_params: _Optional[_Iterable[float]] = ...,
        boolean_params: _Optional[_Iterable[int]] = ...,
    ) -> None: ...

class ProtoLogViewerConfig(_message.Message):
    __slots__ = ("messages", "groups")

    class MessageData(_message.Message):
        __slots__ = ("message_id", "message", "level", "group_id")
        MESSAGE_ID_FIELD_NUMBER: _ClassVar[int]
        MESSAGE_FIELD_NUMBER: _ClassVar[int]
        LEVEL_FIELD_NUMBER: _ClassVar[int]
        GROUP_ID_FIELD_NUMBER: _ClassVar[int]
        message_id: int
        message: str
        level: ProtoLogLevel
        group_id: int
        def __init__(
            self,
            message_id: _Optional[int] = ...,
            message: _Optional[str] = ...,
            level: _Optional[_Union[ProtoLogLevel, str]] = ...,
            group_id: _Optional[int] = ...,
        ) -> None: ...

    class Group(_message.Message):
        __slots__ = ("id", "name", "tag")
        ID_FIELD_NUMBER: _ClassVar[int]
        NAME_FIELD_NUMBER: _ClassVar[int]
        TAG_FIELD_NUMBER: _ClassVar[int]
        id: int
        name: str
        tag: str
        def __init__(self, id: _Optional[int] = ..., name: _Optional[str] = ..., tag: _Optional[str] = ...) -> None: ...

    MESSAGES_FIELD_NUMBER: _ClassVar[int]
    GROUPS_FIELD_NUMBER: _ClassVar[int]
    messages: _containers.RepeatedCompositeFieldContainer[ProtoLogViewerConfig.MessageData]
    groups: _containers.RepeatedCompositeFieldContainer[ProtoLogViewerConfig.Group]
    def __init__(
        self,
        messages: _Optional[_Iterable[_Union[ProtoLogViewerConfig.MessageData, _Mapping]]] = ...,
        groups: _Optional[_Iterable[_Union[ProtoLogViewerConfig.Group, _Mapping]]] = ...,
    ) -> None: ...

class ShellTransition(_message.Message):
    __slots__ = (
        "id",
        "create_time_ns",
        "send_time_ns",
        "dispatch_time_ns",
        "merge_time_ns",
        "merge_request_time_ns",
        "shell_abort_time_ns",
        "wm_abort_time_ns",
        "finish_time_ns",
        "start_transaction_id",
        "finish_transaction_id",
        "handler",
        "type",
        "targets",
        "merge_target",
        "flags",
        "starting_window_remove_time_ns",
    )

    class Target(_message.Message):
        __slots__ = ("mode", "layer_id", "window_id", "flags")
        MODE_FIELD_NUMBER: _ClassVar[int]
        LAYER_ID_FIELD_NUMBER: _ClassVar[int]
        WINDOW_ID_FIELD_NUMBER: _ClassVar[int]
        FLAGS_FIELD_NUMBER: _ClassVar[int]
        mode: int
        layer_id: int
        window_id: int
        flags: int
        def __init__(
            self,
            mode: _Optional[int] = ...,
            layer_id: _Optional[int] = ...,
            window_id: _Optional[int] = ...,
            flags: _Optional[int] = ...,
        ) -> None: ...

    ID_FIELD_NUMBER: _ClassVar[int]
    CREATE_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    SEND_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    DISPATCH_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    MERGE_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    MERGE_REQUEST_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    SHELL_ABORT_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    WM_ABORT_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    FINISH_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    START_TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    FINISH_TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    HANDLER_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    TARGETS_FIELD_NUMBER: _ClassVar[int]
    MERGE_TARGET_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    STARTING_WINDOW_REMOVE_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    id: int
    create_time_ns: int
    send_time_ns: int
    dispatch_time_ns: int
    merge_time_ns: int
    merge_request_time_ns: int
    shell_abort_time_ns: int
    wm_abort_time_ns: int
    finish_time_ns: int
    start_transaction_id: int
    finish_transaction_id: int
    handler: int
    type: int
    targets: _containers.RepeatedCompositeFieldContainer[ShellTransition.Target]
    merge_target: int
    flags: int
    starting_window_remove_time_ns: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        create_time_ns: _Optional[int] = ...,
        send_time_ns: _Optional[int] = ...,
        dispatch_time_ns: _Optional[int] = ...,
        merge_time_ns: _Optional[int] = ...,
        merge_request_time_ns: _Optional[int] = ...,
        shell_abort_time_ns: _Optional[int] = ...,
        wm_abort_time_ns: _Optional[int] = ...,
        finish_time_ns: _Optional[int] = ...,
        start_transaction_id: _Optional[int] = ...,
        finish_transaction_id: _Optional[int] = ...,
        handler: _Optional[int] = ...,
        type: _Optional[int] = ...,
        targets: _Optional[_Iterable[_Union[ShellTransition.Target, _Mapping]]] = ...,
        merge_target: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        starting_window_remove_time_ns: _Optional[int] = ...,
    ) -> None: ...

class ShellHandlerMappings(_message.Message):
    __slots__ = ("mapping",)
    MAPPING_FIELD_NUMBER: _ClassVar[int]
    mapping: _containers.RepeatedCompositeFieldContainer[ShellHandlerMapping]
    def __init__(self, mapping: _Optional[_Iterable[_Union[ShellHandlerMapping, _Mapping]]] = ...) -> None: ...

class ShellHandlerMapping(_message.Message):
    __slots__ = ("id", "name")
    ID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    id: int
    name: str
    def __init__(self, id: _Optional[int] = ..., name: _Optional[str] = ...) -> None: ...

class RegionProto(_message.Message):
    __slots__ = ("rect",)
    RECT_FIELD_NUMBER: _ClassVar[int]
    rect: _containers.RepeatedCompositeFieldContainer[RectProto]
    def __init__(self, rect: _Optional[_Iterable[_Union[RectProto, _Mapping]]] = ...) -> None: ...

class RectProto(_message.Message):
    __slots__ = ("left", "top", "right", "bottom")
    LEFT_FIELD_NUMBER: _ClassVar[int]
    TOP_FIELD_NUMBER: _ClassVar[int]
    RIGHT_FIELD_NUMBER: _ClassVar[int]
    BOTTOM_FIELD_NUMBER: _ClassVar[int]
    left: int
    top: int
    right: int
    bottom: int
    def __init__(
        self,
        left: _Optional[int] = ...,
        top: _Optional[int] = ...,
        right: _Optional[int] = ...,
        bottom: _Optional[int] = ...,
    ) -> None: ...

class SizeProto(_message.Message):
    __slots__ = ("w", "h")
    W_FIELD_NUMBER: _ClassVar[int]
    H_FIELD_NUMBER: _ClassVar[int]
    w: int
    h: int
    def __init__(self, w: _Optional[int] = ..., h: _Optional[int] = ...) -> None: ...

class TransformProto(_message.Message):
    __slots__ = ("dsdx", "dtdx", "dsdy", "dtdy", "type")
    DSDX_FIELD_NUMBER: _ClassVar[int]
    DTDX_FIELD_NUMBER: _ClassVar[int]
    DSDY_FIELD_NUMBER: _ClassVar[int]
    DTDY_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    dsdx: float
    dtdx: float
    dsdy: float
    dtdy: float
    type: int
    def __init__(
        self,
        dsdx: _Optional[float] = ...,
        dtdx: _Optional[float] = ...,
        dsdy: _Optional[float] = ...,
        dtdy: _Optional[float] = ...,
        type: _Optional[int] = ...,
    ) -> None: ...

class ColorProto(_message.Message):
    __slots__ = ("r", "g", "b", "a")
    R_FIELD_NUMBER: _ClassVar[int]
    G_FIELD_NUMBER: _ClassVar[int]
    B_FIELD_NUMBER: _ClassVar[int]
    A_FIELD_NUMBER: _ClassVar[int]
    r: float
    g: float
    b: float
    a: float
    def __init__(
        self, r: _Optional[float] = ..., g: _Optional[float] = ..., b: _Optional[float] = ..., a: _Optional[float] = ...
    ) -> None: ...

class InputWindowInfoProto(_message.Message):
    __slots__ = (
        "layout_params_flags",
        "layout_params_type",
        "frame",
        "touchable_region",
        "surface_inset",
        "visible",
        "can_receive_keys",
        "focusable",
        "has_wallpaper",
        "global_scale_factor",
        "window_x_scale",
        "window_y_scale",
        "crop_layer_id",
        "replace_touchable_region_with_crop",
        "touchable_region_crop",
        "transform",
        "input_config",
    )
    LAYOUT_PARAMS_FLAGS_FIELD_NUMBER: _ClassVar[int]
    LAYOUT_PARAMS_TYPE_FIELD_NUMBER: _ClassVar[int]
    FRAME_FIELD_NUMBER: _ClassVar[int]
    TOUCHABLE_REGION_FIELD_NUMBER: _ClassVar[int]
    SURFACE_INSET_FIELD_NUMBER: _ClassVar[int]
    VISIBLE_FIELD_NUMBER: _ClassVar[int]
    CAN_RECEIVE_KEYS_FIELD_NUMBER: _ClassVar[int]
    FOCUSABLE_FIELD_NUMBER: _ClassVar[int]
    HAS_WALLPAPER_FIELD_NUMBER: _ClassVar[int]
    GLOBAL_SCALE_FACTOR_FIELD_NUMBER: _ClassVar[int]
    WINDOW_X_SCALE_FIELD_NUMBER: _ClassVar[int]
    WINDOW_Y_SCALE_FIELD_NUMBER: _ClassVar[int]
    CROP_LAYER_ID_FIELD_NUMBER: _ClassVar[int]
    REPLACE_TOUCHABLE_REGION_WITH_CROP_FIELD_NUMBER: _ClassVar[int]
    TOUCHABLE_REGION_CROP_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    INPUT_CONFIG_FIELD_NUMBER: _ClassVar[int]
    layout_params_flags: int
    layout_params_type: int
    frame: RectProto
    touchable_region: RegionProto
    surface_inset: int
    visible: bool
    can_receive_keys: bool
    focusable: bool
    has_wallpaper: bool
    global_scale_factor: float
    window_x_scale: float
    window_y_scale: float
    crop_layer_id: int
    replace_touchable_region_with_crop: bool
    touchable_region_crop: RectProto
    transform: TransformProto
    input_config: int
    def __init__(
        self,
        layout_params_flags: _Optional[int] = ...,
        layout_params_type: _Optional[int] = ...,
        frame: _Optional[_Union[RectProto, _Mapping]] = ...,
        touchable_region: _Optional[_Union[RegionProto, _Mapping]] = ...,
        surface_inset: _Optional[int] = ...,
        visible: bool = ...,
        can_receive_keys: bool = ...,
        focusable: bool = ...,
        has_wallpaper: bool = ...,
        global_scale_factor: _Optional[float] = ...,
        window_x_scale: _Optional[float] = ...,
        window_y_scale: _Optional[float] = ...,
        crop_layer_id: _Optional[int] = ...,
        replace_touchable_region_with_crop: bool = ...,
        touchable_region_crop: _Optional[_Union[RectProto, _Mapping]] = ...,
        transform: _Optional[_Union[TransformProto, _Mapping]] = ...,
        input_config: _Optional[int] = ...,
    ) -> None: ...

class BlurRegion(_message.Message):
    __slots__ = (
        "blur_radius",
        "corner_radius_tl",
        "corner_radius_tr",
        "corner_radius_bl",
        "corner_radius_br",
        "alpha",
        "left",
        "top",
        "right",
        "bottom",
    )
    BLUR_RADIUS_FIELD_NUMBER: _ClassVar[int]
    CORNER_RADIUS_TL_FIELD_NUMBER: _ClassVar[int]
    CORNER_RADIUS_TR_FIELD_NUMBER: _ClassVar[int]
    CORNER_RADIUS_BL_FIELD_NUMBER: _ClassVar[int]
    CORNER_RADIUS_BR_FIELD_NUMBER: _ClassVar[int]
    ALPHA_FIELD_NUMBER: _ClassVar[int]
    LEFT_FIELD_NUMBER: _ClassVar[int]
    TOP_FIELD_NUMBER: _ClassVar[int]
    RIGHT_FIELD_NUMBER: _ClassVar[int]
    BOTTOM_FIELD_NUMBER: _ClassVar[int]
    blur_radius: int
    corner_radius_tl: int
    corner_radius_tr: int
    corner_radius_bl: int
    corner_radius_br: float
    alpha: float
    left: int
    top: int
    right: int
    bottom: int
    def __init__(
        self,
        blur_radius: _Optional[int] = ...,
        corner_radius_tl: _Optional[int] = ...,
        corner_radius_tr: _Optional[int] = ...,
        corner_radius_bl: _Optional[int] = ...,
        corner_radius_br: _Optional[float] = ...,
        alpha: _Optional[float] = ...,
        left: _Optional[int] = ...,
        top: _Optional[int] = ...,
        right: _Optional[int] = ...,
        bottom: _Optional[int] = ...,
    ) -> None: ...

class ColorTransformProto(_message.Message):
    __slots__ = ("val",)
    VAL_FIELD_NUMBER: _ClassVar[int]
    val: _containers.RepeatedScalarFieldContainer[float]
    def __init__(self, val: _Optional[_Iterable[float]] = ...) -> None: ...

class LayersTraceFileProto(_message.Message):
    __slots__ = ("magic_number", "entry", "real_to_elapsed_time_offset_nanos")

    class MagicNumber(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        INVALID: _ClassVar[LayersTraceFileProto.MagicNumber]
        MAGIC_NUMBER_L: _ClassVar[LayersTraceFileProto.MagicNumber]
        MAGIC_NUMBER_H: _ClassVar[LayersTraceFileProto.MagicNumber]

    INVALID: LayersTraceFileProto.MagicNumber
    MAGIC_NUMBER_L: LayersTraceFileProto.MagicNumber
    MAGIC_NUMBER_H: LayersTraceFileProto.MagicNumber
    MAGIC_NUMBER_FIELD_NUMBER: _ClassVar[int]
    ENTRY_FIELD_NUMBER: _ClassVar[int]
    REAL_TO_ELAPSED_TIME_OFFSET_NANOS_FIELD_NUMBER: _ClassVar[int]
    magic_number: int
    entry: _containers.RepeatedCompositeFieldContainer[LayersSnapshotProto]
    real_to_elapsed_time_offset_nanos: int
    def __init__(
        self,
        magic_number: _Optional[int] = ...,
        entry: _Optional[_Iterable[_Union[LayersSnapshotProto, _Mapping]]] = ...,
        real_to_elapsed_time_offset_nanos: _Optional[int] = ...,
    ) -> None: ...

class LayersSnapshotProto(_message.Message):
    __slots__ = (
        "elapsed_realtime_nanos",
        "where",
        "layers",
        "hwc_blob",
        "excludes_composition_state",
        "missed_entries",
        "displays",
        "vsync_id",
    )
    ELAPSED_REALTIME_NANOS_FIELD_NUMBER: _ClassVar[int]
    WHERE_FIELD_NUMBER: _ClassVar[int]
    LAYERS_FIELD_NUMBER: _ClassVar[int]
    HWC_BLOB_FIELD_NUMBER: _ClassVar[int]
    EXCLUDES_COMPOSITION_STATE_FIELD_NUMBER: _ClassVar[int]
    MISSED_ENTRIES_FIELD_NUMBER: _ClassVar[int]
    DISPLAYS_FIELD_NUMBER: _ClassVar[int]
    VSYNC_ID_FIELD_NUMBER: _ClassVar[int]
    elapsed_realtime_nanos: int
    where: str
    layers: LayersProto
    hwc_blob: str
    excludes_composition_state: bool
    missed_entries: int
    displays: _containers.RepeatedCompositeFieldContainer[DisplayProto]
    vsync_id: int
    def __init__(
        self,
        elapsed_realtime_nanos: _Optional[int] = ...,
        where: _Optional[str] = ...,
        layers: _Optional[_Union[LayersProto, _Mapping]] = ...,
        hwc_blob: _Optional[str] = ...,
        excludes_composition_state: bool = ...,
        missed_entries: _Optional[int] = ...,
        displays: _Optional[_Iterable[_Union[DisplayProto, _Mapping]]] = ...,
        vsync_id: _Optional[int] = ...,
    ) -> None: ...

class LayersProto(_message.Message):
    __slots__ = ("layers",)
    LAYERS_FIELD_NUMBER: _ClassVar[int]
    layers: _containers.RepeatedCompositeFieldContainer[LayerProto]
    def __init__(self, layers: _Optional[_Iterable[_Union[LayerProto, _Mapping]]] = ...) -> None: ...

class DisplayProto(_message.Message):
    __slots__ = (
        "id",
        "name",
        "layer_stack",
        "size",
        "layer_stack_space_rect",
        "transform",
        "is_virtual",
        "dpi_x",
        "dpi_y",
    )
    ID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    LAYER_STACK_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    LAYER_STACK_SPACE_RECT_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    IS_VIRTUAL_FIELD_NUMBER: _ClassVar[int]
    DPI_X_FIELD_NUMBER: _ClassVar[int]
    DPI_Y_FIELD_NUMBER: _ClassVar[int]
    id: int
    name: str
    layer_stack: int
    size: SizeProto
    layer_stack_space_rect: RectProto
    transform: TransformProto
    is_virtual: bool
    dpi_x: float
    dpi_y: float
    def __init__(
        self,
        id: _Optional[int] = ...,
        name: _Optional[str] = ...,
        layer_stack: _Optional[int] = ...,
        size: _Optional[_Union[SizeProto, _Mapping]] = ...,
        layer_stack_space_rect: _Optional[_Union[RectProto, _Mapping]] = ...,
        transform: _Optional[_Union[TransformProto, _Mapping]] = ...,
        is_virtual: bool = ...,
        dpi_x: _Optional[float] = ...,
        dpi_y: _Optional[float] = ...,
    ) -> None: ...

class LayerProto(_message.Message):
    __slots__ = (
        "id",
        "name",
        "children",
        "relatives",
        "type",
        "transparent_region",
        "visible_region",
        "damage_region",
        "layer_stack",
        "z",
        "position",
        "requested_position",
        "size",
        "crop",
        "final_crop",
        "is_opaque",
        "invalidate",
        "dataspace",
        "pixel_format",
        "color",
        "requested_color",
        "flags",
        "transform",
        "requested_transform",
        "parent",
        "z_order_relative_of",
        "active_buffer",
        "queued_frames",
        "refresh_pending",
        "hwc_frame",
        "hwc_crop",
        "hwc_transform",
        "window_type",
        "app_id",
        "hwc_composition_type",
        "is_protected",
        "curr_frame",
        "barrier_layer",
        "buffer_transform",
        "effective_scaling_mode",
        "corner_radius",
        "metadata",
        "effective_transform",
        "source_bounds",
        "bounds",
        "screen_bounds",
        "input_window_info",
        "corner_radius_crop",
        "shadow_radius",
        "color_transform",
        "is_relative_of",
        "background_blur_radius",
        "owner_uid",
        "blur_regions",
        "is_trusted_overlay",
        "requested_corner_radius",
        "destination_frame",
        "original_id",
    )

    class MetadataEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: int
        value: str
        def __init__(self, key: _Optional[int] = ..., value: _Optional[str] = ...) -> None: ...

    ID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    CHILDREN_FIELD_NUMBER: _ClassVar[int]
    RELATIVES_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    TRANSPARENT_REGION_FIELD_NUMBER: _ClassVar[int]
    VISIBLE_REGION_FIELD_NUMBER: _ClassVar[int]
    DAMAGE_REGION_FIELD_NUMBER: _ClassVar[int]
    LAYER_STACK_FIELD_NUMBER: _ClassVar[int]
    Z_FIELD_NUMBER: _ClassVar[int]
    POSITION_FIELD_NUMBER: _ClassVar[int]
    REQUESTED_POSITION_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    CROP_FIELD_NUMBER: _ClassVar[int]
    FINAL_CROP_FIELD_NUMBER: _ClassVar[int]
    IS_OPAQUE_FIELD_NUMBER: _ClassVar[int]
    INVALIDATE_FIELD_NUMBER: _ClassVar[int]
    DATASPACE_FIELD_NUMBER: _ClassVar[int]
    PIXEL_FORMAT_FIELD_NUMBER: _ClassVar[int]
    COLOR_FIELD_NUMBER: _ClassVar[int]
    REQUESTED_COLOR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    REQUESTED_TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    PARENT_FIELD_NUMBER: _ClassVar[int]
    Z_ORDER_RELATIVE_OF_FIELD_NUMBER: _ClassVar[int]
    ACTIVE_BUFFER_FIELD_NUMBER: _ClassVar[int]
    QUEUED_FRAMES_FIELD_NUMBER: _ClassVar[int]
    REFRESH_PENDING_FIELD_NUMBER: _ClassVar[int]
    HWC_FRAME_FIELD_NUMBER: _ClassVar[int]
    HWC_CROP_FIELD_NUMBER: _ClassVar[int]
    HWC_TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    WINDOW_TYPE_FIELD_NUMBER: _ClassVar[int]
    APP_ID_FIELD_NUMBER: _ClassVar[int]
    HWC_COMPOSITION_TYPE_FIELD_NUMBER: _ClassVar[int]
    IS_PROTECTED_FIELD_NUMBER: _ClassVar[int]
    CURR_FRAME_FIELD_NUMBER: _ClassVar[int]
    BARRIER_LAYER_FIELD_NUMBER: _ClassVar[int]
    BUFFER_TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    EFFECTIVE_SCALING_MODE_FIELD_NUMBER: _ClassVar[int]
    CORNER_RADIUS_FIELD_NUMBER: _ClassVar[int]
    METADATA_FIELD_NUMBER: _ClassVar[int]
    EFFECTIVE_TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    SOURCE_BOUNDS_FIELD_NUMBER: _ClassVar[int]
    BOUNDS_FIELD_NUMBER: _ClassVar[int]
    SCREEN_BOUNDS_FIELD_NUMBER: _ClassVar[int]
    INPUT_WINDOW_INFO_FIELD_NUMBER: _ClassVar[int]
    CORNER_RADIUS_CROP_FIELD_NUMBER: _ClassVar[int]
    SHADOW_RADIUS_FIELD_NUMBER: _ClassVar[int]
    COLOR_TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    IS_RELATIVE_OF_FIELD_NUMBER: _ClassVar[int]
    BACKGROUND_BLUR_RADIUS_FIELD_NUMBER: _ClassVar[int]
    OWNER_UID_FIELD_NUMBER: _ClassVar[int]
    BLUR_REGIONS_FIELD_NUMBER: _ClassVar[int]
    IS_TRUSTED_OVERLAY_FIELD_NUMBER: _ClassVar[int]
    REQUESTED_CORNER_RADIUS_FIELD_NUMBER: _ClassVar[int]
    DESTINATION_FRAME_FIELD_NUMBER: _ClassVar[int]
    ORIGINAL_ID_FIELD_NUMBER: _ClassVar[int]
    id: int
    name: str
    children: _containers.RepeatedScalarFieldContainer[int]
    relatives: _containers.RepeatedScalarFieldContainer[int]
    type: str
    transparent_region: RegionProto
    visible_region: RegionProto
    damage_region: RegionProto
    layer_stack: int
    z: int
    position: PositionProto
    requested_position: PositionProto
    size: SizeProto
    crop: RectProto
    final_crop: RectProto
    is_opaque: bool
    invalidate: bool
    dataspace: str
    pixel_format: str
    color: ColorProto
    requested_color: ColorProto
    flags: int
    transform: TransformProto
    requested_transform: TransformProto
    parent: int
    z_order_relative_of: int
    active_buffer: ActiveBufferProto
    queued_frames: int
    refresh_pending: bool
    hwc_frame: RectProto
    hwc_crop: FloatRectProto
    hwc_transform: int
    window_type: int
    app_id: int
    hwc_composition_type: HwcCompositionType
    is_protected: bool
    curr_frame: int
    barrier_layer: _containers.RepeatedCompositeFieldContainer[BarrierLayerProto]
    buffer_transform: TransformProto
    effective_scaling_mode: int
    corner_radius: float
    metadata: _containers.ScalarMap[int, str]
    effective_transform: TransformProto
    source_bounds: FloatRectProto
    bounds: FloatRectProto
    screen_bounds: FloatRectProto
    input_window_info: InputWindowInfoProto
    corner_radius_crop: FloatRectProto
    shadow_radius: float
    color_transform: ColorTransformProto
    is_relative_of: bool
    background_blur_radius: int
    owner_uid: int
    blur_regions: _containers.RepeatedCompositeFieldContainer[BlurRegion]
    is_trusted_overlay: bool
    requested_corner_radius: float
    destination_frame: RectProto
    original_id: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        name: _Optional[str] = ...,
        children: _Optional[_Iterable[int]] = ...,
        relatives: _Optional[_Iterable[int]] = ...,
        type: _Optional[str] = ...,
        transparent_region: _Optional[_Union[RegionProto, _Mapping]] = ...,
        visible_region: _Optional[_Union[RegionProto, _Mapping]] = ...,
        damage_region: _Optional[_Union[RegionProto, _Mapping]] = ...,
        layer_stack: _Optional[int] = ...,
        z: _Optional[int] = ...,
        position: _Optional[_Union[PositionProto, _Mapping]] = ...,
        requested_position: _Optional[_Union[PositionProto, _Mapping]] = ...,
        size: _Optional[_Union[SizeProto, _Mapping]] = ...,
        crop: _Optional[_Union[RectProto, _Mapping]] = ...,
        final_crop: _Optional[_Union[RectProto, _Mapping]] = ...,
        is_opaque: bool = ...,
        invalidate: bool = ...,
        dataspace: _Optional[str] = ...,
        pixel_format: _Optional[str] = ...,
        color: _Optional[_Union[ColorProto, _Mapping]] = ...,
        requested_color: _Optional[_Union[ColorProto, _Mapping]] = ...,
        flags: _Optional[int] = ...,
        transform: _Optional[_Union[TransformProto, _Mapping]] = ...,
        requested_transform: _Optional[_Union[TransformProto, _Mapping]] = ...,
        parent: _Optional[int] = ...,
        z_order_relative_of: _Optional[int] = ...,
        active_buffer: _Optional[_Union[ActiveBufferProto, _Mapping]] = ...,
        queued_frames: _Optional[int] = ...,
        refresh_pending: bool = ...,
        hwc_frame: _Optional[_Union[RectProto, _Mapping]] = ...,
        hwc_crop: _Optional[_Union[FloatRectProto, _Mapping]] = ...,
        hwc_transform: _Optional[int] = ...,
        window_type: _Optional[int] = ...,
        app_id: _Optional[int] = ...,
        hwc_composition_type: _Optional[_Union[HwcCompositionType, str]] = ...,
        is_protected: bool = ...,
        curr_frame: _Optional[int] = ...,
        barrier_layer: _Optional[_Iterable[_Union[BarrierLayerProto, _Mapping]]] = ...,
        buffer_transform: _Optional[_Union[TransformProto, _Mapping]] = ...,
        effective_scaling_mode: _Optional[int] = ...,
        corner_radius: _Optional[float] = ...,
        metadata: _Optional[_Mapping[int, str]] = ...,
        effective_transform: _Optional[_Union[TransformProto, _Mapping]] = ...,
        source_bounds: _Optional[_Union[FloatRectProto, _Mapping]] = ...,
        bounds: _Optional[_Union[FloatRectProto, _Mapping]] = ...,
        screen_bounds: _Optional[_Union[FloatRectProto, _Mapping]] = ...,
        input_window_info: _Optional[_Union[InputWindowInfoProto, _Mapping]] = ...,
        corner_radius_crop: _Optional[_Union[FloatRectProto, _Mapping]] = ...,
        shadow_radius: _Optional[float] = ...,
        color_transform: _Optional[_Union[ColorTransformProto, _Mapping]] = ...,
        is_relative_of: bool = ...,
        background_blur_radius: _Optional[int] = ...,
        owner_uid: _Optional[int] = ...,
        blur_regions: _Optional[_Iterable[_Union[BlurRegion, _Mapping]]] = ...,
        is_trusted_overlay: bool = ...,
        requested_corner_radius: _Optional[float] = ...,
        destination_frame: _Optional[_Union[RectProto, _Mapping]] = ...,
        original_id: _Optional[int] = ...,
    ) -> None: ...

class PositionProto(_message.Message):
    __slots__ = ("x", "y")
    X_FIELD_NUMBER: _ClassVar[int]
    Y_FIELD_NUMBER: _ClassVar[int]
    x: float
    y: float
    def __init__(self, x: _Optional[float] = ..., y: _Optional[float] = ...) -> None: ...

class FloatRectProto(_message.Message):
    __slots__ = ("left", "top", "right", "bottom")
    LEFT_FIELD_NUMBER: _ClassVar[int]
    TOP_FIELD_NUMBER: _ClassVar[int]
    RIGHT_FIELD_NUMBER: _ClassVar[int]
    BOTTOM_FIELD_NUMBER: _ClassVar[int]
    left: float
    top: float
    right: float
    bottom: float
    def __init__(
        self,
        left: _Optional[float] = ...,
        top: _Optional[float] = ...,
        right: _Optional[float] = ...,
        bottom: _Optional[float] = ...,
    ) -> None: ...

class ActiveBufferProto(_message.Message):
    __slots__ = ("width", "height", "stride", "format", "usage")
    WIDTH_FIELD_NUMBER: _ClassVar[int]
    HEIGHT_FIELD_NUMBER: _ClassVar[int]
    STRIDE_FIELD_NUMBER: _ClassVar[int]
    FORMAT_FIELD_NUMBER: _ClassVar[int]
    USAGE_FIELD_NUMBER: _ClassVar[int]
    width: int
    height: int
    stride: int
    format: int
    usage: int
    def __init__(
        self,
        width: _Optional[int] = ...,
        height: _Optional[int] = ...,
        stride: _Optional[int] = ...,
        format: _Optional[int] = ...,
        usage: _Optional[int] = ...,
    ) -> None: ...

class BarrierLayerProto(_message.Message):
    __slots__ = ("id", "frame_number")
    ID_FIELD_NUMBER: _ClassVar[int]
    FRAME_NUMBER_FIELD_NUMBER: _ClassVar[int]
    id: int
    frame_number: int
    def __init__(self, id: _Optional[int] = ..., frame_number: _Optional[int] = ...) -> None: ...

class TransactionTraceFile(_message.Message):
    __slots__ = ("magic_number", "entry", "real_to_elapsed_time_offset_nanos", "version")

    class MagicNumber(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        INVALID: _ClassVar[TransactionTraceFile.MagicNumber]
        MAGIC_NUMBER_L: _ClassVar[TransactionTraceFile.MagicNumber]
        MAGIC_NUMBER_H: _ClassVar[TransactionTraceFile.MagicNumber]

    INVALID: TransactionTraceFile.MagicNumber
    MAGIC_NUMBER_L: TransactionTraceFile.MagicNumber
    MAGIC_NUMBER_H: TransactionTraceFile.MagicNumber
    MAGIC_NUMBER_FIELD_NUMBER: _ClassVar[int]
    ENTRY_FIELD_NUMBER: _ClassVar[int]
    REAL_TO_ELAPSED_TIME_OFFSET_NANOS_FIELD_NUMBER: _ClassVar[int]
    VERSION_FIELD_NUMBER: _ClassVar[int]
    magic_number: int
    entry: _containers.RepeatedCompositeFieldContainer[TransactionTraceEntry]
    real_to_elapsed_time_offset_nanos: int
    version: int
    def __init__(
        self,
        magic_number: _Optional[int] = ...,
        entry: _Optional[_Iterable[_Union[TransactionTraceEntry, _Mapping]]] = ...,
        real_to_elapsed_time_offset_nanos: _Optional[int] = ...,
        version: _Optional[int] = ...,
    ) -> None: ...

class TransactionTraceEntry(_message.Message):
    __slots__ = (
        "elapsed_realtime_nanos",
        "vsync_id",
        "transactions",
        "added_layers",
        "destroyed_layers",
        "added_displays",
        "removed_displays",
        "destroyed_layer_handles",
        "displays_changed",
        "displays",
    )
    ELAPSED_REALTIME_NANOS_FIELD_NUMBER: _ClassVar[int]
    VSYNC_ID_FIELD_NUMBER: _ClassVar[int]
    TRANSACTIONS_FIELD_NUMBER: _ClassVar[int]
    ADDED_LAYERS_FIELD_NUMBER: _ClassVar[int]
    DESTROYED_LAYERS_FIELD_NUMBER: _ClassVar[int]
    ADDED_DISPLAYS_FIELD_NUMBER: _ClassVar[int]
    REMOVED_DISPLAYS_FIELD_NUMBER: _ClassVar[int]
    DESTROYED_LAYER_HANDLES_FIELD_NUMBER: _ClassVar[int]
    DISPLAYS_CHANGED_FIELD_NUMBER: _ClassVar[int]
    DISPLAYS_FIELD_NUMBER: _ClassVar[int]
    elapsed_realtime_nanos: int
    vsync_id: int
    transactions: _containers.RepeatedCompositeFieldContainer[TransactionState]
    added_layers: _containers.RepeatedCompositeFieldContainer[LayerCreationArgs]
    destroyed_layers: _containers.RepeatedScalarFieldContainer[int]
    added_displays: _containers.RepeatedCompositeFieldContainer[DisplayState]
    removed_displays: _containers.RepeatedScalarFieldContainer[int]
    destroyed_layer_handles: _containers.RepeatedScalarFieldContainer[int]
    displays_changed: bool
    displays: _containers.RepeatedCompositeFieldContainer[DisplayInfo]
    def __init__(
        self,
        elapsed_realtime_nanos: _Optional[int] = ...,
        vsync_id: _Optional[int] = ...,
        transactions: _Optional[_Iterable[_Union[TransactionState, _Mapping]]] = ...,
        added_layers: _Optional[_Iterable[_Union[LayerCreationArgs, _Mapping]]] = ...,
        destroyed_layers: _Optional[_Iterable[int]] = ...,
        added_displays: _Optional[_Iterable[_Union[DisplayState, _Mapping]]] = ...,
        removed_displays: _Optional[_Iterable[int]] = ...,
        destroyed_layer_handles: _Optional[_Iterable[int]] = ...,
        displays_changed: bool = ...,
        displays: _Optional[_Iterable[_Union[DisplayInfo, _Mapping]]] = ...,
    ) -> None: ...

class DisplayInfo(_message.Message):
    __slots__ = (
        "layer_stack",
        "display_id",
        "logical_width",
        "logical_height",
        "transform_inverse",
        "transform",
        "receives_input",
        "is_secure",
        "is_primary",
        "is_virtual",
        "rotation_flags",
        "transform_hint",
    )
    LAYER_STACK_FIELD_NUMBER: _ClassVar[int]
    DISPLAY_ID_FIELD_NUMBER: _ClassVar[int]
    LOGICAL_WIDTH_FIELD_NUMBER: _ClassVar[int]
    LOGICAL_HEIGHT_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_INVERSE_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    RECEIVES_INPUT_FIELD_NUMBER: _ClassVar[int]
    IS_SECURE_FIELD_NUMBER: _ClassVar[int]
    IS_PRIMARY_FIELD_NUMBER: _ClassVar[int]
    IS_VIRTUAL_FIELD_NUMBER: _ClassVar[int]
    ROTATION_FLAGS_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_HINT_FIELD_NUMBER: _ClassVar[int]
    layer_stack: int
    display_id: int
    logical_width: int
    logical_height: int
    transform_inverse: Transform
    transform: Transform
    receives_input: bool
    is_secure: bool
    is_primary: bool
    is_virtual: bool
    rotation_flags: int
    transform_hint: int
    def __init__(
        self,
        layer_stack: _Optional[int] = ...,
        display_id: _Optional[int] = ...,
        logical_width: _Optional[int] = ...,
        logical_height: _Optional[int] = ...,
        transform_inverse: _Optional[_Union[Transform, _Mapping]] = ...,
        transform: _Optional[_Union[Transform, _Mapping]] = ...,
        receives_input: bool = ...,
        is_secure: bool = ...,
        is_primary: bool = ...,
        is_virtual: bool = ...,
        rotation_flags: _Optional[int] = ...,
        transform_hint: _Optional[int] = ...,
    ) -> None: ...

class LayerCreationArgs(_message.Message):
    __slots__ = ("layer_id", "name", "flags", "parent_id", "mirror_from_id", "add_to_root", "layer_stack_to_mirror")
    LAYER_ID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    PARENT_ID_FIELD_NUMBER: _ClassVar[int]
    MIRROR_FROM_ID_FIELD_NUMBER: _ClassVar[int]
    ADD_TO_ROOT_FIELD_NUMBER: _ClassVar[int]
    LAYER_STACK_TO_MIRROR_FIELD_NUMBER: _ClassVar[int]
    layer_id: int
    name: str
    flags: int
    parent_id: int
    mirror_from_id: int
    add_to_root: bool
    layer_stack_to_mirror: int
    def __init__(
        self,
        layer_id: _Optional[int] = ...,
        name: _Optional[str] = ...,
        flags: _Optional[int] = ...,
        parent_id: _Optional[int] = ...,
        mirror_from_id: _Optional[int] = ...,
        add_to_root: bool = ...,
        layer_stack_to_mirror: _Optional[int] = ...,
    ) -> None: ...

class Transform(_message.Message):
    __slots__ = ("dsdx", "dtdx", "dtdy", "dsdy", "tx", "ty")
    DSDX_FIELD_NUMBER: _ClassVar[int]
    DTDX_FIELD_NUMBER: _ClassVar[int]
    DTDY_FIELD_NUMBER: _ClassVar[int]
    DSDY_FIELD_NUMBER: _ClassVar[int]
    TX_FIELD_NUMBER: _ClassVar[int]
    TY_FIELD_NUMBER: _ClassVar[int]
    dsdx: float
    dtdx: float
    dtdy: float
    dsdy: float
    tx: float
    ty: float
    def __init__(
        self,
        dsdx: _Optional[float] = ...,
        dtdx: _Optional[float] = ...,
        dtdy: _Optional[float] = ...,
        dsdy: _Optional[float] = ...,
        tx: _Optional[float] = ...,
        ty: _Optional[float] = ...,
    ) -> None: ...

class TransactionState(_message.Message):
    __slots__ = (
        "pid",
        "uid",
        "vsync_id",
        "input_event_id",
        "post_time",
        "transaction_id",
        "layer_changes",
        "display_changes",
        "merged_transaction_ids",
    )
    PID_FIELD_NUMBER: _ClassVar[int]
    UID_FIELD_NUMBER: _ClassVar[int]
    VSYNC_ID_FIELD_NUMBER: _ClassVar[int]
    INPUT_EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    POST_TIME_FIELD_NUMBER: _ClassVar[int]
    TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    LAYER_CHANGES_FIELD_NUMBER: _ClassVar[int]
    DISPLAY_CHANGES_FIELD_NUMBER: _ClassVar[int]
    MERGED_TRANSACTION_IDS_FIELD_NUMBER: _ClassVar[int]
    pid: int
    uid: int
    vsync_id: int
    input_event_id: int
    post_time: int
    transaction_id: int
    layer_changes: _containers.RepeatedCompositeFieldContainer[LayerState]
    display_changes: _containers.RepeatedCompositeFieldContainer[DisplayState]
    merged_transaction_ids: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self,
        pid: _Optional[int] = ...,
        uid: _Optional[int] = ...,
        vsync_id: _Optional[int] = ...,
        input_event_id: _Optional[int] = ...,
        post_time: _Optional[int] = ...,
        transaction_id: _Optional[int] = ...,
        layer_changes: _Optional[_Iterable[_Union[LayerState, _Mapping]]] = ...,
        display_changes: _Optional[_Iterable[_Union[DisplayState, _Mapping]]] = ...,
        merged_transaction_ids: _Optional[_Iterable[int]] = ...,
    ) -> None: ...

class LayerState(_message.Message):
    __slots__ = (
        "layer_id",
        "what",
        "x",
        "y",
        "z",
        "w",
        "h",
        "layer_stack",
        "flags",
        "mask",
        "matrix",
        "corner_radius",
        "background_blur_radius",
        "parent_id",
        "relative_parent_id",
        "alpha",
        "color",
        "transparent_region",
        "transform",
        "transform_to_display_inverse",
        "crop",
        "buffer_data",
        "api",
        "has_sideband_stream",
        "color_transform",
        "blur_regions",
        "window_info_handle",
        "bg_color_alpha",
        "bg_color_dataspace",
        "color_space_agnostic",
        "shadow_radius",
        "frame_rate_selection_priority",
        "frame_rate",
        "frame_rate_compatibility",
        "change_frame_rate_strategy",
        "fixed_transform_hint",
        "frame_number",
        "auto_refresh",
        "is_trusted_overlay",
        "buffer_crop",
        "destination_frame",
        "drop_input_mode",
    )

    class ChangesLsb(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        eChangesLsbNone: _ClassVar[LayerState.ChangesLsb]
        ePositionChanged: _ClassVar[LayerState.ChangesLsb]
        eLayerChanged: _ClassVar[LayerState.ChangesLsb]
        eAlphaChanged: _ClassVar[LayerState.ChangesLsb]
        eMatrixChanged: _ClassVar[LayerState.ChangesLsb]
        eTransparentRegionChanged: _ClassVar[LayerState.ChangesLsb]
        eFlagsChanged: _ClassVar[LayerState.ChangesLsb]
        eLayerStackChanged: _ClassVar[LayerState.ChangesLsb]
        eReleaseBufferListenerChanged: _ClassVar[LayerState.ChangesLsb]
        eShadowRadiusChanged: _ClassVar[LayerState.ChangesLsb]
        eBufferCropChanged: _ClassVar[LayerState.ChangesLsb]
        eRelativeLayerChanged: _ClassVar[LayerState.ChangesLsb]
        eReparent: _ClassVar[LayerState.ChangesLsb]
        eColorChanged: _ClassVar[LayerState.ChangesLsb]
        eBufferTransformChanged: _ClassVar[LayerState.ChangesLsb]
        eTransformToDisplayInverseChanged: _ClassVar[LayerState.ChangesLsb]
        eCropChanged: _ClassVar[LayerState.ChangesLsb]
        eBufferChanged: _ClassVar[LayerState.ChangesLsb]
        eAcquireFenceChanged: _ClassVar[LayerState.ChangesLsb]
        eDataspaceChanged: _ClassVar[LayerState.ChangesLsb]
        eHdrMetadataChanged: _ClassVar[LayerState.ChangesLsb]
        eSurfaceDamageRegionChanged: _ClassVar[LayerState.ChangesLsb]
        eApiChanged: _ClassVar[LayerState.ChangesLsb]
        eSidebandStreamChanged: _ClassVar[LayerState.ChangesLsb]
        eColorTransformChanged: _ClassVar[LayerState.ChangesLsb]
        eHasListenerCallbacksChanged: _ClassVar[LayerState.ChangesLsb]
        eInputInfoChanged: _ClassVar[LayerState.ChangesLsb]
        eCornerRadiusChanged: _ClassVar[LayerState.ChangesLsb]

    eChangesLsbNone: LayerState.ChangesLsb
    ePositionChanged: LayerState.ChangesLsb
    eLayerChanged: LayerState.ChangesLsb
    eAlphaChanged: LayerState.ChangesLsb
    eMatrixChanged: LayerState.ChangesLsb
    eTransparentRegionChanged: LayerState.ChangesLsb
    eFlagsChanged: LayerState.ChangesLsb
    eLayerStackChanged: LayerState.ChangesLsb
    eReleaseBufferListenerChanged: LayerState.ChangesLsb
    eShadowRadiusChanged: LayerState.ChangesLsb
    eBufferCropChanged: LayerState.ChangesLsb
    eRelativeLayerChanged: LayerState.ChangesLsb
    eReparent: LayerState.ChangesLsb
    eColorChanged: LayerState.ChangesLsb
    eBufferTransformChanged: LayerState.ChangesLsb
    eTransformToDisplayInverseChanged: LayerState.ChangesLsb
    eCropChanged: LayerState.ChangesLsb
    eBufferChanged: LayerState.ChangesLsb
    eAcquireFenceChanged: LayerState.ChangesLsb
    eDataspaceChanged: LayerState.ChangesLsb
    eHdrMetadataChanged: LayerState.ChangesLsb
    eSurfaceDamageRegionChanged: LayerState.ChangesLsb
    eApiChanged: LayerState.ChangesLsb
    eSidebandStreamChanged: LayerState.ChangesLsb
    eColorTransformChanged: LayerState.ChangesLsb
    eHasListenerCallbacksChanged: LayerState.ChangesLsb
    eInputInfoChanged: LayerState.ChangesLsb
    eCornerRadiusChanged: LayerState.ChangesLsb

    class ChangesMsb(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        eChangesMsbNone: _ClassVar[LayerState.ChangesMsb]
        eDestinationFrameChanged: _ClassVar[LayerState.ChangesMsb]
        eCachedBufferChanged: _ClassVar[LayerState.ChangesMsb]
        eBackgroundColorChanged: _ClassVar[LayerState.ChangesMsb]
        eMetadataChanged: _ClassVar[LayerState.ChangesMsb]
        eColorSpaceAgnosticChanged: _ClassVar[LayerState.ChangesMsb]
        eFrameRateSelectionPriority: _ClassVar[LayerState.ChangesMsb]
        eFrameRateChanged: _ClassVar[LayerState.ChangesMsb]
        eBackgroundBlurRadiusChanged: _ClassVar[LayerState.ChangesMsb]
        eProducerDisconnect: _ClassVar[LayerState.ChangesMsb]
        eFixedTransformHintChanged: _ClassVar[LayerState.ChangesMsb]
        eFrameNumberChanged: _ClassVar[LayerState.ChangesMsb]
        eBlurRegionsChanged: _ClassVar[LayerState.ChangesMsb]
        eAutoRefreshChanged: _ClassVar[LayerState.ChangesMsb]
        eStretchChanged: _ClassVar[LayerState.ChangesMsb]
        eTrustedOverlayChanged: _ClassVar[LayerState.ChangesMsb]
        eDropInputModeChanged: _ClassVar[LayerState.ChangesMsb]

    eChangesMsbNone: LayerState.ChangesMsb
    eDestinationFrameChanged: LayerState.ChangesMsb
    eCachedBufferChanged: LayerState.ChangesMsb
    eBackgroundColorChanged: LayerState.ChangesMsb
    eMetadataChanged: LayerState.ChangesMsb
    eColorSpaceAgnosticChanged: LayerState.ChangesMsb
    eFrameRateSelectionPriority: LayerState.ChangesMsb
    eFrameRateChanged: LayerState.ChangesMsb
    eBackgroundBlurRadiusChanged: LayerState.ChangesMsb
    eProducerDisconnect: LayerState.ChangesMsb
    eFixedTransformHintChanged: LayerState.ChangesMsb
    eFrameNumberChanged: LayerState.ChangesMsb
    eBlurRegionsChanged: LayerState.ChangesMsb
    eAutoRefreshChanged: LayerState.ChangesMsb
    eStretchChanged: LayerState.ChangesMsb
    eTrustedOverlayChanged: LayerState.ChangesMsb
    eDropInputModeChanged: LayerState.ChangesMsb

    class Flags(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        eFlagsNone: _ClassVar[LayerState.Flags]
        eLayerHidden: _ClassVar[LayerState.Flags]
        eLayerOpaque: _ClassVar[LayerState.Flags]
        eLayerSkipScreenshot: _ClassVar[LayerState.Flags]
        eLayerSecure: _ClassVar[LayerState.Flags]
        eEnableBackpressure: _ClassVar[LayerState.Flags]
        eLayerIsDisplayDecoration: _ClassVar[LayerState.Flags]

    eFlagsNone: LayerState.Flags
    eLayerHidden: LayerState.Flags
    eLayerOpaque: LayerState.Flags
    eLayerSkipScreenshot: LayerState.Flags
    eLayerSecure: LayerState.Flags
    eEnableBackpressure: LayerState.Flags
    eLayerIsDisplayDecoration: LayerState.Flags

    class DropInputMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        NONE: _ClassVar[LayerState.DropInputMode]
        ALL: _ClassVar[LayerState.DropInputMode]
        OBSCURED: _ClassVar[LayerState.DropInputMode]

    NONE: LayerState.DropInputMode
    ALL: LayerState.DropInputMode
    OBSCURED: LayerState.DropInputMode

    class Matrix22(_message.Message):
        __slots__ = ("dsdx", "dtdx", "dtdy", "dsdy")
        DSDX_FIELD_NUMBER: _ClassVar[int]
        DTDX_FIELD_NUMBER: _ClassVar[int]
        DTDY_FIELD_NUMBER: _ClassVar[int]
        DSDY_FIELD_NUMBER: _ClassVar[int]
        dsdx: float
        dtdx: float
        dtdy: float
        dsdy: float
        def __init__(
            self,
            dsdx: _Optional[float] = ...,
            dtdx: _Optional[float] = ...,
            dtdy: _Optional[float] = ...,
            dsdy: _Optional[float] = ...,
        ) -> None: ...

    class Color3(_message.Message):
        __slots__ = ("r", "g", "b")
        R_FIELD_NUMBER: _ClassVar[int]
        G_FIELD_NUMBER: _ClassVar[int]
        B_FIELD_NUMBER: _ClassVar[int]
        r: float
        g: float
        b: float
        def __init__(self, r: _Optional[float] = ..., g: _Optional[float] = ..., b: _Optional[float] = ...) -> None: ...

    class BufferData(_message.Message):
        __slots__ = (
            "buffer_id",
            "width",
            "height",
            "frame_number",
            "flags",
            "cached_buffer_id",
            "pixel_format",
            "usage",
        )

        class BufferDataChange(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            BufferDataChangeNone: _ClassVar[LayerState.BufferData.BufferDataChange]
            fenceChanged: _ClassVar[LayerState.BufferData.BufferDataChange]
            frameNumberChanged: _ClassVar[LayerState.BufferData.BufferDataChange]
            cachedBufferChanged: _ClassVar[LayerState.BufferData.BufferDataChange]

        BufferDataChangeNone: LayerState.BufferData.BufferDataChange
        fenceChanged: LayerState.BufferData.BufferDataChange
        frameNumberChanged: LayerState.BufferData.BufferDataChange
        cachedBufferChanged: LayerState.BufferData.BufferDataChange

        class PixelFormat(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            PIXEL_FORMAT_UNKNOWN: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_CUSTOM: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_TRANSLUCENT: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_TRANSPARENT: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_OPAQUE: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGBA_8888: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGBX_8888: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGB_888: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGB_565: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_BGRA_8888: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGBA_5551: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGBA_4444: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGBA_FP16: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_RGBA_1010102: _ClassVar[LayerState.BufferData.PixelFormat]
            PIXEL_FORMAT_R_8: _ClassVar[LayerState.BufferData.PixelFormat]

        PIXEL_FORMAT_UNKNOWN: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_CUSTOM: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_TRANSLUCENT: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_TRANSPARENT: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_OPAQUE: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGBA_8888: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGBX_8888: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGB_888: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGB_565: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_BGRA_8888: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGBA_5551: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGBA_4444: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGBA_FP16: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_RGBA_1010102: LayerState.BufferData.PixelFormat
        PIXEL_FORMAT_R_8: LayerState.BufferData.PixelFormat
        BUFFER_ID_FIELD_NUMBER: _ClassVar[int]
        WIDTH_FIELD_NUMBER: _ClassVar[int]
        HEIGHT_FIELD_NUMBER: _ClassVar[int]
        FRAME_NUMBER_FIELD_NUMBER: _ClassVar[int]
        FLAGS_FIELD_NUMBER: _ClassVar[int]
        CACHED_BUFFER_ID_FIELD_NUMBER: _ClassVar[int]
        PIXEL_FORMAT_FIELD_NUMBER: _ClassVar[int]
        USAGE_FIELD_NUMBER: _ClassVar[int]
        buffer_id: int
        width: int
        height: int
        frame_number: int
        flags: int
        cached_buffer_id: int
        pixel_format: LayerState.BufferData.PixelFormat
        usage: int
        def __init__(
            self,
            buffer_id: _Optional[int] = ...,
            width: _Optional[int] = ...,
            height: _Optional[int] = ...,
            frame_number: _Optional[int] = ...,
            flags: _Optional[int] = ...,
            cached_buffer_id: _Optional[int] = ...,
            pixel_format: _Optional[_Union[LayerState.BufferData.PixelFormat, str]] = ...,
            usage: _Optional[int] = ...,
        ) -> None: ...

    class WindowInfo(_message.Message):
        __slots__ = (
            "layout_params_flags",
            "layout_params_type",
            "touchable_region",
            "surface_inset",
            "focusable",
            "has_wallpaper",
            "global_scale_factor",
            "crop_layer_id",
            "replace_touchable_region_with_crop",
            "touchable_region_crop",
            "transform",
            "input_config",
        )
        LAYOUT_PARAMS_FLAGS_FIELD_NUMBER: _ClassVar[int]
        LAYOUT_PARAMS_TYPE_FIELD_NUMBER: _ClassVar[int]
        TOUCHABLE_REGION_FIELD_NUMBER: _ClassVar[int]
        SURFACE_INSET_FIELD_NUMBER: _ClassVar[int]
        FOCUSABLE_FIELD_NUMBER: _ClassVar[int]
        HAS_WALLPAPER_FIELD_NUMBER: _ClassVar[int]
        GLOBAL_SCALE_FACTOR_FIELD_NUMBER: _ClassVar[int]
        CROP_LAYER_ID_FIELD_NUMBER: _ClassVar[int]
        REPLACE_TOUCHABLE_REGION_WITH_CROP_FIELD_NUMBER: _ClassVar[int]
        TOUCHABLE_REGION_CROP_FIELD_NUMBER: _ClassVar[int]
        TRANSFORM_FIELD_NUMBER: _ClassVar[int]
        INPUT_CONFIG_FIELD_NUMBER: _ClassVar[int]
        layout_params_flags: int
        layout_params_type: int
        touchable_region: RegionProto
        surface_inset: int
        focusable: bool
        has_wallpaper: bool
        global_scale_factor: float
        crop_layer_id: int
        replace_touchable_region_with_crop: bool
        touchable_region_crop: RectProto
        transform: Transform
        input_config: int
        def __init__(
            self,
            layout_params_flags: _Optional[int] = ...,
            layout_params_type: _Optional[int] = ...,
            touchable_region: _Optional[_Union[RegionProto, _Mapping]] = ...,
            surface_inset: _Optional[int] = ...,
            focusable: bool = ...,
            has_wallpaper: bool = ...,
            global_scale_factor: _Optional[float] = ...,
            crop_layer_id: _Optional[int] = ...,
            replace_touchable_region_with_crop: bool = ...,
            touchable_region_crop: _Optional[_Union[RectProto, _Mapping]] = ...,
            transform: _Optional[_Union[Transform, _Mapping]] = ...,
            input_config: _Optional[int] = ...,
        ) -> None: ...

    LAYER_ID_FIELD_NUMBER: _ClassVar[int]
    WHAT_FIELD_NUMBER: _ClassVar[int]
    X_FIELD_NUMBER: _ClassVar[int]
    Y_FIELD_NUMBER: _ClassVar[int]
    Z_FIELD_NUMBER: _ClassVar[int]
    W_FIELD_NUMBER: _ClassVar[int]
    H_FIELD_NUMBER: _ClassVar[int]
    LAYER_STACK_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    MASK_FIELD_NUMBER: _ClassVar[int]
    MATRIX_FIELD_NUMBER: _ClassVar[int]
    CORNER_RADIUS_FIELD_NUMBER: _ClassVar[int]
    BACKGROUND_BLUR_RADIUS_FIELD_NUMBER: _ClassVar[int]
    PARENT_ID_FIELD_NUMBER: _ClassVar[int]
    RELATIVE_PARENT_ID_FIELD_NUMBER: _ClassVar[int]
    ALPHA_FIELD_NUMBER: _ClassVar[int]
    COLOR_FIELD_NUMBER: _ClassVar[int]
    TRANSPARENT_REGION_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    TRANSFORM_TO_DISPLAY_INVERSE_FIELD_NUMBER: _ClassVar[int]
    CROP_FIELD_NUMBER: _ClassVar[int]
    BUFFER_DATA_FIELD_NUMBER: _ClassVar[int]
    API_FIELD_NUMBER: _ClassVar[int]
    HAS_SIDEBAND_STREAM_FIELD_NUMBER: _ClassVar[int]
    COLOR_TRANSFORM_FIELD_NUMBER: _ClassVar[int]
    BLUR_REGIONS_FIELD_NUMBER: _ClassVar[int]
    WINDOW_INFO_HANDLE_FIELD_NUMBER: _ClassVar[int]
    BG_COLOR_ALPHA_FIELD_NUMBER: _ClassVar[int]
    BG_COLOR_DATASPACE_FIELD_NUMBER: _ClassVar[int]
    COLOR_SPACE_AGNOSTIC_FIELD_NUMBER: _ClassVar[int]
    SHADOW_RADIUS_FIELD_NUMBER: _ClassVar[int]
    FRAME_RATE_SELECTION_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    FRAME_RATE_FIELD_NUMBER: _ClassVar[int]
    FRAME_RATE_COMPATIBILITY_FIELD_NUMBER: _ClassVar[int]
    CHANGE_FRAME_RATE_STRATEGY_FIELD_NUMBER: _ClassVar[int]
    FIXED_TRANSFORM_HINT_FIELD_NUMBER: _ClassVar[int]
    FRAME_NUMBER_FIELD_NUMBER: _ClassVar[int]
    AUTO_REFRESH_FIELD_NUMBER: _ClassVar[int]
    IS_TRUSTED_OVERLAY_FIELD_NUMBER: _ClassVar[int]
    BUFFER_CROP_FIELD_NUMBER: _ClassVar[int]
    DESTINATION_FRAME_FIELD_NUMBER: _ClassVar[int]
    DROP_INPUT_MODE_FIELD_NUMBER: _ClassVar[int]
    layer_id: int
    what: int
    x: float
    y: float
    z: int
    w: int
    h: int
    layer_stack: int
    flags: int
    mask: int
    matrix: LayerState.Matrix22
    corner_radius: float
    background_blur_radius: int
    parent_id: int
    relative_parent_id: int
    alpha: float
    color: LayerState.Color3
    transparent_region: RegionProto
    transform: int
    transform_to_display_inverse: bool
    crop: RectProto
    buffer_data: LayerState.BufferData
    api: int
    has_sideband_stream: bool
    color_transform: ColorTransformProto
    blur_regions: _containers.RepeatedCompositeFieldContainer[BlurRegion]
    window_info_handle: LayerState.WindowInfo
    bg_color_alpha: float
    bg_color_dataspace: int
    color_space_agnostic: bool
    shadow_radius: float
    frame_rate_selection_priority: int
    frame_rate: float
    frame_rate_compatibility: int
    change_frame_rate_strategy: int
    fixed_transform_hint: int
    frame_number: int
    auto_refresh: bool
    is_trusted_overlay: bool
    buffer_crop: RectProto
    destination_frame: RectProto
    drop_input_mode: LayerState.DropInputMode
    def __init__(
        self,
        layer_id: _Optional[int] = ...,
        what: _Optional[int] = ...,
        x: _Optional[float] = ...,
        y: _Optional[float] = ...,
        z: _Optional[int] = ...,
        w: _Optional[int] = ...,
        h: _Optional[int] = ...,
        layer_stack: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        mask: _Optional[int] = ...,
        matrix: _Optional[_Union[LayerState.Matrix22, _Mapping]] = ...,
        corner_radius: _Optional[float] = ...,
        background_blur_radius: _Optional[int] = ...,
        parent_id: _Optional[int] = ...,
        relative_parent_id: _Optional[int] = ...,
        alpha: _Optional[float] = ...,
        color: _Optional[_Union[LayerState.Color3, _Mapping]] = ...,
        transparent_region: _Optional[_Union[RegionProto, _Mapping]] = ...,
        transform: _Optional[int] = ...,
        transform_to_display_inverse: bool = ...,
        crop: _Optional[_Union[RectProto, _Mapping]] = ...,
        buffer_data: _Optional[_Union[LayerState.BufferData, _Mapping]] = ...,
        api: _Optional[int] = ...,
        has_sideband_stream: bool = ...,
        color_transform: _Optional[_Union[ColorTransformProto, _Mapping]] = ...,
        blur_regions: _Optional[_Iterable[_Union[BlurRegion, _Mapping]]] = ...,
        window_info_handle: _Optional[_Union[LayerState.WindowInfo, _Mapping]] = ...,
        bg_color_alpha: _Optional[float] = ...,
        bg_color_dataspace: _Optional[int] = ...,
        color_space_agnostic: bool = ...,
        shadow_radius: _Optional[float] = ...,
        frame_rate_selection_priority: _Optional[int] = ...,
        frame_rate: _Optional[float] = ...,
        frame_rate_compatibility: _Optional[int] = ...,
        change_frame_rate_strategy: _Optional[int] = ...,
        fixed_transform_hint: _Optional[int] = ...,
        frame_number: _Optional[int] = ...,
        auto_refresh: bool = ...,
        is_trusted_overlay: bool = ...,
        buffer_crop: _Optional[_Union[RectProto, _Mapping]] = ...,
        destination_frame: _Optional[_Union[RectProto, _Mapping]] = ...,
        drop_input_mode: _Optional[_Union[LayerState.DropInputMode, str]] = ...,
    ) -> None: ...

class DisplayState(_message.Message):
    __slots__ = (
        "id",
        "what",
        "flags",
        "layer_stack",
        "orientation",
        "layer_stack_space_rect",
        "oriented_display_space_rect",
        "width",
        "height",
    )

    class Changes(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        eChangesNone: _ClassVar[DisplayState.Changes]
        eSurfaceChanged: _ClassVar[DisplayState.Changes]
        eLayerStackChanged: _ClassVar[DisplayState.Changes]
        eDisplayProjectionChanged: _ClassVar[DisplayState.Changes]
        eDisplaySizeChanged: _ClassVar[DisplayState.Changes]
        eFlagsChanged: _ClassVar[DisplayState.Changes]

    eChangesNone: DisplayState.Changes
    eSurfaceChanged: DisplayState.Changes
    eLayerStackChanged: DisplayState.Changes
    eDisplayProjectionChanged: DisplayState.Changes
    eDisplaySizeChanged: DisplayState.Changes
    eFlagsChanged: DisplayState.Changes
    ID_FIELD_NUMBER: _ClassVar[int]
    WHAT_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    LAYER_STACK_FIELD_NUMBER: _ClassVar[int]
    ORIENTATION_FIELD_NUMBER: _ClassVar[int]
    LAYER_STACK_SPACE_RECT_FIELD_NUMBER: _ClassVar[int]
    ORIENTED_DISPLAY_SPACE_RECT_FIELD_NUMBER: _ClassVar[int]
    WIDTH_FIELD_NUMBER: _ClassVar[int]
    HEIGHT_FIELD_NUMBER: _ClassVar[int]
    id: int
    what: int
    flags: int
    layer_stack: int
    orientation: int
    layer_stack_space_rect: RectProto
    oriented_display_space_rect: RectProto
    width: int
    height: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        what: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        layer_stack: _Optional[int] = ...,
        orientation: _Optional[int] = ...,
        layer_stack_space_rect: _Optional[_Union[RectProto, _Mapping]] = ...,
        oriented_display_space_rect: _Optional[_Union[RectProto, _Mapping]] = ...,
        width: _Optional[int] = ...,
        height: _Optional[int] = ...,
    ) -> None: ...

class ChromeBenchmarkMetadata(_message.Message):
    __slots__ = (
        "benchmark_start_time_us",
        "story_run_time_us",
        "benchmark_name",
        "benchmark_description",
        "label",
        "story_name",
        "story_tags",
        "story_run_index",
        "had_failures",
    )
    BENCHMARK_START_TIME_US_FIELD_NUMBER: _ClassVar[int]
    STORY_RUN_TIME_US_FIELD_NUMBER: _ClassVar[int]
    BENCHMARK_NAME_FIELD_NUMBER: _ClassVar[int]
    BENCHMARK_DESCRIPTION_FIELD_NUMBER: _ClassVar[int]
    LABEL_FIELD_NUMBER: _ClassVar[int]
    STORY_NAME_FIELD_NUMBER: _ClassVar[int]
    STORY_TAGS_FIELD_NUMBER: _ClassVar[int]
    STORY_RUN_INDEX_FIELD_NUMBER: _ClassVar[int]
    HAD_FAILURES_FIELD_NUMBER: _ClassVar[int]
    benchmark_start_time_us: int
    story_run_time_us: int
    benchmark_name: str
    benchmark_description: str
    label: str
    story_name: str
    story_tags: _containers.RepeatedScalarFieldContainer[str]
    story_run_index: int
    had_failures: bool
    def __init__(
        self,
        benchmark_start_time_us: _Optional[int] = ...,
        story_run_time_us: _Optional[int] = ...,
        benchmark_name: _Optional[str] = ...,
        benchmark_description: _Optional[str] = ...,
        label: _Optional[str] = ...,
        story_name: _Optional[str] = ...,
        story_tags: _Optional[_Iterable[str]] = ...,
        story_run_index: _Optional[int] = ...,
        had_failures: bool = ...,
    ) -> None: ...

class ChromeMetadataPacket(_message.Message):
    __slots__ = ("background_tracing_metadata", "chrome_version_code", "enabled_categories", "field_trial_hashes")

    class FinchHash(_message.Message):
        __slots__ = ("name", "group")
        NAME_FIELD_NUMBER: _ClassVar[int]
        GROUP_FIELD_NUMBER: _ClassVar[int]
        name: int
        group: int
        def __init__(self, name: _Optional[int] = ..., group: _Optional[int] = ...) -> None: ...

    BACKGROUND_TRACING_METADATA_FIELD_NUMBER: _ClassVar[int]
    CHROME_VERSION_CODE_FIELD_NUMBER: _ClassVar[int]
    ENABLED_CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    FIELD_TRIAL_HASHES_FIELD_NUMBER: _ClassVar[int]
    background_tracing_metadata: BackgroundTracingMetadata
    chrome_version_code: int
    enabled_categories: str
    field_trial_hashes: _containers.RepeatedCompositeFieldContainer[ChromeMetadataPacket.FinchHash]
    def __init__(
        self,
        background_tracing_metadata: _Optional[_Union[BackgroundTracingMetadata, _Mapping]] = ...,
        chrome_version_code: _Optional[int] = ...,
        enabled_categories: _Optional[str] = ...,
        field_trial_hashes: _Optional[_Iterable[_Union[ChromeMetadataPacket.FinchHash, _Mapping]]] = ...,
    ) -> None: ...

class BackgroundTracingMetadata(_message.Message):
    __slots__ = ("triggered_rule", "active_rules", "scenario_name_hash")

    class TriggerRule(_message.Message):
        __slots__ = ("trigger_type", "histogram_rule", "named_rule", "name_hash")

        class TriggerType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            TRIGGER_UNSPECIFIED: _ClassVar[BackgroundTracingMetadata.TriggerRule.TriggerType]
            MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE: _ClassVar[
                BackgroundTracingMetadata.TriggerRule.TriggerType
            ]
            MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED: _ClassVar[BackgroundTracingMetadata.TriggerRule.TriggerType]

        TRIGGER_UNSPECIFIED: BackgroundTracingMetadata.TriggerRule.TriggerType
        MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE: BackgroundTracingMetadata.TriggerRule.TriggerType
        MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED: BackgroundTracingMetadata.TriggerRule.TriggerType

        class HistogramRule(_message.Message):
            __slots__ = ("histogram_name_hash", "histogram_min_trigger", "histogram_max_trigger")
            HISTOGRAM_NAME_HASH_FIELD_NUMBER: _ClassVar[int]
            HISTOGRAM_MIN_TRIGGER_FIELD_NUMBER: _ClassVar[int]
            HISTOGRAM_MAX_TRIGGER_FIELD_NUMBER: _ClassVar[int]
            histogram_name_hash: int
            histogram_min_trigger: int
            histogram_max_trigger: int
            def __init__(
                self,
                histogram_name_hash: _Optional[int] = ...,
                histogram_min_trigger: _Optional[int] = ...,
                histogram_max_trigger: _Optional[int] = ...,
            ) -> None: ...

        class NamedRule(_message.Message):
            __slots__ = ("event_type", "content_trigger_name_hash")

            class EventType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
                __slots__ = ()
                UNSPECIFIED: _ClassVar[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType]
                SESSION_RESTORE: _ClassVar[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType]
                NAVIGATION: _ClassVar[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType]
                STARTUP: _ClassVar[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType]
                REACHED_CODE: _ClassVar[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType]
                CONTENT_TRIGGER: _ClassVar[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType]
                TEST_RULE: _ClassVar[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType]

            UNSPECIFIED: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            SESSION_RESTORE: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            NAVIGATION: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            STARTUP: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            REACHED_CODE: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            CONTENT_TRIGGER: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            TEST_RULE: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            EVENT_TYPE_FIELD_NUMBER: _ClassVar[int]
            CONTENT_TRIGGER_NAME_HASH_FIELD_NUMBER: _ClassVar[int]
            event_type: BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
            content_trigger_name_hash: int
            def __init__(
                self,
                event_type: _Optional[_Union[BackgroundTracingMetadata.TriggerRule.NamedRule.EventType, str]] = ...,
                content_trigger_name_hash: _Optional[int] = ...,
            ) -> None: ...

        TRIGGER_TYPE_FIELD_NUMBER: _ClassVar[int]
        HISTOGRAM_RULE_FIELD_NUMBER: _ClassVar[int]
        NAMED_RULE_FIELD_NUMBER: _ClassVar[int]
        NAME_HASH_FIELD_NUMBER: _ClassVar[int]
        trigger_type: BackgroundTracingMetadata.TriggerRule.TriggerType
        histogram_rule: BackgroundTracingMetadata.TriggerRule.HistogramRule
        named_rule: BackgroundTracingMetadata.TriggerRule.NamedRule
        name_hash: int
        def __init__(
            self,
            trigger_type: _Optional[_Union[BackgroundTracingMetadata.TriggerRule.TriggerType, str]] = ...,
            histogram_rule: _Optional[_Union[BackgroundTracingMetadata.TriggerRule.HistogramRule, _Mapping]] = ...,
            named_rule: _Optional[_Union[BackgroundTracingMetadata.TriggerRule.NamedRule, _Mapping]] = ...,
            name_hash: _Optional[int] = ...,
        ) -> None: ...

    TRIGGERED_RULE_FIELD_NUMBER: _ClassVar[int]
    ACTIVE_RULES_FIELD_NUMBER: _ClassVar[int]
    SCENARIO_NAME_HASH_FIELD_NUMBER: _ClassVar[int]
    triggered_rule: BackgroundTracingMetadata.TriggerRule
    active_rules: _containers.RepeatedCompositeFieldContainer[BackgroundTracingMetadata.TriggerRule]
    scenario_name_hash: int
    def __init__(
        self,
        triggered_rule: _Optional[_Union[BackgroundTracingMetadata.TriggerRule, _Mapping]] = ...,
        active_rules: _Optional[_Iterable[_Union[BackgroundTracingMetadata.TriggerRule, _Mapping]]] = ...,
        scenario_name_hash: _Optional[int] = ...,
    ) -> None: ...

class ChromeTracedValue(_message.Message):
    __slots__ = (
        "nested_type",
        "dict_keys",
        "dict_values",
        "array_values",
        "int_value",
        "double_value",
        "bool_value",
        "string_value",
    )

    class NestedType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        DICT: _ClassVar[ChromeTracedValue.NestedType]
        ARRAY: _ClassVar[ChromeTracedValue.NestedType]

    DICT: ChromeTracedValue.NestedType
    ARRAY: ChromeTracedValue.NestedType
    NESTED_TYPE_FIELD_NUMBER: _ClassVar[int]
    DICT_KEYS_FIELD_NUMBER: _ClassVar[int]
    DICT_VALUES_FIELD_NUMBER: _ClassVar[int]
    ARRAY_VALUES_FIELD_NUMBER: _ClassVar[int]
    INT_VALUE_FIELD_NUMBER: _ClassVar[int]
    DOUBLE_VALUE_FIELD_NUMBER: _ClassVar[int]
    BOOL_VALUE_FIELD_NUMBER: _ClassVar[int]
    STRING_VALUE_FIELD_NUMBER: _ClassVar[int]
    nested_type: ChromeTracedValue.NestedType
    dict_keys: _containers.RepeatedScalarFieldContainer[str]
    dict_values: _containers.RepeatedCompositeFieldContainer[ChromeTracedValue]
    array_values: _containers.RepeatedCompositeFieldContainer[ChromeTracedValue]
    int_value: int
    double_value: float
    bool_value: bool
    string_value: str
    def __init__(
        self,
        nested_type: _Optional[_Union[ChromeTracedValue.NestedType, str]] = ...,
        dict_keys: _Optional[_Iterable[str]] = ...,
        dict_values: _Optional[_Iterable[_Union[ChromeTracedValue, _Mapping]]] = ...,
        array_values: _Optional[_Iterable[_Union[ChromeTracedValue, _Mapping]]] = ...,
        int_value: _Optional[int] = ...,
        double_value: _Optional[float] = ...,
        bool_value: bool = ...,
        string_value: _Optional[str] = ...,
    ) -> None: ...

class ChromeStringTableEntry(_message.Message):
    __slots__ = ("value", "index")
    VALUE_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    value: str
    index: int
    def __init__(self, value: _Optional[str] = ..., index: _Optional[int] = ...) -> None: ...

class ChromeTraceEvent(_message.Message):
    __slots__ = (
        "name",
        "timestamp",
        "phase",
        "thread_id",
        "duration",
        "thread_duration",
        "scope",
        "id",
        "flags",
        "category_group_name",
        "process_id",
        "thread_timestamp",
        "bind_id",
        "args",
        "name_index",
        "category_group_name_index",
    )

    class Arg(_message.Message):
        __slots__ = (
            "name",
            "bool_value",
            "uint_value",
            "int_value",
            "double_value",
            "string_value",
            "pointer_value",
            "json_value",
            "traced_value",
            "name_index",
        )
        NAME_FIELD_NUMBER: _ClassVar[int]
        BOOL_VALUE_FIELD_NUMBER: _ClassVar[int]
        UINT_VALUE_FIELD_NUMBER: _ClassVar[int]
        INT_VALUE_FIELD_NUMBER: _ClassVar[int]
        DOUBLE_VALUE_FIELD_NUMBER: _ClassVar[int]
        STRING_VALUE_FIELD_NUMBER: _ClassVar[int]
        POINTER_VALUE_FIELD_NUMBER: _ClassVar[int]
        JSON_VALUE_FIELD_NUMBER: _ClassVar[int]
        TRACED_VALUE_FIELD_NUMBER: _ClassVar[int]
        NAME_INDEX_FIELD_NUMBER: _ClassVar[int]
        name: str
        bool_value: bool
        uint_value: int
        int_value: int
        double_value: float
        string_value: str
        pointer_value: int
        json_value: str
        traced_value: ChromeTracedValue
        name_index: int
        def __init__(
            self,
            name: _Optional[str] = ...,
            bool_value: bool = ...,
            uint_value: _Optional[int] = ...,
            int_value: _Optional[int] = ...,
            double_value: _Optional[float] = ...,
            string_value: _Optional[str] = ...,
            pointer_value: _Optional[int] = ...,
            json_value: _Optional[str] = ...,
            traced_value: _Optional[_Union[ChromeTracedValue, _Mapping]] = ...,
            name_index: _Optional[int] = ...,
        ) -> None: ...

    NAME_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    PHASE_FIELD_NUMBER: _ClassVar[int]
    THREAD_ID_FIELD_NUMBER: _ClassVar[int]
    DURATION_FIELD_NUMBER: _ClassVar[int]
    THREAD_DURATION_FIELD_NUMBER: _ClassVar[int]
    SCOPE_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    CATEGORY_GROUP_NAME_FIELD_NUMBER: _ClassVar[int]
    PROCESS_ID_FIELD_NUMBER: _ClassVar[int]
    THREAD_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    BIND_ID_FIELD_NUMBER: _ClassVar[int]
    ARGS_FIELD_NUMBER: _ClassVar[int]
    NAME_INDEX_FIELD_NUMBER: _ClassVar[int]
    CATEGORY_GROUP_NAME_INDEX_FIELD_NUMBER: _ClassVar[int]
    name: str
    timestamp: int
    phase: int
    thread_id: int
    duration: int
    thread_duration: int
    scope: str
    id: int
    flags: int
    category_group_name: str
    process_id: int
    thread_timestamp: int
    bind_id: int
    args: _containers.RepeatedCompositeFieldContainer[ChromeTraceEvent.Arg]
    name_index: int
    category_group_name_index: int
    def __init__(
        self,
        name: _Optional[str] = ...,
        timestamp: _Optional[int] = ...,
        phase: _Optional[int] = ...,
        thread_id: _Optional[int] = ...,
        duration: _Optional[int] = ...,
        thread_duration: _Optional[int] = ...,
        scope: _Optional[str] = ...,
        id: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        category_group_name: _Optional[str] = ...,
        process_id: _Optional[int] = ...,
        thread_timestamp: _Optional[int] = ...,
        bind_id: _Optional[int] = ...,
        args: _Optional[_Iterable[_Union[ChromeTraceEvent.Arg, _Mapping]]] = ...,
        name_index: _Optional[int] = ...,
        category_group_name_index: _Optional[int] = ...,
    ) -> None: ...

class ChromeMetadata(_message.Message):
    __slots__ = ("name", "string_value", "bool_value", "int_value", "json_value")
    NAME_FIELD_NUMBER: _ClassVar[int]
    STRING_VALUE_FIELD_NUMBER: _ClassVar[int]
    BOOL_VALUE_FIELD_NUMBER: _ClassVar[int]
    INT_VALUE_FIELD_NUMBER: _ClassVar[int]
    JSON_VALUE_FIELD_NUMBER: _ClassVar[int]
    name: str
    string_value: str
    bool_value: bool
    int_value: int
    json_value: str
    def __init__(
        self,
        name: _Optional[str] = ...,
        string_value: _Optional[str] = ...,
        bool_value: bool = ...,
        int_value: _Optional[int] = ...,
        json_value: _Optional[str] = ...,
    ) -> None: ...

class ChromeLegacyJsonTrace(_message.Message):
    __slots__ = ("type", "data")

    class TraceType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        USER_TRACE: _ClassVar[ChromeLegacyJsonTrace.TraceType]
        SYSTEM_TRACE: _ClassVar[ChromeLegacyJsonTrace.TraceType]

    USER_TRACE: ChromeLegacyJsonTrace.TraceType
    SYSTEM_TRACE: ChromeLegacyJsonTrace.TraceType
    TYPE_FIELD_NUMBER: _ClassVar[int]
    DATA_FIELD_NUMBER: _ClassVar[int]
    type: ChromeLegacyJsonTrace.TraceType
    data: str
    def __init__(
        self, type: _Optional[_Union[ChromeLegacyJsonTrace.TraceType, str]] = ..., data: _Optional[str] = ...
    ) -> None: ...

class ChromeEventBundle(_message.Message):
    __slots__ = ("trace_events", "metadata", "legacy_ftrace_output", "legacy_json_trace", "string_table")
    TRACE_EVENTS_FIELD_NUMBER: _ClassVar[int]
    METADATA_FIELD_NUMBER: _ClassVar[int]
    LEGACY_FTRACE_OUTPUT_FIELD_NUMBER: _ClassVar[int]
    LEGACY_JSON_TRACE_FIELD_NUMBER: _ClassVar[int]
    STRING_TABLE_FIELD_NUMBER: _ClassVar[int]
    trace_events: _containers.RepeatedCompositeFieldContainer[ChromeTraceEvent]
    metadata: _containers.RepeatedCompositeFieldContainer[ChromeMetadata]
    legacy_ftrace_output: _containers.RepeatedScalarFieldContainer[str]
    legacy_json_trace: _containers.RepeatedCompositeFieldContainer[ChromeLegacyJsonTrace]
    string_table: _containers.RepeatedCompositeFieldContainer[ChromeStringTableEntry]
    def __init__(
        self,
        trace_events: _Optional[_Iterable[_Union[ChromeTraceEvent, _Mapping]]] = ...,
        metadata: _Optional[_Iterable[_Union[ChromeMetadata, _Mapping]]] = ...,
        legacy_ftrace_output: _Optional[_Iterable[str]] = ...,
        legacy_json_trace: _Optional[_Iterable[_Union[ChromeLegacyJsonTrace, _Mapping]]] = ...,
        string_table: _Optional[_Iterable[_Union[ChromeStringTableEntry, _Mapping]]] = ...,
    ) -> None: ...

class V8String(_message.Message):
    __slots__ = ("latin1", "utf16_le", "utf16_be")
    LATIN1_FIELD_NUMBER: _ClassVar[int]
    UTF16_LE_FIELD_NUMBER: _ClassVar[int]
    UTF16_BE_FIELD_NUMBER: _ClassVar[int]
    latin1: bytes
    utf16_le: bytes
    utf16_be: bytes
    def __init__(
        self, latin1: _Optional[bytes] = ..., utf16_le: _Optional[bytes] = ..., utf16_be: _Optional[bytes] = ...
    ) -> None: ...

class InternedV8String(_message.Message):
    __slots__ = ("iid", "latin1", "utf16_le", "utf16_be")
    IID_FIELD_NUMBER: _ClassVar[int]
    LATIN1_FIELD_NUMBER: _ClassVar[int]
    UTF16_LE_FIELD_NUMBER: _ClassVar[int]
    UTF16_BE_FIELD_NUMBER: _ClassVar[int]
    iid: int
    latin1: bytes
    utf16_le: bytes
    utf16_be: bytes
    def __init__(
        self,
        iid: _Optional[int] = ...,
        latin1: _Optional[bytes] = ...,
        utf16_le: _Optional[bytes] = ...,
        utf16_be: _Optional[bytes] = ...,
    ) -> None: ...

class InternedV8JsScript(_message.Message):
    __slots__ = ("iid", "script_id", "type", "name", "source")

    class Type(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TYPE_UNKNOWN: _ClassVar[InternedV8JsScript.Type]
        TYPE_NORMAL: _ClassVar[InternedV8JsScript.Type]
        TYPE_EVAL: _ClassVar[InternedV8JsScript.Type]
        TYPE_MODULE: _ClassVar[InternedV8JsScript.Type]
        TYPE_NATIVE: _ClassVar[InternedV8JsScript.Type]
        TYPE_EXTENSION: _ClassVar[InternedV8JsScript.Type]
        TYPE_INSPECTOR: _ClassVar[InternedV8JsScript.Type]

    TYPE_UNKNOWN: InternedV8JsScript.Type
    TYPE_NORMAL: InternedV8JsScript.Type
    TYPE_EVAL: InternedV8JsScript.Type
    TYPE_MODULE: InternedV8JsScript.Type
    TYPE_NATIVE: InternedV8JsScript.Type
    TYPE_EXTENSION: InternedV8JsScript.Type
    TYPE_INSPECTOR: InternedV8JsScript.Type
    IID_FIELD_NUMBER: _ClassVar[int]
    SCRIPT_ID_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    SOURCE_FIELD_NUMBER: _ClassVar[int]
    iid: int
    script_id: int
    type: InternedV8JsScript.Type
    name: V8String
    source: V8String
    def __init__(
        self,
        iid: _Optional[int] = ...,
        script_id: _Optional[int] = ...,
        type: _Optional[_Union[InternedV8JsScript.Type, str]] = ...,
        name: _Optional[_Union[V8String, _Mapping]] = ...,
        source: _Optional[_Union[V8String, _Mapping]] = ...,
    ) -> None: ...

class InternedV8WasmScript(_message.Message):
    __slots__ = ("iid", "script_id", "url")
    IID_FIELD_NUMBER: _ClassVar[int]
    SCRIPT_ID_FIELD_NUMBER: _ClassVar[int]
    URL_FIELD_NUMBER: _ClassVar[int]
    iid: int
    script_id: int
    url: str
    def __init__(
        self, iid: _Optional[int] = ..., script_id: _Optional[int] = ..., url: _Optional[str] = ...
    ) -> None: ...

class InternedV8JsFunction(_message.Message):
    __slots__ = ("iid", "v8_js_function_name_iid", "v8_js_script_iid", "is_toplevel", "kind", "byte_offset")

    class Kind(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        KIND_UNKNOWN: _ClassVar[InternedV8JsFunction.Kind]
        KIND_NORMAL_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_MODULE: _ClassVar[InternedV8JsFunction.Kind]
        KIND_ASYNC_MODULE: _ClassVar[InternedV8JsFunction.Kind]
        KIND_BASE_CONSTRUCTOR: _ClassVar[InternedV8JsFunction.Kind]
        KIND_DEFAULT_BASE_CONSTRUCTOR: _ClassVar[InternedV8JsFunction.Kind]
        KIND_DEFAULT_DERIVED_CONSTRUCTOR: _ClassVar[InternedV8JsFunction.Kind]
        KIND_DERIVED_CONSTRUCTOR: _ClassVar[InternedV8JsFunction.Kind]
        KIND_GETTER_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_STATIC_GETTER_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_SETTER_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_STATIC_SETTER_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_ARROW_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_ASYNC_ARROW_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_ASYNC_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_ASYNC_CONCISE_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_STATIC_ASYNC_CONCISE_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_ASYNC_CONCISE_GENERATOR_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_STATIC_ASYNC_CONCISE_GENERATOR_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_ASYNC_GENERATOR_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_GENERATOR_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_CONCISE_GENERATOR_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_STATIC_CONCISE_GENERATOR_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_CONCISE_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_STATIC_CONCISE_METHOD: _ClassVar[InternedV8JsFunction.Kind]
        KIND_CLASS_MEMBERS_INITIALIZER_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_CLASS_STATIC_INITIALIZER_FUNCTION: _ClassVar[InternedV8JsFunction.Kind]
        KIND_INVALID: _ClassVar[InternedV8JsFunction.Kind]

    KIND_UNKNOWN: InternedV8JsFunction.Kind
    KIND_NORMAL_FUNCTION: InternedV8JsFunction.Kind
    KIND_MODULE: InternedV8JsFunction.Kind
    KIND_ASYNC_MODULE: InternedV8JsFunction.Kind
    KIND_BASE_CONSTRUCTOR: InternedV8JsFunction.Kind
    KIND_DEFAULT_BASE_CONSTRUCTOR: InternedV8JsFunction.Kind
    KIND_DEFAULT_DERIVED_CONSTRUCTOR: InternedV8JsFunction.Kind
    KIND_DERIVED_CONSTRUCTOR: InternedV8JsFunction.Kind
    KIND_GETTER_FUNCTION: InternedV8JsFunction.Kind
    KIND_STATIC_GETTER_FUNCTION: InternedV8JsFunction.Kind
    KIND_SETTER_FUNCTION: InternedV8JsFunction.Kind
    KIND_STATIC_SETTER_FUNCTION: InternedV8JsFunction.Kind
    KIND_ARROW_FUNCTION: InternedV8JsFunction.Kind
    KIND_ASYNC_ARROW_FUNCTION: InternedV8JsFunction.Kind
    KIND_ASYNC_FUNCTION: InternedV8JsFunction.Kind
    KIND_ASYNC_CONCISE_METHOD: InternedV8JsFunction.Kind
    KIND_STATIC_ASYNC_CONCISE_METHOD: InternedV8JsFunction.Kind
    KIND_ASYNC_CONCISE_GENERATOR_METHOD: InternedV8JsFunction.Kind
    KIND_STATIC_ASYNC_CONCISE_GENERATOR_METHOD: InternedV8JsFunction.Kind
    KIND_ASYNC_GENERATOR_FUNCTION: InternedV8JsFunction.Kind
    KIND_GENERATOR_FUNCTION: InternedV8JsFunction.Kind
    KIND_CONCISE_GENERATOR_METHOD: InternedV8JsFunction.Kind
    KIND_STATIC_CONCISE_GENERATOR_METHOD: InternedV8JsFunction.Kind
    KIND_CONCISE_METHOD: InternedV8JsFunction.Kind
    KIND_STATIC_CONCISE_METHOD: InternedV8JsFunction.Kind
    KIND_CLASS_MEMBERS_INITIALIZER_FUNCTION: InternedV8JsFunction.Kind
    KIND_CLASS_STATIC_INITIALIZER_FUNCTION: InternedV8JsFunction.Kind
    KIND_INVALID: InternedV8JsFunction.Kind
    IID_FIELD_NUMBER: _ClassVar[int]
    V8_JS_FUNCTION_NAME_IID_FIELD_NUMBER: _ClassVar[int]
    V8_JS_SCRIPT_IID_FIELD_NUMBER: _ClassVar[int]
    IS_TOPLEVEL_FIELD_NUMBER: _ClassVar[int]
    KIND_FIELD_NUMBER: _ClassVar[int]
    BYTE_OFFSET_FIELD_NUMBER: _ClassVar[int]
    iid: int
    v8_js_function_name_iid: int
    v8_js_script_iid: int
    is_toplevel: bool
    kind: InternedV8JsFunction.Kind
    byte_offset: int
    def __init__(
        self,
        iid: _Optional[int] = ...,
        v8_js_function_name_iid: _Optional[int] = ...,
        v8_js_script_iid: _Optional[int] = ...,
        is_toplevel: bool = ...,
        kind: _Optional[_Union[InternedV8JsFunction.Kind, str]] = ...,
        byte_offset: _Optional[int] = ...,
    ) -> None: ...

class InternedV8Isolate(_message.Message):
    __slots__ = (
        "iid",
        "pid",
        "isolate_id",
        "code_range",
        "embedded_blob_code_start_address",
        "embedded_blob_code_size",
    )

    class CodeRange(_message.Message):
        __slots__ = ("base_address", "size", "embedded_blob_code_copy_start_address", "is_process_wide")
        BASE_ADDRESS_FIELD_NUMBER: _ClassVar[int]
        SIZE_FIELD_NUMBER: _ClassVar[int]
        EMBEDDED_BLOB_CODE_COPY_START_ADDRESS_FIELD_NUMBER: _ClassVar[int]
        IS_PROCESS_WIDE_FIELD_NUMBER: _ClassVar[int]
        base_address: int
        size: int
        embedded_blob_code_copy_start_address: int
        is_process_wide: bool
        def __init__(
            self,
            base_address: _Optional[int] = ...,
            size: _Optional[int] = ...,
            embedded_blob_code_copy_start_address: _Optional[int] = ...,
            is_process_wide: bool = ...,
        ) -> None: ...

    IID_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    ISOLATE_ID_FIELD_NUMBER: _ClassVar[int]
    CODE_RANGE_FIELD_NUMBER: _ClassVar[int]
    EMBEDDED_BLOB_CODE_START_ADDRESS_FIELD_NUMBER: _ClassVar[int]
    EMBEDDED_BLOB_CODE_SIZE_FIELD_NUMBER: _ClassVar[int]
    iid: int
    pid: int
    isolate_id: int
    code_range: InternedV8Isolate.CodeRange
    embedded_blob_code_start_address: int
    embedded_blob_code_size: int
    def __init__(
        self,
        iid: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        isolate_id: _Optional[int] = ...,
        code_range: _Optional[_Union[InternedV8Isolate.CodeRange, _Mapping]] = ...,
        embedded_blob_code_start_address: _Optional[int] = ...,
        embedded_blob_code_size: _Optional[int] = ...,
    ) -> None: ...

class V8JsCode(_message.Message):
    __slots__ = (
        "v8_isolate_iid",
        "tid",
        "v8_js_function_iid",
        "tier",
        "instruction_start",
        "instruction_size_bytes",
        "machine_code",
        "bytecode",
    )

    class Tier(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TIER_UNKNOWN: _ClassVar[V8JsCode.Tier]
        TIER_IGNITION: _ClassVar[V8JsCode.Tier]
        TIER_SPARKPLUG: _ClassVar[V8JsCode.Tier]
        TIER_MAGLEV: _ClassVar[V8JsCode.Tier]
        TIER_TURBOSHAFT: _ClassVar[V8JsCode.Tier]
        TIER_TURBOFAN: _ClassVar[V8JsCode.Tier]

    TIER_UNKNOWN: V8JsCode.Tier
    TIER_IGNITION: V8JsCode.Tier
    TIER_SPARKPLUG: V8JsCode.Tier
    TIER_MAGLEV: V8JsCode.Tier
    TIER_TURBOSHAFT: V8JsCode.Tier
    TIER_TURBOFAN: V8JsCode.Tier
    V8_ISOLATE_IID_FIELD_NUMBER: _ClassVar[int]
    TID_FIELD_NUMBER: _ClassVar[int]
    V8_JS_FUNCTION_IID_FIELD_NUMBER: _ClassVar[int]
    TIER_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_START_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
    MACHINE_CODE_FIELD_NUMBER: _ClassVar[int]
    BYTECODE_FIELD_NUMBER: _ClassVar[int]
    v8_isolate_iid: int
    tid: int
    v8_js_function_iid: int
    tier: V8JsCode.Tier
    instruction_start: int
    instruction_size_bytes: int
    machine_code: bytes
    bytecode: bytes
    def __init__(
        self,
        v8_isolate_iid: _Optional[int] = ...,
        tid: _Optional[int] = ...,
        v8_js_function_iid: _Optional[int] = ...,
        tier: _Optional[_Union[V8JsCode.Tier, str]] = ...,
        instruction_start: _Optional[int] = ...,
        instruction_size_bytes: _Optional[int] = ...,
        machine_code: _Optional[bytes] = ...,
        bytecode: _Optional[bytes] = ...,
    ) -> None: ...

class V8InternalCode(_message.Message):
    __slots__ = (
        "v8_isolate_iid",
        "tid",
        "name",
        "type",
        "builtin_id",
        "instruction_start",
        "instruction_size_bytes",
        "machine_code",
    )

    class Type(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TYPE_UNKNOWN: _ClassVar[V8InternalCode.Type]
        TYPE_BYTECODE_HANDLER: _ClassVar[V8InternalCode.Type]
        TYPE_FOR_TESTING: _ClassVar[V8InternalCode.Type]
        TYPE_BUILTIN: _ClassVar[V8InternalCode.Type]
        TYPE_WASM_FUNCTION: _ClassVar[V8InternalCode.Type]
        TYPE_WASM_TO_CAPI_FUNCTION: _ClassVar[V8InternalCode.Type]
        TYPE_WASM_TO_JS_FUNCTION: _ClassVar[V8InternalCode.Type]
        TYPE_JS_TO_WASM_FUNCTION: _ClassVar[V8InternalCode.Type]
        TYPE_JS_TO_JS_FUNCTION: _ClassVar[V8InternalCode.Type]
        TYPE_C_WASM_ENTRY: _ClassVar[V8InternalCode.Type]

    TYPE_UNKNOWN: V8InternalCode.Type
    TYPE_BYTECODE_HANDLER: V8InternalCode.Type
    TYPE_FOR_TESTING: V8InternalCode.Type
    TYPE_BUILTIN: V8InternalCode.Type
    TYPE_WASM_FUNCTION: V8InternalCode.Type
    TYPE_WASM_TO_CAPI_FUNCTION: V8InternalCode.Type
    TYPE_WASM_TO_JS_FUNCTION: V8InternalCode.Type
    TYPE_JS_TO_WASM_FUNCTION: V8InternalCode.Type
    TYPE_JS_TO_JS_FUNCTION: V8InternalCode.Type
    TYPE_C_WASM_ENTRY: V8InternalCode.Type
    V8_ISOLATE_IID_FIELD_NUMBER: _ClassVar[int]
    TID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    BUILTIN_ID_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_START_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
    MACHINE_CODE_FIELD_NUMBER: _ClassVar[int]
    v8_isolate_iid: int
    tid: int
    name: str
    type: V8InternalCode.Type
    builtin_id: int
    instruction_start: int
    instruction_size_bytes: int
    machine_code: bytes
    def __init__(
        self,
        v8_isolate_iid: _Optional[int] = ...,
        tid: _Optional[int] = ...,
        name: _Optional[str] = ...,
        type: _Optional[_Union[V8InternalCode.Type, str]] = ...,
        builtin_id: _Optional[int] = ...,
        instruction_start: _Optional[int] = ...,
        instruction_size_bytes: _Optional[int] = ...,
        machine_code: _Optional[bytes] = ...,
    ) -> None: ...

class V8WasmCode(_message.Message):
    __slots__ = (
        "v8_isolate_iid",
        "tid",
        "v8_wasm_script_iid",
        "function_name",
        "tier",
        "code_offset_in_module",
        "instruction_start",
        "instruction_size_bytes",
        "machine_code",
    )

    class Tier(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TIER_UNKNOWN: _ClassVar[V8WasmCode.Tier]
        TIER_LIFTOFF: _ClassVar[V8WasmCode.Tier]
        TIER_TURBOFAN: _ClassVar[V8WasmCode.Tier]

    TIER_UNKNOWN: V8WasmCode.Tier
    TIER_LIFTOFF: V8WasmCode.Tier
    TIER_TURBOFAN: V8WasmCode.Tier
    V8_ISOLATE_IID_FIELD_NUMBER: _ClassVar[int]
    TID_FIELD_NUMBER: _ClassVar[int]
    V8_WASM_SCRIPT_IID_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_NAME_FIELD_NUMBER: _ClassVar[int]
    TIER_FIELD_NUMBER: _ClassVar[int]
    CODE_OFFSET_IN_MODULE_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_START_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
    MACHINE_CODE_FIELD_NUMBER: _ClassVar[int]
    v8_isolate_iid: int
    tid: int
    v8_wasm_script_iid: int
    function_name: str
    tier: V8WasmCode.Tier
    code_offset_in_module: int
    instruction_start: int
    instruction_size_bytes: int
    machine_code: bytes
    def __init__(
        self,
        v8_isolate_iid: _Optional[int] = ...,
        tid: _Optional[int] = ...,
        v8_wasm_script_iid: _Optional[int] = ...,
        function_name: _Optional[str] = ...,
        tier: _Optional[_Union[V8WasmCode.Tier, str]] = ...,
        code_offset_in_module: _Optional[int] = ...,
        instruction_start: _Optional[int] = ...,
        instruction_size_bytes: _Optional[int] = ...,
        machine_code: _Optional[bytes] = ...,
    ) -> None: ...

class V8RegExpCode(_message.Message):
    __slots__ = ("v8_isolate_iid", "tid", "pattern", "instruction_start", "instruction_size_bytes", "machine_code")
    V8_ISOLATE_IID_FIELD_NUMBER: _ClassVar[int]
    TID_FIELD_NUMBER: _ClassVar[int]
    PATTERN_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_START_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
    MACHINE_CODE_FIELD_NUMBER: _ClassVar[int]
    v8_isolate_iid: int
    tid: int
    pattern: V8String
    instruction_start: int
    instruction_size_bytes: int
    machine_code: bytes
    def __init__(
        self,
        v8_isolate_iid: _Optional[int] = ...,
        tid: _Optional[int] = ...,
        pattern: _Optional[_Union[V8String, _Mapping]] = ...,
        instruction_start: _Optional[int] = ...,
        instruction_size_bytes: _Optional[int] = ...,
        machine_code: _Optional[bytes] = ...,
    ) -> None: ...

class V8CodeMove(_message.Message):
    __slots__ = (
        "isolate_iid",
        "tid",
        "from_instruction_start_address",
        "to_instruction_start_address",
        "instruction_size_bytes",
        "to_machine_code",
        "to_bytecode",
    )
    ISOLATE_IID_FIELD_NUMBER: _ClassVar[int]
    TID_FIELD_NUMBER: _ClassVar[int]
    FROM_INSTRUCTION_START_ADDRESS_FIELD_NUMBER: _ClassVar[int]
    TO_INSTRUCTION_START_ADDRESS_FIELD_NUMBER: _ClassVar[int]
    INSTRUCTION_SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
    TO_MACHINE_CODE_FIELD_NUMBER: _ClassVar[int]
    TO_BYTECODE_FIELD_NUMBER: _ClassVar[int]
    isolate_iid: int
    tid: int
    from_instruction_start_address: int
    to_instruction_start_address: int
    instruction_size_bytes: int
    to_machine_code: bytes
    to_bytecode: bytes
    def __init__(
        self,
        isolate_iid: _Optional[int] = ...,
        tid: _Optional[int] = ...,
        from_instruction_start_address: _Optional[int] = ...,
        to_instruction_start_address: _Optional[int] = ...,
        instruction_size_bytes: _Optional[int] = ...,
        to_machine_code: _Optional[bytes] = ...,
        to_bytecode: _Optional[bytes] = ...,
    ) -> None: ...

class V8CodeDefaults(_message.Message):
    __slots__ = ("tid",)
    TID_FIELD_NUMBER: _ClassVar[int]
    tid: int
    def __init__(self, tid: _Optional[int] = ...) -> None: ...

class ClockSnapshot(_message.Message):
    __slots__ = ("clocks", "primary_trace_clock")

    class Clock(_message.Message):
        __slots__ = ("clock_id", "timestamp", "is_incremental", "unit_multiplier_ns")

        class BuiltinClocks(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            UNKNOWN: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]
            REALTIME: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]
            REALTIME_COARSE: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]
            MONOTONIC: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]
            MONOTONIC_COARSE: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]
            MONOTONIC_RAW: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]
            BOOTTIME: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]
            BUILTIN_CLOCK_MAX_ID: _ClassVar[ClockSnapshot.Clock.BuiltinClocks]

        UNKNOWN: ClockSnapshot.Clock.BuiltinClocks
        REALTIME: ClockSnapshot.Clock.BuiltinClocks
        REALTIME_COARSE: ClockSnapshot.Clock.BuiltinClocks
        MONOTONIC: ClockSnapshot.Clock.BuiltinClocks
        MONOTONIC_COARSE: ClockSnapshot.Clock.BuiltinClocks
        MONOTONIC_RAW: ClockSnapshot.Clock.BuiltinClocks
        BOOTTIME: ClockSnapshot.Clock.BuiltinClocks
        BUILTIN_CLOCK_MAX_ID: ClockSnapshot.Clock.BuiltinClocks
        CLOCK_ID_FIELD_NUMBER: _ClassVar[int]
        TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
        IS_INCREMENTAL_FIELD_NUMBER: _ClassVar[int]
        UNIT_MULTIPLIER_NS_FIELD_NUMBER: _ClassVar[int]
        clock_id: int
        timestamp: int
        is_incremental: bool
        unit_multiplier_ns: int
        def __init__(
            self,
            clock_id: _Optional[int] = ...,
            timestamp: _Optional[int] = ...,
            is_incremental: bool = ...,
            unit_multiplier_ns: _Optional[int] = ...,
        ) -> None: ...

    CLOCKS_FIELD_NUMBER: _ClassVar[int]
    PRIMARY_TRACE_CLOCK_FIELD_NUMBER: _ClassVar[int]
    clocks: _containers.RepeatedCompositeFieldContainer[ClockSnapshot.Clock]
    primary_trace_clock: BuiltinClock
    def __init__(
        self,
        clocks: _Optional[_Iterable[_Union[ClockSnapshot.Clock, _Mapping]]] = ...,
        primary_trace_clock: _Optional[_Union[BuiltinClock, str]] = ...,
    ) -> None: ...

class CSwitchEtwEvent(_message.Message):
    __slots__ = (
        "new_thread_id",
        "old_thread_id",
        "new_thread_priority",
        "old_thread_priority",
        "previous_c_state",
        "old_thread_wait_reason",
        "old_thread_wait_mode",
        "old_thread_state",
        "old_thread_wait_ideal_processor",
        "new_thread_wait_time",
    )

    class OldThreadWaitReason(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        EXECUTIVE: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        FREE_PAGE: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        PAGE_IN: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        POOL_ALLOCATION: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        DELAY_EXECUTION: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        SUSPEND: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        USER_REQUEST: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_EXECUTIVE: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_FREE_PAGE: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_PAGE_IN: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_POOL_ALLOCATION: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_DELAY_EXECUTION: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_SUSPENDED: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_USER_REQUEST: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_EVENT_PAIR: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_QUEUE: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_LPC_RECEIVER: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_LPC_REPLY: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_VIRTUAL_MEMORY: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_PAGE_OUT: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_RENDEZ_VOUS: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_KEYED_EVENT: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_TERMINATED: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_PROCESS_IN_SWAP: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_CPU_RATE_CONTROL: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_CALLOUT_STACK: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_KERNEL: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_RESOURCE: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_PUSH_LOCK: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_MUTEX: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_QUANTUM_END: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_DISPATCH_INT: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_PREEMPTED: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_YIELD_EXECUTION: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_FAST_MUTEX: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_GUARD_MUTEX: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        WR_RUNDOWN: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]
        MAXIMUM_WAIT_REASON: _ClassVar[CSwitchEtwEvent.OldThreadWaitReason]

    EXECUTIVE: CSwitchEtwEvent.OldThreadWaitReason
    FREE_PAGE: CSwitchEtwEvent.OldThreadWaitReason
    PAGE_IN: CSwitchEtwEvent.OldThreadWaitReason
    POOL_ALLOCATION: CSwitchEtwEvent.OldThreadWaitReason
    DELAY_EXECUTION: CSwitchEtwEvent.OldThreadWaitReason
    SUSPEND: CSwitchEtwEvent.OldThreadWaitReason
    USER_REQUEST: CSwitchEtwEvent.OldThreadWaitReason
    WR_EXECUTIVE: CSwitchEtwEvent.OldThreadWaitReason
    WR_FREE_PAGE: CSwitchEtwEvent.OldThreadWaitReason
    WR_PAGE_IN: CSwitchEtwEvent.OldThreadWaitReason
    WR_POOL_ALLOCATION: CSwitchEtwEvent.OldThreadWaitReason
    WR_DELAY_EXECUTION: CSwitchEtwEvent.OldThreadWaitReason
    WR_SUSPENDED: CSwitchEtwEvent.OldThreadWaitReason
    WR_USER_REQUEST: CSwitchEtwEvent.OldThreadWaitReason
    WR_EVENT_PAIR: CSwitchEtwEvent.OldThreadWaitReason
    WR_QUEUE: CSwitchEtwEvent.OldThreadWaitReason
    WR_LPC_RECEIVER: CSwitchEtwEvent.OldThreadWaitReason
    WR_LPC_REPLY: CSwitchEtwEvent.OldThreadWaitReason
    WR_VIRTUAL_MEMORY: CSwitchEtwEvent.OldThreadWaitReason
    WR_PAGE_OUT: CSwitchEtwEvent.OldThreadWaitReason
    WR_RENDEZ_VOUS: CSwitchEtwEvent.OldThreadWaitReason
    WR_KEYED_EVENT: CSwitchEtwEvent.OldThreadWaitReason
    WR_TERMINATED: CSwitchEtwEvent.OldThreadWaitReason
    WR_PROCESS_IN_SWAP: CSwitchEtwEvent.OldThreadWaitReason
    WR_CPU_RATE_CONTROL: CSwitchEtwEvent.OldThreadWaitReason
    WR_CALLOUT_STACK: CSwitchEtwEvent.OldThreadWaitReason
    WR_KERNEL: CSwitchEtwEvent.OldThreadWaitReason
    WR_RESOURCE: CSwitchEtwEvent.OldThreadWaitReason
    WR_PUSH_LOCK: CSwitchEtwEvent.OldThreadWaitReason
    WR_MUTEX: CSwitchEtwEvent.OldThreadWaitReason
    WR_QUANTUM_END: CSwitchEtwEvent.OldThreadWaitReason
    WR_DISPATCH_INT: CSwitchEtwEvent.OldThreadWaitReason
    WR_PREEMPTED: CSwitchEtwEvent.OldThreadWaitReason
    WR_YIELD_EXECUTION: CSwitchEtwEvent.OldThreadWaitReason
    WR_FAST_MUTEX: CSwitchEtwEvent.OldThreadWaitReason
    WR_GUARD_MUTEX: CSwitchEtwEvent.OldThreadWaitReason
    WR_RUNDOWN: CSwitchEtwEvent.OldThreadWaitReason
    MAXIMUM_WAIT_REASON: CSwitchEtwEvent.OldThreadWaitReason

    class OldThreadWaitMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        KERNEL_MODE: _ClassVar[CSwitchEtwEvent.OldThreadWaitMode]
        USER_MODE: _ClassVar[CSwitchEtwEvent.OldThreadWaitMode]

    KERNEL_MODE: CSwitchEtwEvent.OldThreadWaitMode
    USER_MODE: CSwitchEtwEvent.OldThreadWaitMode

    class OldThreadState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        INITIALIZED: _ClassVar[CSwitchEtwEvent.OldThreadState]
        READY: _ClassVar[CSwitchEtwEvent.OldThreadState]
        RUNNING: _ClassVar[CSwitchEtwEvent.OldThreadState]
        STANDBY: _ClassVar[CSwitchEtwEvent.OldThreadState]
        TERMINATED: _ClassVar[CSwitchEtwEvent.OldThreadState]
        WAITING: _ClassVar[CSwitchEtwEvent.OldThreadState]
        TRANSITION: _ClassVar[CSwitchEtwEvent.OldThreadState]
        DEFERRED_READY: _ClassVar[CSwitchEtwEvent.OldThreadState]

    INITIALIZED: CSwitchEtwEvent.OldThreadState
    READY: CSwitchEtwEvent.OldThreadState
    RUNNING: CSwitchEtwEvent.OldThreadState
    STANDBY: CSwitchEtwEvent.OldThreadState
    TERMINATED: CSwitchEtwEvent.OldThreadState
    WAITING: CSwitchEtwEvent.OldThreadState
    TRANSITION: CSwitchEtwEvent.OldThreadState
    DEFERRED_READY: CSwitchEtwEvent.OldThreadState
    NEW_THREAD_ID_FIELD_NUMBER: _ClassVar[int]
    OLD_THREAD_ID_FIELD_NUMBER: _ClassVar[int]
    NEW_THREAD_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    OLD_THREAD_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    PREVIOUS_C_STATE_FIELD_NUMBER: _ClassVar[int]
    OLD_THREAD_WAIT_REASON_FIELD_NUMBER: _ClassVar[int]
    OLD_THREAD_WAIT_MODE_FIELD_NUMBER: _ClassVar[int]
    OLD_THREAD_STATE_FIELD_NUMBER: _ClassVar[int]
    OLD_THREAD_WAIT_IDEAL_PROCESSOR_FIELD_NUMBER: _ClassVar[int]
    NEW_THREAD_WAIT_TIME_FIELD_NUMBER: _ClassVar[int]
    new_thread_id: int
    old_thread_id: int
    new_thread_priority: int
    old_thread_priority: int
    previous_c_state: int
    old_thread_wait_reason: CSwitchEtwEvent.OldThreadWaitReason
    old_thread_wait_mode: CSwitchEtwEvent.OldThreadWaitMode
    old_thread_state: CSwitchEtwEvent.OldThreadState
    old_thread_wait_ideal_processor: int
    new_thread_wait_time: int
    def __init__(
        self,
        new_thread_id: _Optional[int] = ...,
        old_thread_id: _Optional[int] = ...,
        new_thread_priority: _Optional[int] = ...,
        old_thread_priority: _Optional[int] = ...,
        previous_c_state: _Optional[int] = ...,
        old_thread_wait_reason: _Optional[_Union[CSwitchEtwEvent.OldThreadWaitReason, str]] = ...,
        old_thread_wait_mode: _Optional[_Union[CSwitchEtwEvent.OldThreadWaitMode, str]] = ...,
        old_thread_state: _Optional[_Union[CSwitchEtwEvent.OldThreadState, str]] = ...,
        old_thread_wait_ideal_processor: _Optional[int] = ...,
        new_thread_wait_time: _Optional[int] = ...,
    ) -> None: ...

class ReadyThreadEtwEvent(_message.Message):
    __slots__ = ("t_thread_id", "adjust_reason", "adjust_increment", "flag")

    class AdjustReason(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        IGNORE_THE_INCREMENT: _ClassVar[ReadyThreadEtwEvent.AdjustReason]
        APPLY_INCREMENT: _ClassVar[ReadyThreadEtwEvent.AdjustReason]
        APPLY_INCREMENT_BOOST: _ClassVar[ReadyThreadEtwEvent.AdjustReason]

    IGNORE_THE_INCREMENT: ReadyThreadEtwEvent.AdjustReason
    APPLY_INCREMENT: ReadyThreadEtwEvent.AdjustReason
    APPLY_INCREMENT_BOOST: ReadyThreadEtwEvent.AdjustReason

    class TraceFlag(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TRACE_FLAG_UNSPECIFIED: _ClassVar[ReadyThreadEtwEvent.TraceFlag]
        THREAD_READIED: _ClassVar[ReadyThreadEtwEvent.TraceFlag]
        KERNEL_STACK_SWAPPED_OUT: _ClassVar[ReadyThreadEtwEvent.TraceFlag]
        PROCESS_ADDRESS_SWAPPED_OUT: _ClassVar[ReadyThreadEtwEvent.TraceFlag]

    TRACE_FLAG_UNSPECIFIED: ReadyThreadEtwEvent.TraceFlag
    THREAD_READIED: ReadyThreadEtwEvent.TraceFlag
    KERNEL_STACK_SWAPPED_OUT: ReadyThreadEtwEvent.TraceFlag
    PROCESS_ADDRESS_SWAPPED_OUT: ReadyThreadEtwEvent.TraceFlag
    T_THREAD_ID_FIELD_NUMBER: _ClassVar[int]
    ADJUST_REASON_FIELD_NUMBER: _ClassVar[int]
    ADJUST_INCREMENT_FIELD_NUMBER: _ClassVar[int]
    FLAG_FIELD_NUMBER: _ClassVar[int]
    t_thread_id: int
    adjust_reason: ReadyThreadEtwEvent.AdjustReason
    adjust_increment: int
    flag: ReadyThreadEtwEvent.TraceFlag
    def __init__(
        self,
        t_thread_id: _Optional[int] = ...,
        adjust_reason: _Optional[_Union[ReadyThreadEtwEvent.AdjustReason, str]] = ...,
        adjust_increment: _Optional[int] = ...,
        flag: _Optional[_Union[ReadyThreadEtwEvent.TraceFlag, str]] = ...,
    ) -> None: ...

class EtwTraceEvent(_message.Message):
    __slots__ = ("timestamp", "cpu", "c_switch", "ready_thread")
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    CPU_FIELD_NUMBER: _ClassVar[int]
    C_SWITCH_FIELD_NUMBER: _ClassVar[int]
    READY_THREAD_FIELD_NUMBER: _ClassVar[int]
    timestamp: int
    cpu: int
    c_switch: CSwitchEtwEvent
    ready_thread: ReadyThreadEtwEvent
    def __init__(
        self,
        timestamp: _Optional[int] = ...,
        cpu: _Optional[int] = ...,
        c_switch: _Optional[_Union[CSwitchEtwEvent, _Mapping]] = ...,
        ready_thread: _Optional[_Union[ReadyThreadEtwEvent, _Mapping]] = ...,
    ) -> None: ...

class EtwTraceEventBundle(_message.Message):
    __slots__ = ("cpu", "event")
    CPU_FIELD_NUMBER: _ClassVar[int]
    EVENT_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    event: _containers.RepeatedCompositeFieldContainer[EtwTraceEvent]
    def __init__(
        self, cpu: _Optional[int] = ..., event: _Optional[_Iterable[_Union[EtwTraceEvent, _Mapping]]] = ...
    ) -> None: ...

class FileDescriptorSet(_message.Message):
    __slots__ = ("file",)
    FILE_FIELD_NUMBER: _ClassVar[int]
    file: _containers.RepeatedCompositeFieldContainer[FileDescriptorProto]
    def __init__(self, file: _Optional[_Iterable[_Union[FileDescriptorProto, _Mapping]]] = ...) -> None: ...

class FileDescriptorProto(_message.Message):
    __slots__ = (
        "name",
        "package",
        "dependency",
        "public_dependency",
        "weak_dependency",
        "message_type",
        "enum_type",
        "extension",
    )
    NAME_FIELD_NUMBER: _ClassVar[int]
    PACKAGE_FIELD_NUMBER: _ClassVar[int]
    DEPENDENCY_FIELD_NUMBER: _ClassVar[int]
    PUBLIC_DEPENDENCY_FIELD_NUMBER: _ClassVar[int]
    WEAK_DEPENDENCY_FIELD_NUMBER: _ClassVar[int]
    MESSAGE_TYPE_FIELD_NUMBER: _ClassVar[int]
    ENUM_TYPE_FIELD_NUMBER: _ClassVar[int]
    EXTENSION_FIELD_NUMBER: _ClassVar[int]
    name: str
    package: str
    dependency: _containers.RepeatedScalarFieldContainer[str]
    public_dependency: _containers.RepeatedScalarFieldContainer[int]
    weak_dependency: _containers.RepeatedScalarFieldContainer[int]
    message_type: _containers.RepeatedCompositeFieldContainer[DescriptorProto]
    enum_type: _containers.RepeatedCompositeFieldContainer[EnumDescriptorProto]
    extension: _containers.RepeatedCompositeFieldContainer[FieldDescriptorProto]
    def __init__(
        self,
        name: _Optional[str] = ...,
        package: _Optional[str] = ...,
        dependency: _Optional[_Iterable[str]] = ...,
        public_dependency: _Optional[_Iterable[int]] = ...,
        weak_dependency: _Optional[_Iterable[int]] = ...,
        message_type: _Optional[_Iterable[_Union[DescriptorProto, _Mapping]]] = ...,
        enum_type: _Optional[_Iterable[_Union[EnumDescriptorProto, _Mapping]]] = ...,
        extension: _Optional[_Iterable[_Union[FieldDescriptorProto, _Mapping]]] = ...,
    ) -> None: ...

class DescriptorProto(_message.Message):
    __slots__ = (
        "name",
        "field",
        "extension",
        "nested_type",
        "enum_type",
        "oneof_decl",
        "reserved_range",
        "reserved_name",
    )

    class ReservedRange(_message.Message):
        __slots__ = ("start", "end")
        START_FIELD_NUMBER: _ClassVar[int]
        END_FIELD_NUMBER: _ClassVar[int]
        start: int
        end: int
        def __init__(self, start: _Optional[int] = ..., end: _Optional[int] = ...) -> None: ...

    NAME_FIELD_NUMBER: _ClassVar[int]
    FIELD_FIELD_NUMBER: _ClassVar[int]
    EXTENSION_FIELD_NUMBER: _ClassVar[int]
    NESTED_TYPE_FIELD_NUMBER: _ClassVar[int]
    ENUM_TYPE_FIELD_NUMBER: _ClassVar[int]
    ONEOF_DECL_FIELD_NUMBER: _ClassVar[int]
    RESERVED_RANGE_FIELD_NUMBER: _ClassVar[int]
    RESERVED_NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    field: _containers.RepeatedCompositeFieldContainer[FieldDescriptorProto]
    extension: _containers.RepeatedCompositeFieldContainer[FieldDescriptorProto]
    nested_type: _containers.RepeatedCompositeFieldContainer[DescriptorProto]
    enum_type: _containers.RepeatedCompositeFieldContainer[EnumDescriptorProto]
    oneof_decl: _containers.RepeatedCompositeFieldContainer[OneofDescriptorProto]
    reserved_range: _containers.RepeatedCompositeFieldContainer[DescriptorProto.ReservedRange]
    reserved_name: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        name: _Optional[str] = ...,
        field: _Optional[_Iterable[_Union[FieldDescriptorProto, _Mapping]]] = ...,
        extension: _Optional[_Iterable[_Union[FieldDescriptorProto, _Mapping]]] = ...,
        nested_type: _Optional[_Iterable[_Union[DescriptorProto, _Mapping]]] = ...,
        enum_type: _Optional[_Iterable[_Union[EnumDescriptorProto, _Mapping]]] = ...,
        oneof_decl: _Optional[_Iterable[_Union[OneofDescriptorProto, _Mapping]]] = ...,
        reserved_range: _Optional[_Iterable[_Union[DescriptorProto.ReservedRange, _Mapping]]] = ...,
        reserved_name: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class UninterpretedOption(_message.Message):
    __slots__ = (
        "name",
        "identifier_value",
        "positive_int_value",
        "negative_int_value",
        "double_value",
        "string_value",
        "aggregate_value",
    )

    class NamePart(_message.Message):
        __slots__ = ("name_part", "is_extension")
        NAME_PART_FIELD_NUMBER: _ClassVar[int]
        IS_EXTENSION_FIELD_NUMBER: _ClassVar[int]
        name_part: str
        is_extension: bool
        def __init__(self, name_part: _Optional[str] = ..., is_extension: bool = ...) -> None: ...

    NAME_FIELD_NUMBER: _ClassVar[int]
    IDENTIFIER_VALUE_FIELD_NUMBER: _ClassVar[int]
    POSITIVE_INT_VALUE_FIELD_NUMBER: _ClassVar[int]
    NEGATIVE_INT_VALUE_FIELD_NUMBER: _ClassVar[int]
    DOUBLE_VALUE_FIELD_NUMBER: _ClassVar[int]
    STRING_VALUE_FIELD_NUMBER: _ClassVar[int]
    AGGREGATE_VALUE_FIELD_NUMBER: _ClassVar[int]
    name: _containers.RepeatedCompositeFieldContainer[UninterpretedOption.NamePart]
    identifier_value: str
    positive_int_value: int
    negative_int_value: int
    double_value: float
    string_value: bytes
    aggregate_value: str
    def __init__(
        self,
        name: _Optional[_Iterable[_Union[UninterpretedOption.NamePart, _Mapping]]] = ...,
        identifier_value: _Optional[str] = ...,
        positive_int_value: _Optional[int] = ...,
        negative_int_value: _Optional[int] = ...,
        double_value: _Optional[float] = ...,
        string_value: _Optional[bytes] = ...,
        aggregate_value: _Optional[str] = ...,
    ) -> None: ...

class FieldOptions(_message.Message):
    __slots__ = ("packed", "uninterpreted_option")
    PACKED_FIELD_NUMBER: _ClassVar[int]
    UNINTERPRETED_OPTION_FIELD_NUMBER: _ClassVar[int]
    packed: bool
    uninterpreted_option: _containers.RepeatedCompositeFieldContainer[UninterpretedOption]
    def __init__(
        self,
        packed: bool = ...,
        uninterpreted_option: _Optional[_Iterable[_Union[UninterpretedOption, _Mapping]]] = ...,
    ) -> None: ...

class FieldDescriptorProto(_message.Message):
    __slots__ = ("name", "number", "label", "type", "type_name", "extendee", "default_value", "options", "oneof_index")

    class Type(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TYPE_DOUBLE: _ClassVar[FieldDescriptorProto.Type]
        TYPE_FLOAT: _ClassVar[FieldDescriptorProto.Type]
        TYPE_INT64: _ClassVar[FieldDescriptorProto.Type]
        TYPE_UINT64: _ClassVar[FieldDescriptorProto.Type]
        TYPE_INT32: _ClassVar[FieldDescriptorProto.Type]
        TYPE_FIXED64: _ClassVar[FieldDescriptorProto.Type]
        TYPE_FIXED32: _ClassVar[FieldDescriptorProto.Type]
        TYPE_BOOL: _ClassVar[FieldDescriptorProto.Type]
        TYPE_STRING: _ClassVar[FieldDescriptorProto.Type]
        TYPE_GROUP: _ClassVar[FieldDescriptorProto.Type]
        TYPE_MESSAGE: _ClassVar[FieldDescriptorProto.Type]
        TYPE_BYTES: _ClassVar[FieldDescriptorProto.Type]
        TYPE_UINT32: _ClassVar[FieldDescriptorProto.Type]
        TYPE_ENUM: _ClassVar[FieldDescriptorProto.Type]
        TYPE_SFIXED32: _ClassVar[FieldDescriptorProto.Type]
        TYPE_SFIXED64: _ClassVar[FieldDescriptorProto.Type]
        TYPE_SINT32: _ClassVar[FieldDescriptorProto.Type]
        TYPE_SINT64: _ClassVar[FieldDescriptorProto.Type]

    TYPE_DOUBLE: FieldDescriptorProto.Type
    TYPE_FLOAT: FieldDescriptorProto.Type
    TYPE_INT64: FieldDescriptorProto.Type
    TYPE_UINT64: FieldDescriptorProto.Type
    TYPE_INT32: FieldDescriptorProto.Type
    TYPE_FIXED64: FieldDescriptorProto.Type
    TYPE_FIXED32: FieldDescriptorProto.Type
    TYPE_BOOL: FieldDescriptorProto.Type
    TYPE_STRING: FieldDescriptorProto.Type
    TYPE_GROUP: FieldDescriptorProto.Type
    TYPE_MESSAGE: FieldDescriptorProto.Type
    TYPE_BYTES: FieldDescriptorProto.Type
    TYPE_UINT32: FieldDescriptorProto.Type
    TYPE_ENUM: FieldDescriptorProto.Type
    TYPE_SFIXED32: FieldDescriptorProto.Type
    TYPE_SFIXED64: FieldDescriptorProto.Type
    TYPE_SINT32: FieldDescriptorProto.Type
    TYPE_SINT64: FieldDescriptorProto.Type

    class Label(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        LABEL_OPTIONAL: _ClassVar[FieldDescriptorProto.Label]
        LABEL_REQUIRED: _ClassVar[FieldDescriptorProto.Label]
        LABEL_REPEATED: _ClassVar[FieldDescriptorProto.Label]

    LABEL_OPTIONAL: FieldDescriptorProto.Label
    LABEL_REQUIRED: FieldDescriptorProto.Label
    LABEL_REPEATED: FieldDescriptorProto.Label
    NAME_FIELD_NUMBER: _ClassVar[int]
    NUMBER_FIELD_NUMBER: _ClassVar[int]
    LABEL_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    TYPE_NAME_FIELD_NUMBER: _ClassVar[int]
    EXTENDEE_FIELD_NUMBER: _ClassVar[int]
    DEFAULT_VALUE_FIELD_NUMBER: _ClassVar[int]
    OPTIONS_FIELD_NUMBER: _ClassVar[int]
    ONEOF_INDEX_FIELD_NUMBER: _ClassVar[int]
    name: str
    number: int
    label: FieldDescriptorProto.Label
    type: FieldDescriptorProto.Type
    type_name: str
    extendee: str
    default_value: str
    options: FieldOptions
    oneof_index: int
    def __init__(
        self,
        name: _Optional[str] = ...,
        number: _Optional[int] = ...,
        label: _Optional[_Union[FieldDescriptorProto.Label, str]] = ...,
        type: _Optional[_Union[FieldDescriptorProto.Type, str]] = ...,
        type_name: _Optional[str] = ...,
        extendee: _Optional[str] = ...,
        default_value: _Optional[str] = ...,
        options: _Optional[_Union[FieldOptions, _Mapping]] = ...,
        oneof_index: _Optional[int] = ...,
    ) -> None: ...

class OneofDescriptorProto(_message.Message):
    __slots__ = ("name", "options")
    NAME_FIELD_NUMBER: _ClassVar[int]
    OPTIONS_FIELD_NUMBER: _ClassVar[int]
    name: str
    options: OneofOptions
    def __init__(
        self, name: _Optional[str] = ..., options: _Optional[_Union[OneofOptions, _Mapping]] = ...
    ) -> None: ...

class EnumDescriptorProto(_message.Message):
    __slots__ = ("name", "value", "reserved_name")
    NAME_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    RESERVED_NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    value: _containers.RepeatedCompositeFieldContainer[EnumValueDescriptorProto]
    reserved_name: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        name: _Optional[str] = ...,
        value: _Optional[_Iterable[_Union[EnumValueDescriptorProto, _Mapping]]] = ...,
        reserved_name: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class EnumValueDescriptorProto(_message.Message):
    __slots__ = ("name", "number")
    NAME_FIELD_NUMBER: _ClassVar[int]
    NUMBER_FIELD_NUMBER: _ClassVar[int]
    name: str
    number: int
    def __init__(self, name: _Optional[str] = ..., number: _Optional[int] = ...) -> None: ...

class OneofOptions(_message.Message):
    __slots__ = ()
    Extensions: _python_message._ExtensionDict
    def __init__(self) -> None: ...

class ExtensionDescriptor(_message.Message):
    __slots__ = ("extension_set",)
    EXTENSION_SET_FIELD_NUMBER: _ClassVar[int]
    extension_set: FileDescriptorSet
    def __init__(self, extension_set: _Optional[_Union[FileDescriptorSet, _Mapping]] = ...) -> None: ...

class InodeFileMap(_message.Message):
    __slots__ = ("block_device_id", "mount_points", "entries")

    class Entry(_message.Message):
        __slots__ = ("inode_number", "paths", "type")

        class Type(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            UNKNOWN: _ClassVar[InodeFileMap.Entry.Type]
            FILE: _ClassVar[InodeFileMap.Entry.Type]
            DIRECTORY: _ClassVar[InodeFileMap.Entry.Type]

        UNKNOWN: InodeFileMap.Entry.Type
        FILE: InodeFileMap.Entry.Type
        DIRECTORY: InodeFileMap.Entry.Type
        INODE_NUMBER_FIELD_NUMBER: _ClassVar[int]
        PATHS_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIELD_NUMBER: _ClassVar[int]
        inode_number: int
        paths: _containers.RepeatedScalarFieldContainer[str]
        type: InodeFileMap.Entry.Type
        def __init__(
            self,
            inode_number: _Optional[int] = ...,
            paths: _Optional[_Iterable[str]] = ...,
            type: _Optional[_Union[InodeFileMap.Entry.Type, str]] = ...,
        ) -> None: ...

    BLOCK_DEVICE_ID_FIELD_NUMBER: _ClassVar[int]
    MOUNT_POINTS_FIELD_NUMBER: _ClassVar[int]
    ENTRIES_FIELD_NUMBER: _ClassVar[int]
    block_device_id: int
    mount_points: _containers.RepeatedScalarFieldContainer[str]
    entries: _containers.RepeatedCompositeFieldContainer[InodeFileMap.Entry]
    def __init__(
        self,
        block_device_id: _Optional[int] = ...,
        mount_points: _Optional[_Iterable[str]] = ...,
        entries: _Optional[_Iterable[_Union[InodeFileMap.Entry, _Mapping]]] = ...,
    ) -> None: ...

class AndroidFsDatareadEndFtraceEvent(_message.Message):
    __slots__ = ("bytes", "ino", "offset")
    BYTES_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    bytes: int
    ino: int
    offset: int
    def __init__(
        self, bytes: _Optional[int] = ..., ino: _Optional[int] = ..., offset: _Optional[int] = ...
    ) -> None: ...

class AndroidFsDatareadStartFtraceEvent(_message.Message):
    __slots__ = ("bytes", "cmdline", "i_size", "ino", "offset", "pathbuf", "pid")
    BYTES_FIELD_NUMBER: _ClassVar[int]
    CMDLINE_FIELD_NUMBER: _ClassVar[int]
    I_SIZE_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    PATHBUF_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    bytes: int
    cmdline: str
    i_size: int
    ino: int
    offset: int
    pathbuf: str
    pid: int
    def __init__(
        self,
        bytes: _Optional[int] = ...,
        cmdline: _Optional[str] = ...,
        i_size: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        pathbuf: _Optional[str] = ...,
        pid: _Optional[int] = ...,
    ) -> None: ...

class AndroidFsDatawriteEndFtraceEvent(_message.Message):
    __slots__ = ("bytes", "ino", "offset")
    BYTES_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    bytes: int
    ino: int
    offset: int
    def __init__(
        self, bytes: _Optional[int] = ..., ino: _Optional[int] = ..., offset: _Optional[int] = ...
    ) -> None: ...

class AndroidFsDatawriteStartFtraceEvent(_message.Message):
    __slots__ = ("bytes", "cmdline", "i_size", "ino", "offset", "pathbuf", "pid")
    BYTES_FIELD_NUMBER: _ClassVar[int]
    CMDLINE_FIELD_NUMBER: _ClassVar[int]
    I_SIZE_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    PATHBUF_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    bytes: int
    cmdline: str
    i_size: int
    ino: int
    offset: int
    pathbuf: str
    pid: int
    def __init__(
        self,
        bytes: _Optional[int] = ...,
        cmdline: _Optional[str] = ...,
        i_size: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        pathbuf: _Optional[str] = ...,
        pid: _Optional[int] = ...,
    ) -> None: ...

class AndroidFsFsyncEndFtraceEvent(_message.Message):
    __slots__ = ("bytes", "ino", "offset")
    BYTES_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    bytes: int
    ino: int
    offset: int
    def __init__(
        self, bytes: _Optional[int] = ..., ino: _Optional[int] = ..., offset: _Optional[int] = ...
    ) -> None: ...

class AndroidFsFsyncStartFtraceEvent(_message.Message):
    __slots__ = ("cmdline", "i_size", "ino", "pathbuf", "pid")
    CMDLINE_FIELD_NUMBER: _ClassVar[int]
    I_SIZE_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PATHBUF_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    cmdline: str
    i_size: int
    ino: int
    pathbuf: str
    pid: int
    def __init__(
        self,
        cmdline: _Optional[str] = ...,
        i_size: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pathbuf: _Optional[str] = ...,
        pid: _Optional[int] = ...,
    ) -> None: ...

class BinderTransactionFtraceEvent(_message.Message):
    __slots__ = ("debug_id", "target_node", "to_proc", "to_thread", "reply", "code", "flags")
    DEBUG_ID_FIELD_NUMBER: _ClassVar[int]
    TARGET_NODE_FIELD_NUMBER: _ClassVar[int]
    TO_PROC_FIELD_NUMBER: _ClassVar[int]
    TO_THREAD_FIELD_NUMBER: _ClassVar[int]
    REPLY_FIELD_NUMBER: _ClassVar[int]
    CODE_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    debug_id: int
    target_node: int
    to_proc: int
    to_thread: int
    reply: int
    code: int
    flags: int
    def __init__(
        self,
        debug_id: _Optional[int] = ...,
        target_node: _Optional[int] = ...,
        to_proc: _Optional[int] = ...,
        to_thread: _Optional[int] = ...,
        reply: _Optional[int] = ...,
        code: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class BinderTransactionReceivedFtraceEvent(_message.Message):
    __slots__ = ("debug_id",)
    DEBUG_ID_FIELD_NUMBER: _ClassVar[int]
    debug_id: int
    def __init__(self, debug_id: _Optional[int] = ...) -> None: ...

class BinderSetPriorityFtraceEvent(_message.Message):
    __slots__ = ("proc", "thread", "old_prio", "new_prio", "desired_prio")
    PROC_FIELD_NUMBER: _ClassVar[int]
    THREAD_FIELD_NUMBER: _ClassVar[int]
    OLD_PRIO_FIELD_NUMBER: _ClassVar[int]
    NEW_PRIO_FIELD_NUMBER: _ClassVar[int]
    DESIRED_PRIO_FIELD_NUMBER: _ClassVar[int]
    proc: int
    thread: int
    old_prio: int
    new_prio: int
    desired_prio: int
    def __init__(
        self,
        proc: _Optional[int] = ...,
        thread: _Optional[int] = ...,
        old_prio: _Optional[int] = ...,
        new_prio: _Optional[int] = ...,
        desired_prio: _Optional[int] = ...,
    ) -> None: ...

class BinderLockFtraceEvent(_message.Message):
    __slots__ = ("tag",)
    TAG_FIELD_NUMBER: _ClassVar[int]
    tag: str
    def __init__(self, tag: _Optional[str] = ...) -> None: ...

class BinderLockedFtraceEvent(_message.Message):
    __slots__ = ("tag",)
    TAG_FIELD_NUMBER: _ClassVar[int]
    tag: str
    def __init__(self, tag: _Optional[str] = ...) -> None: ...

class BinderUnlockFtraceEvent(_message.Message):
    __slots__ = ("tag",)
    TAG_FIELD_NUMBER: _ClassVar[int]
    tag: str
    def __init__(self, tag: _Optional[str] = ...) -> None: ...

class BinderTransactionAllocBufFtraceEvent(_message.Message):
    __slots__ = ("data_size", "debug_id", "offsets_size", "extra_buffers_size")
    DATA_SIZE_FIELD_NUMBER: _ClassVar[int]
    DEBUG_ID_FIELD_NUMBER: _ClassVar[int]
    OFFSETS_SIZE_FIELD_NUMBER: _ClassVar[int]
    EXTRA_BUFFERS_SIZE_FIELD_NUMBER: _ClassVar[int]
    data_size: int
    debug_id: int
    offsets_size: int
    extra_buffers_size: int
    def __init__(
        self,
        data_size: _Optional[int] = ...,
        debug_id: _Optional[int] = ...,
        offsets_size: _Optional[int] = ...,
        extra_buffers_size: _Optional[int] = ...,
    ) -> None: ...

class BinderCommandFtraceEvent(_message.Message):
    __slots__ = ("cmd",)
    CMD_FIELD_NUMBER: _ClassVar[int]
    cmd: int
    def __init__(self, cmd: _Optional[int] = ...) -> None: ...

class BinderReturnFtraceEvent(_message.Message):
    __slots__ = ("cmd",)
    CMD_FIELD_NUMBER: _ClassVar[int]
    cmd: int
    def __init__(self, cmd: _Optional[int] = ...) -> None: ...

class BlockRqIssueFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "bytes", "rwbs", "comm", "cmd")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    BYTES_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    CMD_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    bytes: int
    rwbs: str
    comm: str
    cmd: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        bytes: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
        cmd: _Optional[str] = ...,
    ) -> None: ...

class BlockBioBackmergeFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "rwbs", "comm")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    rwbs: str
    comm: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
    ) -> None: ...

class BlockBioBounceFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "rwbs", "comm")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    rwbs: str
    comm: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
    ) -> None: ...

class BlockBioCompleteFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "error", "rwbs")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    ERROR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    error: int
    rwbs: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        error: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
    ) -> None: ...

class BlockBioFrontmergeFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "rwbs", "comm")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    rwbs: str
    comm: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
    ) -> None: ...

class BlockBioQueueFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "rwbs", "comm")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    rwbs: str
    comm: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
    ) -> None: ...

class BlockBioRemapFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "old_dev", "old_sector", "rwbs")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    OLD_DEV_FIELD_NUMBER: _ClassVar[int]
    OLD_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    old_dev: int
    old_sector: int
    rwbs: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        old_dev: _Optional[int] = ...,
        old_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
    ) -> None: ...

class BlockDirtyBufferFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "size")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    size: int
    def __init__(self, dev: _Optional[int] = ..., sector: _Optional[int] = ..., size: _Optional[int] = ...) -> None: ...

class BlockGetrqFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "rwbs", "comm")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    rwbs: str
    comm: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
    ) -> None: ...

class BlockPlugFtraceEvent(_message.Message):
    __slots__ = ("comm",)
    COMM_FIELD_NUMBER: _ClassVar[int]
    comm: str
    def __init__(self, comm: _Optional[str] = ...) -> None: ...

class BlockRqAbortFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "errors", "rwbs", "cmd")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    ERRORS_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    CMD_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    errors: int
    rwbs: str
    cmd: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        errors: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        cmd: _Optional[str] = ...,
    ) -> None: ...

class BlockRqCompleteFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "errors", "rwbs", "cmd", "error")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    ERRORS_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    CMD_FIELD_NUMBER: _ClassVar[int]
    ERROR_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    errors: int
    rwbs: str
    cmd: str
    error: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        errors: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        cmd: _Optional[str] = ...,
        error: _Optional[int] = ...,
    ) -> None: ...

class BlockRqInsertFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "bytes", "rwbs", "comm", "cmd")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    BYTES_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    CMD_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    bytes: int
    rwbs: str
    comm: str
    cmd: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        bytes: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
        cmd: _Optional[str] = ...,
    ) -> None: ...

class BlockRqRemapFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "old_dev", "old_sector", "nr_bios", "rwbs")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    OLD_DEV_FIELD_NUMBER: _ClassVar[int]
    OLD_SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_BIOS_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    old_dev: int
    old_sector: int
    nr_bios: int
    rwbs: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        old_dev: _Optional[int] = ...,
        old_sector: _Optional[int] = ...,
        nr_bios: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
    ) -> None: ...

class BlockRqRequeueFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "errors", "rwbs", "cmd")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    ERRORS_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    CMD_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    errors: int
    rwbs: str
    cmd: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        errors: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        cmd: _Optional[str] = ...,
    ) -> None: ...

class BlockSleeprqFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "nr_sector", "rwbs", "comm")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NR_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    nr_sector: int
    rwbs: str
    comm: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        nr_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
    ) -> None: ...

class BlockSplitFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "new_sector", "rwbs", "comm")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    NEW_SECTOR_FIELD_NUMBER: _ClassVar[int]
    RWBS_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    new_sector: int
    rwbs: str
    comm: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        new_sector: _Optional[int] = ...,
        rwbs: _Optional[str] = ...,
        comm: _Optional[str] = ...,
    ) -> None: ...

class BlockTouchBufferFtraceEvent(_message.Message):
    __slots__ = ("dev", "sector", "size")
    DEV_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    sector: int
    size: int
    def __init__(self, dev: _Optional[int] = ..., sector: _Optional[int] = ..., size: _Optional[int] = ...) -> None: ...

class BlockUnplugFtraceEvent(_message.Message):
    __slots__ = ("nr_rq", "comm")
    NR_RQ_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    nr_rq: int
    comm: str
    def __init__(self, nr_rq: _Optional[int] = ..., comm: _Optional[str] = ...) -> None: ...

class CgroupAttachTaskFtraceEvent(_message.Message):
    __slots__ = ("dst_root", "dst_id", "pid", "comm", "cname", "dst_level", "dst_path")
    DST_ROOT_FIELD_NUMBER: _ClassVar[int]
    DST_ID_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    CNAME_FIELD_NUMBER: _ClassVar[int]
    DST_LEVEL_FIELD_NUMBER: _ClassVar[int]
    DST_PATH_FIELD_NUMBER: _ClassVar[int]
    dst_root: int
    dst_id: int
    pid: int
    comm: str
    cname: str
    dst_level: int
    dst_path: str
    def __init__(
        self,
        dst_root: _Optional[int] = ...,
        dst_id: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        comm: _Optional[str] = ...,
        cname: _Optional[str] = ...,
        dst_level: _Optional[int] = ...,
        dst_path: _Optional[str] = ...,
    ) -> None: ...

class CgroupMkdirFtraceEvent(_message.Message):
    __slots__ = ("root", "id", "cname", "level", "path")
    ROOT_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    CNAME_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    PATH_FIELD_NUMBER: _ClassVar[int]
    root: int
    id: int
    cname: str
    level: int
    path: str
    def __init__(
        self,
        root: _Optional[int] = ...,
        id: _Optional[int] = ...,
        cname: _Optional[str] = ...,
        level: _Optional[int] = ...,
        path: _Optional[str] = ...,
    ) -> None: ...

class CgroupRemountFtraceEvent(_message.Message):
    __slots__ = ("root", "ss_mask", "name")
    ROOT_FIELD_NUMBER: _ClassVar[int]
    SS_MASK_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    root: int
    ss_mask: int
    name: str
    def __init__(
        self, root: _Optional[int] = ..., ss_mask: _Optional[int] = ..., name: _Optional[str] = ...
    ) -> None: ...

class CgroupRmdirFtraceEvent(_message.Message):
    __slots__ = ("root", "id", "cname", "level", "path")
    ROOT_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    CNAME_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    PATH_FIELD_NUMBER: _ClassVar[int]
    root: int
    id: int
    cname: str
    level: int
    path: str
    def __init__(
        self,
        root: _Optional[int] = ...,
        id: _Optional[int] = ...,
        cname: _Optional[str] = ...,
        level: _Optional[int] = ...,
        path: _Optional[str] = ...,
    ) -> None: ...

class CgroupTransferTasksFtraceEvent(_message.Message):
    __slots__ = ("dst_root", "dst_id", "pid", "comm", "cname", "dst_level", "dst_path")
    DST_ROOT_FIELD_NUMBER: _ClassVar[int]
    DST_ID_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    CNAME_FIELD_NUMBER: _ClassVar[int]
    DST_LEVEL_FIELD_NUMBER: _ClassVar[int]
    DST_PATH_FIELD_NUMBER: _ClassVar[int]
    dst_root: int
    dst_id: int
    pid: int
    comm: str
    cname: str
    dst_level: int
    dst_path: str
    def __init__(
        self,
        dst_root: _Optional[int] = ...,
        dst_id: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        comm: _Optional[str] = ...,
        cname: _Optional[str] = ...,
        dst_level: _Optional[int] = ...,
        dst_path: _Optional[str] = ...,
    ) -> None: ...

class CgroupDestroyRootFtraceEvent(_message.Message):
    __slots__ = ("root", "ss_mask", "name")
    ROOT_FIELD_NUMBER: _ClassVar[int]
    SS_MASK_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    root: int
    ss_mask: int
    name: str
    def __init__(
        self, root: _Optional[int] = ..., ss_mask: _Optional[int] = ..., name: _Optional[str] = ...
    ) -> None: ...

class CgroupReleaseFtraceEvent(_message.Message):
    __slots__ = ("root", "id", "cname", "level", "path")
    ROOT_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    CNAME_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    PATH_FIELD_NUMBER: _ClassVar[int]
    root: int
    id: int
    cname: str
    level: int
    path: str
    def __init__(
        self,
        root: _Optional[int] = ...,
        id: _Optional[int] = ...,
        cname: _Optional[str] = ...,
        level: _Optional[int] = ...,
        path: _Optional[str] = ...,
    ) -> None: ...

class CgroupRenameFtraceEvent(_message.Message):
    __slots__ = ("root", "id", "cname", "level", "path")
    ROOT_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    CNAME_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    PATH_FIELD_NUMBER: _ClassVar[int]
    root: int
    id: int
    cname: str
    level: int
    path: str
    def __init__(
        self,
        root: _Optional[int] = ...,
        id: _Optional[int] = ...,
        cname: _Optional[str] = ...,
        level: _Optional[int] = ...,
        path: _Optional[str] = ...,
    ) -> None: ...

class CgroupSetupRootFtraceEvent(_message.Message):
    __slots__ = ("root", "ss_mask", "name")
    ROOT_FIELD_NUMBER: _ClassVar[int]
    SS_MASK_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    root: int
    ss_mask: int
    name: str
    def __init__(
        self, root: _Optional[int] = ..., ss_mask: _Optional[int] = ..., name: _Optional[str] = ...
    ) -> None: ...

class ClkEnableFtraceEvent(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class ClkDisableFtraceEvent(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class ClkSetRateFtraceEvent(_message.Message):
    __slots__ = ("name", "rate")
    NAME_FIELD_NUMBER: _ClassVar[int]
    RATE_FIELD_NUMBER: _ClassVar[int]
    name: str
    rate: int
    def __init__(self, name: _Optional[str] = ..., rate: _Optional[int] = ...) -> None: ...

class CmaAllocStartFtraceEvent(_message.Message):
    __slots__ = ("align", "count", "name")
    ALIGN_FIELD_NUMBER: _ClassVar[int]
    COUNT_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    align: int
    count: int
    name: str
    def __init__(
        self, align: _Optional[int] = ..., count: _Optional[int] = ..., name: _Optional[str] = ...
    ) -> None: ...

class CmaAllocInfoFtraceEvent(_message.Message):
    __slots__ = (
        "align",
        "count",
        "err_iso",
        "err_mig",
        "err_test",
        "name",
        "nr_mapped",
        "nr_migrated",
        "nr_reclaimed",
        "pfn",
    )
    ALIGN_FIELD_NUMBER: _ClassVar[int]
    COUNT_FIELD_NUMBER: _ClassVar[int]
    ERR_ISO_FIELD_NUMBER: _ClassVar[int]
    ERR_MIG_FIELD_NUMBER: _ClassVar[int]
    ERR_TEST_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    NR_MAPPED_FIELD_NUMBER: _ClassVar[int]
    NR_MIGRATED_FIELD_NUMBER: _ClassVar[int]
    NR_RECLAIMED_FIELD_NUMBER: _ClassVar[int]
    PFN_FIELD_NUMBER: _ClassVar[int]
    align: int
    count: int
    err_iso: int
    err_mig: int
    err_test: int
    name: str
    nr_mapped: int
    nr_migrated: int
    nr_reclaimed: int
    pfn: int
    def __init__(
        self,
        align: _Optional[int] = ...,
        count: _Optional[int] = ...,
        err_iso: _Optional[int] = ...,
        err_mig: _Optional[int] = ...,
        err_test: _Optional[int] = ...,
        name: _Optional[str] = ...,
        nr_mapped: _Optional[int] = ...,
        nr_migrated: _Optional[int] = ...,
        nr_reclaimed: _Optional[int] = ...,
        pfn: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionBeginFtraceEvent(_message.Message):
    __slots__ = ("zone_start", "migrate_pfn", "free_pfn", "zone_end", "sync")
    ZONE_START_FIELD_NUMBER: _ClassVar[int]
    MIGRATE_PFN_FIELD_NUMBER: _ClassVar[int]
    FREE_PFN_FIELD_NUMBER: _ClassVar[int]
    ZONE_END_FIELD_NUMBER: _ClassVar[int]
    SYNC_FIELD_NUMBER: _ClassVar[int]
    zone_start: int
    migrate_pfn: int
    free_pfn: int
    zone_end: int
    sync: int
    def __init__(
        self,
        zone_start: _Optional[int] = ...,
        migrate_pfn: _Optional[int] = ...,
        free_pfn: _Optional[int] = ...,
        zone_end: _Optional[int] = ...,
        sync: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionDeferCompactionFtraceEvent(_message.Message):
    __slots__ = ("nid", "idx", "order", "considered", "defer_shift", "order_failed")
    NID_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    CONSIDERED_FIELD_NUMBER: _ClassVar[int]
    DEFER_SHIFT_FIELD_NUMBER: _ClassVar[int]
    ORDER_FAILED_FIELD_NUMBER: _ClassVar[int]
    nid: int
    idx: int
    order: int
    considered: int
    defer_shift: int
    order_failed: int
    def __init__(
        self,
        nid: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        order: _Optional[int] = ...,
        considered: _Optional[int] = ...,
        defer_shift: _Optional[int] = ...,
        order_failed: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionDeferredFtraceEvent(_message.Message):
    __slots__ = ("nid", "idx", "order", "considered", "defer_shift", "order_failed")
    NID_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    CONSIDERED_FIELD_NUMBER: _ClassVar[int]
    DEFER_SHIFT_FIELD_NUMBER: _ClassVar[int]
    ORDER_FAILED_FIELD_NUMBER: _ClassVar[int]
    nid: int
    idx: int
    order: int
    considered: int
    defer_shift: int
    order_failed: int
    def __init__(
        self,
        nid: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        order: _Optional[int] = ...,
        considered: _Optional[int] = ...,
        defer_shift: _Optional[int] = ...,
        order_failed: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionDeferResetFtraceEvent(_message.Message):
    __slots__ = ("nid", "idx", "order", "considered", "defer_shift", "order_failed")
    NID_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    CONSIDERED_FIELD_NUMBER: _ClassVar[int]
    DEFER_SHIFT_FIELD_NUMBER: _ClassVar[int]
    ORDER_FAILED_FIELD_NUMBER: _ClassVar[int]
    nid: int
    idx: int
    order: int
    considered: int
    defer_shift: int
    order_failed: int
    def __init__(
        self,
        nid: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        order: _Optional[int] = ...,
        considered: _Optional[int] = ...,
        defer_shift: _Optional[int] = ...,
        order_failed: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionEndFtraceEvent(_message.Message):
    __slots__ = ("zone_start", "migrate_pfn", "free_pfn", "zone_end", "sync", "status")
    ZONE_START_FIELD_NUMBER: _ClassVar[int]
    MIGRATE_PFN_FIELD_NUMBER: _ClassVar[int]
    FREE_PFN_FIELD_NUMBER: _ClassVar[int]
    ZONE_END_FIELD_NUMBER: _ClassVar[int]
    SYNC_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    zone_start: int
    migrate_pfn: int
    free_pfn: int
    zone_end: int
    sync: int
    status: int
    def __init__(
        self,
        zone_start: _Optional[int] = ...,
        migrate_pfn: _Optional[int] = ...,
        free_pfn: _Optional[int] = ...,
        zone_end: _Optional[int] = ...,
        sync: _Optional[int] = ...,
        status: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionFinishedFtraceEvent(_message.Message):
    __slots__ = ("nid", "idx", "order", "ret")
    NID_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    nid: int
    idx: int
    order: int
    ret: int
    def __init__(
        self,
        nid: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        order: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionIsolateFreepagesFtraceEvent(_message.Message):
    __slots__ = ("start_pfn", "end_pfn", "nr_scanned", "nr_taken")
    START_PFN_FIELD_NUMBER: _ClassVar[int]
    END_PFN_FIELD_NUMBER: _ClassVar[int]
    NR_SCANNED_FIELD_NUMBER: _ClassVar[int]
    NR_TAKEN_FIELD_NUMBER: _ClassVar[int]
    start_pfn: int
    end_pfn: int
    nr_scanned: int
    nr_taken: int
    def __init__(
        self,
        start_pfn: _Optional[int] = ...,
        end_pfn: _Optional[int] = ...,
        nr_scanned: _Optional[int] = ...,
        nr_taken: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionIsolateMigratepagesFtraceEvent(_message.Message):
    __slots__ = ("start_pfn", "end_pfn", "nr_scanned", "nr_taken")
    START_PFN_FIELD_NUMBER: _ClassVar[int]
    END_PFN_FIELD_NUMBER: _ClassVar[int]
    NR_SCANNED_FIELD_NUMBER: _ClassVar[int]
    NR_TAKEN_FIELD_NUMBER: _ClassVar[int]
    start_pfn: int
    end_pfn: int
    nr_scanned: int
    nr_taken: int
    def __init__(
        self,
        start_pfn: _Optional[int] = ...,
        end_pfn: _Optional[int] = ...,
        nr_scanned: _Optional[int] = ...,
        nr_taken: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionKcompactdSleepFtraceEvent(_message.Message):
    __slots__ = ("nid",)
    NID_FIELD_NUMBER: _ClassVar[int]
    nid: int
    def __init__(self, nid: _Optional[int] = ...) -> None: ...

class MmCompactionKcompactdWakeFtraceEvent(_message.Message):
    __slots__ = ("nid", "order", "classzone_idx", "highest_zoneidx")
    NID_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    CLASSZONE_IDX_FIELD_NUMBER: _ClassVar[int]
    HIGHEST_ZONEIDX_FIELD_NUMBER: _ClassVar[int]
    nid: int
    order: int
    classzone_idx: int
    highest_zoneidx: int
    def __init__(
        self,
        nid: _Optional[int] = ...,
        order: _Optional[int] = ...,
        classzone_idx: _Optional[int] = ...,
        highest_zoneidx: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionMigratepagesFtraceEvent(_message.Message):
    __slots__ = ("nr_migrated", "nr_failed")
    NR_MIGRATED_FIELD_NUMBER: _ClassVar[int]
    NR_FAILED_FIELD_NUMBER: _ClassVar[int]
    nr_migrated: int
    nr_failed: int
    def __init__(self, nr_migrated: _Optional[int] = ..., nr_failed: _Optional[int] = ...) -> None: ...

class MmCompactionSuitableFtraceEvent(_message.Message):
    __slots__ = ("nid", "idx", "order", "ret")
    NID_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    nid: int
    idx: int
    order: int
    ret: int
    def __init__(
        self,
        nid: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        order: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionTryToCompactPagesFtraceEvent(_message.Message):
    __slots__ = ("order", "gfp_mask", "mode", "prio")
    ORDER_FIELD_NUMBER: _ClassVar[int]
    GFP_MASK_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    order: int
    gfp_mask: int
    mode: int
    prio: int
    def __init__(
        self,
        order: _Optional[int] = ...,
        gfp_mask: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        prio: _Optional[int] = ...,
    ) -> None: ...

class MmCompactionWakeupKcompactdFtraceEvent(_message.Message):
    __slots__ = ("nid", "order", "classzone_idx", "highest_zoneidx")
    NID_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    CLASSZONE_IDX_FIELD_NUMBER: _ClassVar[int]
    HIGHEST_ZONEIDX_FIELD_NUMBER: _ClassVar[int]
    nid: int
    order: int
    classzone_idx: int
    highest_zoneidx: int
    def __init__(
        self,
        nid: _Optional[int] = ...,
        order: _Optional[int] = ...,
        classzone_idx: _Optional[int] = ...,
        highest_zoneidx: _Optional[int] = ...,
    ) -> None: ...

class CpuhpExitFtraceEvent(_message.Message):
    __slots__ = ("cpu", "idx", "ret", "state")
    CPU_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    idx: int
    ret: int
    state: int
    def __init__(
        self,
        cpu: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        ret: _Optional[int] = ...,
        state: _Optional[int] = ...,
    ) -> None: ...

class CpuhpMultiEnterFtraceEvent(_message.Message):
    __slots__ = ("cpu", "fun", "idx", "target")
    CPU_FIELD_NUMBER: _ClassVar[int]
    FUN_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    TARGET_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    fun: int
    idx: int
    target: int
    def __init__(
        self,
        cpu: _Optional[int] = ...,
        fun: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        target: _Optional[int] = ...,
    ) -> None: ...

class CpuhpEnterFtraceEvent(_message.Message):
    __slots__ = ("cpu", "fun", "idx", "target")
    CPU_FIELD_NUMBER: _ClassVar[int]
    FUN_FIELD_NUMBER: _ClassVar[int]
    IDX_FIELD_NUMBER: _ClassVar[int]
    TARGET_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    fun: int
    idx: int
    target: int
    def __init__(
        self,
        cpu: _Optional[int] = ...,
        fun: _Optional[int] = ...,
        idx: _Optional[int] = ...,
        target: _Optional[int] = ...,
    ) -> None: ...

class CpuhpLatencyFtraceEvent(_message.Message):
    __slots__ = ("cpu", "ret", "state", "time")
    CPU_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    TIME_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    ret: int
    state: int
    time: int
    def __init__(
        self,
        cpu: _Optional[int] = ...,
        ret: _Optional[int] = ...,
        state: _Optional[int] = ...,
        time: _Optional[int] = ...,
    ) -> None: ...

class CpuhpPauseFtraceEvent(_message.Message):
    __slots__ = ("active_cpus", "cpus", "pause", "time")
    ACTIVE_CPUS_FIELD_NUMBER: _ClassVar[int]
    CPUS_FIELD_NUMBER: _ClassVar[int]
    PAUSE_FIELD_NUMBER: _ClassVar[int]
    TIME_FIELD_NUMBER: _ClassVar[int]
    active_cpus: int
    cpus: int
    pause: int
    time: int
    def __init__(
        self,
        active_cpus: _Optional[int] = ...,
        cpus: _Optional[int] = ...,
        pause: _Optional[int] = ...,
        time: _Optional[int] = ...,
    ) -> None: ...

class CrosEcSensorhubDataFtraceEvent(_message.Message):
    __slots__ = ("current_time", "current_timestamp", "delta", "ec_fifo_timestamp", "ec_sensor_num", "fifo_timestamp")
    CURRENT_TIME_FIELD_NUMBER: _ClassVar[int]
    CURRENT_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    DELTA_FIELD_NUMBER: _ClassVar[int]
    EC_FIFO_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    EC_SENSOR_NUM_FIELD_NUMBER: _ClassVar[int]
    FIFO_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    current_time: int
    current_timestamp: int
    delta: int
    ec_fifo_timestamp: int
    ec_sensor_num: int
    fifo_timestamp: int
    def __init__(
        self,
        current_time: _Optional[int] = ...,
        current_timestamp: _Optional[int] = ...,
        delta: _Optional[int] = ...,
        ec_fifo_timestamp: _Optional[int] = ...,
        ec_sensor_num: _Optional[int] = ...,
        fifo_timestamp: _Optional[int] = ...,
    ) -> None: ...

class DmaFenceInitFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class DmaFenceEmitFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class DmaFenceSignaledFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class DmaFenceWaitStartFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class DmaFenceWaitEndFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class DmaHeapStatFtraceEvent(_message.Message):
    __slots__ = ("inode", "len", "total_allocated")
    INODE_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    TOTAL_ALLOCATED_FIELD_NUMBER: _ClassVar[int]
    inode: int
    len: int
    total_allocated: int
    def __init__(
        self, inode: _Optional[int] = ..., len: _Optional[int] = ..., total_allocated: _Optional[int] = ...
    ) -> None: ...

class DpuTracingMarkWriteFtraceEvent(_message.Message):
    __slots__ = ("pid", "trace_name", "trace_begin", "name", "type", "value")
    PID_FIELD_NUMBER: _ClassVar[int]
    TRACE_NAME_FIELD_NUMBER: _ClassVar[int]
    TRACE_BEGIN_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    pid: int
    trace_name: str
    trace_begin: int
    name: str
    type: int
    value: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        trace_name: _Optional[str] = ...,
        trace_begin: _Optional[int] = ...,
        name: _Optional[str] = ...,
        type: _Optional[int] = ...,
        value: _Optional[int] = ...,
    ) -> None: ...

class DrmVblankEventFtraceEvent(_message.Message):
    __slots__ = ("crtc", "high_prec", "seq", "time")
    CRTC_FIELD_NUMBER: _ClassVar[int]
    HIGH_PREC_FIELD_NUMBER: _ClassVar[int]
    SEQ_FIELD_NUMBER: _ClassVar[int]
    TIME_FIELD_NUMBER: _ClassVar[int]
    crtc: int
    high_prec: int
    seq: int
    time: int
    def __init__(
        self,
        crtc: _Optional[int] = ...,
        high_prec: _Optional[int] = ...,
        seq: _Optional[int] = ...,
        time: _Optional[int] = ...,
    ) -> None: ...

class DrmVblankEventDeliveredFtraceEvent(_message.Message):
    __slots__ = ("crtc", "file", "seq")
    CRTC_FIELD_NUMBER: _ClassVar[int]
    FILE_FIELD_NUMBER: _ClassVar[int]
    SEQ_FIELD_NUMBER: _ClassVar[int]
    crtc: int
    file: int
    seq: int
    def __init__(self, crtc: _Optional[int] = ..., file: _Optional[int] = ..., seq: _Optional[int] = ...) -> None: ...

class Ext4DaWriteBeginFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class Ext4DaWriteEndFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "copied")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    COPIED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    copied: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        copied: _Optional[int] = ...,
    ) -> None: ...

class Ext4SyncFileEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "parent", "datasync")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PARENT_FIELD_NUMBER: _ClassVar[int]
    DATASYNC_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    parent: int
    datasync: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        parent: _Optional[int] = ...,
        datasync: _Optional[int] = ...,
    ) -> None: ...

class Ext4SyncFileExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class Ext4AllocDaBlocksFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "data_blocks", "meta_blocks")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    DATA_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    META_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    data_blocks: int
    meta_blocks: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        data_blocks: _Optional[int] = ...,
        meta_blocks: _Optional[int] = ...,
    ) -> None: ...

class Ext4AllocateBlocksFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "block", "len", "logical", "lleft", "lright", "goal", "pleft", "pright", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    BLOCK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    LOGICAL_FIELD_NUMBER: _ClassVar[int]
    LLEFT_FIELD_NUMBER: _ClassVar[int]
    LRIGHT_FIELD_NUMBER: _ClassVar[int]
    GOAL_FIELD_NUMBER: _ClassVar[int]
    PLEFT_FIELD_NUMBER: _ClassVar[int]
    PRIGHT_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    block: int
    len: int
    logical: int
    lleft: int
    lright: int
    goal: int
    pleft: int
    pright: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        block: _Optional[int] = ...,
        len: _Optional[int] = ...,
        logical: _Optional[int] = ...,
        lleft: _Optional[int] = ...,
        lright: _Optional[int] = ...,
        goal: _Optional[int] = ...,
        pleft: _Optional[int] = ...,
        pright: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class Ext4AllocateInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "dir", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    DIR_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    dir: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        dir: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4BeginOrderedTruncateFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "new_size")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NEW_SIZE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    new_size: int
    def __init__(
        self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., new_size: _Optional[int] = ...
    ) -> None: ...

class Ext4CollapseRangeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "offset", "len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    offset: int
    len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class Ext4DaReleaseSpaceFtraceEvent(_message.Message):
    __slots__ = (
        "dev",
        "ino",
        "i_blocks",
        "freed_blocks",
        "reserved_data_blocks",
        "reserved_meta_blocks",
        "allocated_meta_blocks",
        "mode",
    )
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    I_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    FREED_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RESERVED_DATA_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RESERVED_META_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    ALLOCATED_META_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    i_blocks: int
    freed_blocks: int
    reserved_data_blocks: int
    reserved_meta_blocks: int
    allocated_meta_blocks: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        i_blocks: _Optional[int] = ...,
        freed_blocks: _Optional[int] = ...,
        reserved_data_blocks: _Optional[int] = ...,
        reserved_meta_blocks: _Optional[int] = ...,
        allocated_meta_blocks: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4DaReserveSpaceFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "i_blocks", "reserved_data_blocks", "reserved_meta_blocks", "mode", "md_needed")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    I_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RESERVED_DATA_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RESERVED_META_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    MD_NEEDED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    i_blocks: int
    reserved_data_blocks: int
    reserved_meta_blocks: int
    mode: int
    md_needed: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        i_blocks: _Optional[int] = ...,
        reserved_data_blocks: _Optional[int] = ...,
        reserved_meta_blocks: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        md_needed: _Optional[int] = ...,
    ) -> None: ...

class Ext4DaUpdateReserveSpaceFtraceEvent(_message.Message):
    __slots__ = (
        "dev",
        "ino",
        "i_blocks",
        "used_blocks",
        "reserved_data_blocks",
        "reserved_meta_blocks",
        "allocated_meta_blocks",
        "quota_claim",
        "mode",
    )
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    I_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    USED_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RESERVED_DATA_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RESERVED_META_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    ALLOCATED_META_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    QUOTA_CLAIM_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    i_blocks: int
    used_blocks: int
    reserved_data_blocks: int
    reserved_meta_blocks: int
    allocated_meta_blocks: int
    quota_claim: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        i_blocks: _Optional[int] = ...,
        used_blocks: _Optional[int] = ...,
        reserved_data_blocks: _Optional[int] = ...,
        reserved_meta_blocks: _Optional[int] = ...,
        allocated_meta_blocks: _Optional[int] = ...,
        quota_claim: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4DaWritePagesFtraceEvent(_message.Message):
    __slots__ = (
        "dev",
        "ino",
        "first_page",
        "nr_to_write",
        "sync_mode",
        "b_blocknr",
        "b_size",
        "b_state",
        "io_done",
        "pages_written",
    )
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    FIRST_PAGE_FIELD_NUMBER: _ClassVar[int]
    NR_TO_WRITE_FIELD_NUMBER: _ClassVar[int]
    SYNC_MODE_FIELD_NUMBER: _ClassVar[int]
    B_BLOCKNR_FIELD_NUMBER: _ClassVar[int]
    B_SIZE_FIELD_NUMBER: _ClassVar[int]
    B_STATE_FIELD_NUMBER: _ClassVar[int]
    IO_DONE_FIELD_NUMBER: _ClassVar[int]
    PAGES_WRITTEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    first_page: int
    nr_to_write: int
    sync_mode: int
    b_blocknr: int
    b_size: int
    b_state: int
    io_done: int
    pages_written: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        first_page: _Optional[int] = ...,
        nr_to_write: _Optional[int] = ...,
        sync_mode: _Optional[int] = ...,
        b_blocknr: _Optional[int] = ...,
        b_size: _Optional[int] = ...,
        b_state: _Optional[int] = ...,
        io_done: _Optional[int] = ...,
        pages_written: _Optional[int] = ...,
    ) -> None: ...

class Ext4DaWritePagesExtentFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class Ext4DirectIOEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "rw")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    RW_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    rw: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        rw: _Optional[int] = ...,
    ) -> None: ...

class Ext4DirectIOExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "rw", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    RW_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    rw: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        rw: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class Ext4DiscardBlocksFtraceEvent(_message.Message):
    __slots__ = ("dev", "blk", "count")
    DEV_FIELD_NUMBER: _ClassVar[int]
    BLK_FIELD_NUMBER: _ClassVar[int]
    COUNT_FIELD_NUMBER: _ClassVar[int]
    dev: int
    blk: int
    count: int
    def __init__(self, dev: _Optional[int] = ..., blk: _Optional[int] = ..., count: _Optional[int] = ...) -> None: ...

class Ext4DiscardPreallocationsFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "len", "needed")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    NEEDED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    len: int
    needed: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        len: _Optional[int] = ...,
        needed: _Optional[int] = ...,
    ) -> None: ...

class Ext4DropInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "drop")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    DROP_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    drop: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., drop: _Optional[int] = ...) -> None: ...

class Ext4EsCacheExtentFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "pblk", "status")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    pblk: int
    status: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        status: _Optional[int] = ...,
    ) -> None: ...

class Ext4EsFindDelayedExtentRangeEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., lblk: _Optional[int] = ...) -> None: ...

class Ext4EsFindDelayedExtentRangeExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "pblk", "status")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    pblk: int
    status: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        status: _Optional[int] = ...,
    ) -> None: ...

class Ext4EsInsertExtentFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "pblk", "status")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    pblk: int
    status: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        status: _Optional[int] = ...,
    ) -> None: ...

class Ext4EsLookupExtentEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., lblk: _Optional[int] = ...) -> None: ...

class Ext4EsLookupExtentExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "pblk", "status", "found")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    FOUND_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    pblk: int
    status: int
    found: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        status: _Optional[int] = ...,
        found: _Optional[int] = ...,
    ) -> None: ...

class Ext4EsRemoveExtentFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class Ext4EsShrinkFtraceEvent(_message.Message):
    __slots__ = ("dev", "nr_shrunk", "scan_time", "nr_skipped", "retried")
    DEV_FIELD_NUMBER: _ClassVar[int]
    NR_SHRUNK_FIELD_NUMBER: _ClassVar[int]
    SCAN_TIME_FIELD_NUMBER: _ClassVar[int]
    NR_SKIPPED_FIELD_NUMBER: _ClassVar[int]
    RETRIED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    nr_shrunk: int
    scan_time: int
    nr_skipped: int
    retried: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        nr_shrunk: _Optional[int] = ...,
        scan_time: _Optional[int] = ...,
        nr_skipped: _Optional[int] = ...,
        retried: _Optional[int] = ...,
    ) -> None: ...

class Ext4EsShrinkCountFtraceEvent(_message.Message):
    __slots__ = ("dev", "nr_to_scan", "cache_cnt")
    DEV_FIELD_NUMBER: _ClassVar[int]
    NR_TO_SCAN_FIELD_NUMBER: _ClassVar[int]
    CACHE_CNT_FIELD_NUMBER: _ClassVar[int]
    dev: int
    nr_to_scan: int
    cache_cnt: int
    def __init__(
        self, dev: _Optional[int] = ..., nr_to_scan: _Optional[int] = ..., cache_cnt: _Optional[int] = ...
    ) -> None: ...

class Ext4EsShrinkScanEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "nr_to_scan", "cache_cnt")
    DEV_FIELD_NUMBER: _ClassVar[int]
    NR_TO_SCAN_FIELD_NUMBER: _ClassVar[int]
    CACHE_CNT_FIELD_NUMBER: _ClassVar[int]
    dev: int
    nr_to_scan: int
    cache_cnt: int
    def __init__(
        self, dev: _Optional[int] = ..., nr_to_scan: _Optional[int] = ..., cache_cnt: _Optional[int] = ...
    ) -> None: ...

class Ext4EsShrinkScanExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "nr_shrunk", "cache_cnt")
    DEV_FIELD_NUMBER: _ClassVar[int]
    NR_SHRUNK_FIELD_NUMBER: _ClassVar[int]
    CACHE_CNT_FIELD_NUMBER: _ClassVar[int]
    dev: int
    nr_shrunk: int
    cache_cnt: int
    def __init__(
        self, dev: _Optional[int] = ..., nr_shrunk: _Optional[int] = ..., cache_cnt: _Optional[int] = ...
    ) -> None: ...

class Ext4EvictInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "nlink")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NLINK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    nlink: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., nlink: _Optional[int] = ...) -> None: ...

class Ext4ExtConvertToInitializedEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "m_lblk", "m_len", "u_lblk", "u_len", "u_pblk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    M_LBLK_FIELD_NUMBER: _ClassVar[int]
    M_LEN_FIELD_NUMBER: _ClassVar[int]
    U_LBLK_FIELD_NUMBER: _ClassVar[int]
    U_LEN_FIELD_NUMBER: _ClassVar[int]
    U_PBLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    m_lblk: int
    m_len: int
    u_lblk: int
    u_len: int
    u_pblk: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        m_lblk: _Optional[int] = ...,
        m_len: _Optional[int] = ...,
        u_lblk: _Optional[int] = ...,
        u_len: _Optional[int] = ...,
        u_pblk: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtConvertToInitializedFastpathFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "m_lblk", "m_len", "u_lblk", "u_len", "u_pblk", "i_lblk", "i_len", "i_pblk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    M_LBLK_FIELD_NUMBER: _ClassVar[int]
    M_LEN_FIELD_NUMBER: _ClassVar[int]
    U_LBLK_FIELD_NUMBER: _ClassVar[int]
    U_LEN_FIELD_NUMBER: _ClassVar[int]
    U_PBLK_FIELD_NUMBER: _ClassVar[int]
    I_LBLK_FIELD_NUMBER: _ClassVar[int]
    I_LEN_FIELD_NUMBER: _ClassVar[int]
    I_PBLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    m_lblk: int
    m_len: int
    u_lblk: int
    u_len: int
    u_pblk: int
    i_lblk: int
    i_len: int
    i_pblk: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        m_lblk: _Optional[int] = ...,
        m_len: _Optional[int] = ...,
        u_lblk: _Optional[int] = ...,
        u_len: _Optional[int] = ...,
        u_pblk: _Optional[int] = ...,
        i_lblk: _Optional[int] = ...,
        i_len: _Optional[int] = ...,
        i_pblk: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtHandleUnwrittenExtentsFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "flags", "lblk", "pblk", "len", "allocated", "newblk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    ALLOCATED_FIELD_NUMBER: _ClassVar[int]
    NEWBLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    flags: int
    lblk: int
    pblk: int
    len: int
    allocated: int
    newblk: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        allocated: _Optional[int] = ...,
        newblk: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtInCacheFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtLoadExtentFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pblk", "lblk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pblk: int
    lblk: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtMapBlocksEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtMapBlocksExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "flags", "pblk", "lblk", "len", "mflags", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MFLAGS_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    flags: int
    pblk: int
    lblk: int
    len: int
    mflags: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        mflags: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtPutInCacheFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "start")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    start: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        start: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtRemoveSpaceFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "start", "end", "depth")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    END_FIELD_NUMBER: _ClassVar[int]
    DEPTH_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    start: int
    end: int
    depth: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        start: _Optional[int] = ...,
        end: _Optional[int] = ...,
        depth: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtRemoveSpaceDoneFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "start", "end", "depth", "partial", "eh_entries", "pc_lblk", "pc_pclu", "pc_state")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    END_FIELD_NUMBER: _ClassVar[int]
    DEPTH_FIELD_NUMBER: _ClassVar[int]
    PARTIAL_FIELD_NUMBER: _ClassVar[int]
    EH_ENTRIES_FIELD_NUMBER: _ClassVar[int]
    PC_LBLK_FIELD_NUMBER: _ClassVar[int]
    PC_PCLU_FIELD_NUMBER: _ClassVar[int]
    PC_STATE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    start: int
    end: int
    depth: int
    partial: int
    eh_entries: int
    pc_lblk: int
    pc_pclu: int
    pc_state: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        start: _Optional[int] = ...,
        end: _Optional[int] = ...,
        depth: _Optional[int] = ...,
        partial: _Optional[int] = ...,
        eh_entries: _Optional[int] = ...,
        pc_lblk: _Optional[int] = ...,
        pc_pclu: _Optional[int] = ...,
        pc_state: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtRmIdxFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pblk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pblk: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., pblk: _Optional[int] = ...) -> None: ...

class Ext4ExtRmLeafFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "partial", "start", "ee_lblk", "ee_pblk", "ee_len", "pc_lblk", "pc_pclu", "pc_state")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PARTIAL_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    EE_LBLK_FIELD_NUMBER: _ClassVar[int]
    EE_PBLK_FIELD_NUMBER: _ClassVar[int]
    EE_LEN_FIELD_NUMBER: _ClassVar[int]
    PC_LBLK_FIELD_NUMBER: _ClassVar[int]
    PC_PCLU_FIELD_NUMBER: _ClassVar[int]
    PC_STATE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    partial: int
    start: int
    ee_lblk: int
    ee_pblk: int
    ee_len: int
    pc_lblk: int
    pc_pclu: int
    pc_state: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        partial: _Optional[int] = ...,
        start: _Optional[int] = ...,
        ee_lblk: _Optional[int] = ...,
        ee_pblk: _Optional[int] = ...,
        ee_len: _Optional[int] = ...,
        pc_lblk: _Optional[int] = ...,
        pc_pclu: _Optional[int] = ...,
        pc_state: _Optional[int] = ...,
    ) -> None: ...

class Ext4ExtShowExtentFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pblk", "lblk", "len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pblk: int
    lblk: int
    len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class Ext4FallocateEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "offset", "len", "mode", "pos")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    offset: int
    len: int
    mode: int
    pos: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        len: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        pos: _Optional[int] = ...,
    ) -> None: ...

class Ext4FallocateExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "blocks", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    blocks: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class Ext4FindDelallocRangeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "to", "reverse", "found", "found_blk")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    FROM_FIELD_NUMBER: _ClassVar[int]
    TO_FIELD_NUMBER: _ClassVar[int]
    REVERSE_FIELD_NUMBER: _ClassVar[int]
    FOUND_FIELD_NUMBER: _ClassVar[int]
    FOUND_BLK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    to: int
    reverse: int
    found: int
    found_blk: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        to: _Optional[int] = ...,
        reverse: _Optional[int] = ...,
        found: _Optional[int] = ...,
        found_blk: _Optional[int] = ...,
        **kwargs
    ) -> None: ...

class Ext4ForgetFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "block", "is_metadata", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    BLOCK_FIELD_NUMBER: _ClassVar[int]
    IS_METADATA_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    block: int
    is_metadata: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        block: _Optional[int] = ...,
        is_metadata: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4FreeBlocksFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "block", "count", "flags", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    BLOCK_FIELD_NUMBER: _ClassVar[int]
    COUNT_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    block: int
    count: int
    flags: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        block: _Optional[int] = ...,
        count: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4FreeInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "uid", "gid", "blocks", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    UID_FIELD_NUMBER: _ClassVar[int]
    GID_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    uid: int
    gid: int
    blocks: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        uid: _Optional[int] = ...,
        gid: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4GetImpliedClusterAllocExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "flags", "lblk", "pblk", "len", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    flags: int
    lblk: int
    pblk: int
    len: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class Ext4GetReservedClusterAllocFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class Ext4IndMapBlocksEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "lblk", "len", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    lblk: int
    len: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class Ext4IndMapBlocksExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "flags", "pblk", "lblk", "len", "mflags", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    PBLK_FIELD_NUMBER: _ClassVar[int]
    LBLK_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MFLAGS_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    flags: int
    pblk: int
    lblk: int
    len: int
    mflags: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        pblk: _Optional[int] = ...,
        lblk: _Optional[int] = ...,
        len: _Optional[int] = ...,
        mflags: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class Ext4InsertRangeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "offset", "len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    offset: int
    len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class Ext4InvalidatepageFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "index", "offset", "length")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LENGTH_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    index: int
    offset: int
    length: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        index: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        length: _Optional[int] = ...,
    ) -> None: ...

class Ext4JournalStartFtraceEvent(_message.Message):
    __slots__ = ("dev", "ip", "blocks", "rsv_blocks", "nblocks", "revoke_creds")
    DEV_FIELD_NUMBER: _ClassVar[int]
    IP_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RSV_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    NBLOCKS_FIELD_NUMBER: _ClassVar[int]
    REVOKE_CREDS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ip: int
    blocks: int
    rsv_blocks: int
    nblocks: int
    revoke_creds: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ip: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        rsv_blocks: _Optional[int] = ...,
        nblocks: _Optional[int] = ...,
        revoke_creds: _Optional[int] = ...,
    ) -> None: ...

class Ext4JournalStartReservedFtraceEvent(_message.Message):
    __slots__ = ("dev", "ip", "blocks")
    DEV_FIELD_NUMBER: _ClassVar[int]
    IP_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ip: int
    blocks: int
    def __init__(self, dev: _Optional[int] = ..., ip: _Optional[int] = ..., blocks: _Optional[int] = ...) -> None: ...

class Ext4JournalledInvalidatepageFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "index", "offset", "length")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LENGTH_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    index: int
    offset: int
    length: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        index: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        length: _Optional[int] = ...,
    ) -> None: ...

class Ext4JournalledWriteEndFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "copied")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    COPIED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    copied: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        copied: _Optional[int] = ...,
    ) -> None: ...

class Ext4LoadInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ...) -> None: ...

class Ext4LoadInodeBitmapFtraceEvent(_message.Message):
    __slots__ = ("dev", "group")
    DEV_FIELD_NUMBER: _ClassVar[int]
    GROUP_FIELD_NUMBER: _ClassVar[int]
    dev: int
    group: int
    def __init__(self, dev: _Optional[int] = ..., group: _Optional[int] = ...) -> None: ...

class Ext4MarkInodeDirtyFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ip")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    IP_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ip: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ip: _Optional[int] = ...) -> None: ...

class Ext4MbBitmapLoadFtraceEvent(_message.Message):
    __slots__ = ("dev", "group")
    DEV_FIELD_NUMBER: _ClassVar[int]
    GROUP_FIELD_NUMBER: _ClassVar[int]
    dev: int
    group: int
    def __init__(self, dev: _Optional[int] = ..., group: _Optional[int] = ...) -> None: ...

class Ext4MbBuddyBitmapLoadFtraceEvent(_message.Message):
    __slots__ = ("dev", "group")
    DEV_FIELD_NUMBER: _ClassVar[int]
    GROUP_FIELD_NUMBER: _ClassVar[int]
    dev: int
    group: int
    def __init__(self, dev: _Optional[int] = ..., group: _Optional[int] = ...) -> None: ...

class Ext4MbDiscardPreallocationsFtraceEvent(_message.Message):
    __slots__ = ("dev", "needed")
    DEV_FIELD_NUMBER: _ClassVar[int]
    NEEDED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    needed: int
    def __init__(self, dev: _Optional[int] = ..., needed: _Optional[int] = ...) -> None: ...

class Ext4MbNewGroupPaFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pa_pstart", "pa_lstart", "pa_len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PA_PSTART_FIELD_NUMBER: _ClassVar[int]
    PA_LSTART_FIELD_NUMBER: _ClassVar[int]
    PA_LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pa_pstart: int
    pa_lstart: int
    pa_len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pa_pstart: _Optional[int] = ...,
        pa_lstart: _Optional[int] = ...,
        pa_len: _Optional[int] = ...,
    ) -> None: ...

class Ext4MbNewInodePaFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pa_pstart", "pa_lstart", "pa_len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PA_PSTART_FIELD_NUMBER: _ClassVar[int]
    PA_LSTART_FIELD_NUMBER: _ClassVar[int]
    PA_LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pa_pstart: int
    pa_lstart: int
    pa_len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pa_pstart: _Optional[int] = ...,
        pa_lstart: _Optional[int] = ...,
        pa_len: _Optional[int] = ...,
    ) -> None: ...

class Ext4MbReleaseGroupPaFtraceEvent(_message.Message):
    __slots__ = ("dev", "pa_pstart", "pa_len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    PA_PSTART_FIELD_NUMBER: _ClassVar[int]
    PA_LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    pa_pstart: int
    pa_len: int
    def __init__(
        self, dev: _Optional[int] = ..., pa_pstart: _Optional[int] = ..., pa_len: _Optional[int] = ...
    ) -> None: ...

class Ext4MbReleaseInodePaFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "block", "count")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    BLOCK_FIELD_NUMBER: _ClassVar[int]
    COUNT_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    block: int
    count: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        block: _Optional[int] = ...,
        count: _Optional[int] = ...,
    ) -> None: ...

class Ext4MballocAllocFtraceEvent(_message.Message):
    __slots__ = (
        "dev",
        "ino",
        "orig_logical",
        "orig_start",
        "orig_group",
        "orig_len",
        "goal_logical",
        "goal_start",
        "goal_group",
        "goal_len",
        "result_logical",
        "result_start",
        "result_group",
        "result_len",
        "found",
        "groups",
        "buddy",
        "flags",
        "tail",
        "cr",
    )
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    ORIG_LOGICAL_FIELD_NUMBER: _ClassVar[int]
    ORIG_START_FIELD_NUMBER: _ClassVar[int]
    ORIG_GROUP_FIELD_NUMBER: _ClassVar[int]
    ORIG_LEN_FIELD_NUMBER: _ClassVar[int]
    GOAL_LOGICAL_FIELD_NUMBER: _ClassVar[int]
    GOAL_START_FIELD_NUMBER: _ClassVar[int]
    GOAL_GROUP_FIELD_NUMBER: _ClassVar[int]
    GOAL_LEN_FIELD_NUMBER: _ClassVar[int]
    RESULT_LOGICAL_FIELD_NUMBER: _ClassVar[int]
    RESULT_START_FIELD_NUMBER: _ClassVar[int]
    RESULT_GROUP_FIELD_NUMBER: _ClassVar[int]
    RESULT_LEN_FIELD_NUMBER: _ClassVar[int]
    FOUND_FIELD_NUMBER: _ClassVar[int]
    GROUPS_FIELD_NUMBER: _ClassVar[int]
    BUDDY_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    TAIL_FIELD_NUMBER: _ClassVar[int]
    CR_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    orig_logical: int
    orig_start: int
    orig_group: int
    orig_len: int
    goal_logical: int
    goal_start: int
    goal_group: int
    goal_len: int
    result_logical: int
    result_start: int
    result_group: int
    result_len: int
    found: int
    groups: int
    buddy: int
    flags: int
    tail: int
    cr: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        orig_logical: _Optional[int] = ...,
        orig_start: _Optional[int] = ...,
        orig_group: _Optional[int] = ...,
        orig_len: _Optional[int] = ...,
        goal_logical: _Optional[int] = ...,
        goal_start: _Optional[int] = ...,
        goal_group: _Optional[int] = ...,
        goal_len: _Optional[int] = ...,
        result_logical: _Optional[int] = ...,
        result_start: _Optional[int] = ...,
        result_group: _Optional[int] = ...,
        result_len: _Optional[int] = ...,
        found: _Optional[int] = ...,
        groups: _Optional[int] = ...,
        buddy: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        tail: _Optional[int] = ...,
        cr: _Optional[int] = ...,
    ) -> None: ...

class Ext4MballocDiscardFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "result_start", "result_group", "result_len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RESULT_START_FIELD_NUMBER: _ClassVar[int]
    RESULT_GROUP_FIELD_NUMBER: _ClassVar[int]
    RESULT_LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    result_start: int
    result_group: int
    result_len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        result_start: _Optional[int] = ...,
        result_group: _Optional[int] = ...,
        result_len: _Optional[int] = ...,
    ) -> None: ...

class Ext4MballocFreeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "result_start", "result_group", "result_len")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RESULT_START_FIELD_NUMBER: _ClassVar[int]
    RESULT_GROUP_FIELD_NUMBER: _ClassVar[int]
    RESULT_LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    result_start: int
    result_group: int
    result_len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        result_start: _Optional[int] = ...,
        result_group: _Optional[int] = ...,
        result_len: _Optional[int] = ...,
    ) -> None: ...

class Ext4MballocPreallocFtraceEvent(_message.Message):
    __slots__ = (
        "dev",
        "ino",
        "orig_logical",
        "orig_start",
        "orig_group",
        "orig_len",
        "result_logical",
        "result_start",
        "result_group",
        "result_len",
    )
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    ORIG_LOGICAL_FIELD_NUMBER: _ClassVar[int]
    ORIG_START_FIELD_NUMBER: _ClassVar[int]
    ORIG_GROUP_FIELD_NUMBER: _ClassVar[int]
    ORIG_LEN_FIELD_NUMBER: _ClassVar[int]
    RESULT_LOGICAL_FIELD_NUMBER: _ClassVar[int]
    RESULT_START_FIELD_NUMBER: _ClassVar[int]
    RESULT_GROUP_FIELD_NUMBER: _ClassVar[int]
    RESULT_LEN_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    orig_logical: int
    orig_start: int
    orig_group: int
    orig_len: int
    result_logical: int
    result_start: int
    result_group: int
    result_len: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        orig_logical: _Optional[int] = ...,
        orig_start: _Optional[int] = ...,
        orig_group: _Optional[int] = ...,
        orig_len: _Optional[int] = ...,
        result_logical: _Optional[int] = ...,
        result_start: _Optional[int] = ...,
        result_group: _Optional[int] = ...,
        result_len: _Optional[int] = ...,
    ) -> None: ...

class Ext4OtherInodeUpdateTimeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "orig_ino", "uid", "gid", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    ORIG_INO_FIELD_NUMBER: _ClassVar[int]
    UID_FIELD_NUMBER: _ClassVar[int]
    GID_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    orig_ino: int
    uid: int
    gid: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        orig_ino: _Optional[int] = ...,
        uid: _Optional[int] = ...,
        gid: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4PunchHoleFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "offset", "len", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    offset: int
    len: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        len: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4ReadBlockBitmapLoadFtraceEvent(_message.Message):
    __slots__ = ("dev", "group", "prefetch")
    DEV_FIELD_NUMBER: _ClassVar[int]
    GROUP_FIELD_NUMBER: _ClassVar[int]
    PREFETCH_FIELD_NUMBER: _ClassVar[int]
    dev: int
    group: int
    prefetch: int
    def __init__(
        self, dev: _Optional[int] = ..., group: _Optional[int] = ..., prefetch: _Optional[int] = ...
    ) -> None: ...

class Ext4ReadpageFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "index")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    index: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., index: _Optional[int] = ...) -> None: ...

class Ext4ReleasepageFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "index")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    index: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., index: _Optional[int] = ...) -> None: ...

class Ext4RemoveBlocksFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "to", "partial", "ee_pblk", "ee_lblk", "ee_len", "pc_lblk", "pc_pclu", "pc_state")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    FROM_FIELD_NUMBER: _ClassVar[int]
    TO_FIELD_NUMBER: _ClassVar[int]
    PARTIAL_FIELD_NUMBER: _ClassVar[int]
    EE_PBLK_FIELD_NUMBER: _ClassVar[int]
    EE_LBLK_FIELD_NUMBER: _ClassVar[int]
    EE_LEN_FIELD_NUMBER: _ClassVar[int]
    PC_LBLK_FIELD_NUMBER: _ClassVar[int]
    PC_PCLU_FIELD_NUMBER: _ClassVar[int]
    PC_STATE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    to: int
    partial: int
    ee_pblk: int
    ee_lblk: int
    ee_len: int
    pc_lblk: int
    pc_pclu: int
    pc_state: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        to: _Optional[int] = ...,
        partial: _Optional[int] = ...,
        ee_pblk: _Optional[int] = ...,
        ee_lblk: _Optional[int] = ...,
        ee_len: _Optional[int] = ...,
        pc_lblk: _Optional[int] = ...,
        pc_pclu: _Optional[int] = ...,
        pc_state: _Optional[int] = ...,
        **kwargs
    ) -> None: ...

class Ext4RequestBlocksFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "len", "logical", "lleft", "lright", "goal", "pleft", "pright", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    LOGICAL_FIELD_NUMBER: _ClassVar[int]
    LLEFT_FIELD_NUMBER: _ClassVar[int]
    LRIGHT_FIELD_NUMBER: _ClassVar[int]
    GOAL_FIELD_NUMBER: _ClassVar[int]
    PLEFT_FIELD_NUMBER: _ClassVar[int]
    PRIGHT_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    len: int
    logical: int
    lleft: int
    lright: int
    goal: int
    pleft: int
    pright: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        len: _Optional[int] = ...,
        logical: _Optional[int] = ...,
        lleft: _Optional[int] = ...,
        lright: _Optional[int] = ...,
        goal: _Optional[int] = ...,
        pleft: _Optional[int] = ...,
        pright: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class Ext4RequestInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "dir", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    DIR_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    dir: int
    mode: int
    def __init__(self, dev: _Optional[int] = ..., dir: _Optional[int] = ..., mode: _Optional[int] = ...) -> None: ...

class Ext4SyncFsFtraceEvent(_message.Message):
    __slots__ = ("dev", "wait")
    DEV_FIELD_NUMBER: _ClassVar[int]
    WAIT_FIELD_NUMBER: _ClassVar[int]
    dev: int
    wait: int
    def __init__(self, dev: _Optional[int] = ..., wait: _Optional[int] = ...) -> None: ...

class Ext4TrimAllFreeFtraceEvent(_message.Message):
    __slots__ = ("dev_major", "dev_minor", "group", "start", "len")
    DEV_MAJOR_FIELD_NUMBER: _ClassVar[int]
    DEV_MINOR_FIELD_NUMBER: _ClassVar[int]
    GROUP_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    dev_major: int
    dev_minor: int
    group: int
    start: int
    len: int
    def __init__(
        self,
        dev_major: _Optional[int] = ...,
        dev_minor: _Optional[int] = ...,
        group: _Optional[int] = ...,
        start: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class Ext4TrimExtentFtraceEvent(_message.Message):
    __slots__ = ("dev_major", "dev_minor", "group", "start", "len")
    DEV_MAJOR_FIELD_NUMBER: _ClassVar[int]
    DEV_MINOR_FIELD_NUMBER: _ClassVar[int]
    GROUP_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    dev_major: int
    dev_minor: int
    group: int
    start: int
    len: int
    def __init__(
        self,
        dev_major: _Optional[int] = ...,
        dev_minor: _Optional[int] = ...,
        group: _Optional[int] = ...,
        start: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class Ext4TruncateEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "blocks")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    blocks: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., blocks: _Optional[int] = ...) -> None: ...

class Ext4TruncateExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "blocks")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    blocks: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., blocks: _Optional[int] = ...) -> None: ...

class Ext4UnlinkEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "parent", "size")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PARENT_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    parent: int
    size: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        parent: _Optional[int] = ...,
        size: _Optional[int] = ...,
    ) -> None: ...

class Ext4UnlinkExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class Ext4WriteBeginFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class Ext4WriteEndFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "copied")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    COPIED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    copied: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        copied: _Optional[int] = ...,
    ) -> None: ...

class Ext4WritepageFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "index")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    index: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., index: _Optional[int] = ...) -> None: ...

class Ext4WritepagesFtraceEvent(_message.Message):
    __slots__ = (
        "dev",
        "ino",
        "nr_to_write",
        "pages_skipped",
        "range_start",
        "range_end",
        "writeback_index",
        "sync_mode",
        "for_kupdate",
        "range_cyclic",
    )
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NR_TO_WRITE_FIELD_NUMBER: _ClassVar[int]
    PAGES_SKIPPED_FIELD_NUMBER: _ClassVar[int]
    RANGE_START_FIELD_NUMBER: _ClassVar[int]
    RANGE_END_FIELD_NUMBER: _ClassVar[int]
    WRITEBACK_INDEX_FIELD_NUMBER: _ClassVar[int]
    SYNC_MODE_FIELD_NUMBER: _ClassVar[int]
    FOR_KUPDATE_FIELD_NUMBER: _ClassVar[int]
    RANGE_CYCLIC_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    nr_to_write: int
    pages_skipped: int
    range_start: int
    range_end: int
    writeback_index: int
    sync_mode: int
    for_kupdate: int
    range_cyclic: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        nr_to_write: _Optional[int] = ...,
        pages_skipped: _Optional[int] = ...,
        range_start: _Optional[int] = ...,
        range_end: _Optional[int] = ...,
        writeback_index: _Optional[int] = ...,
        sync_mode: _Optional[int] = ...,
        for_kupdate: _Optional[int] = ...,
        range_cyclic: _Optional[int] = ...,
    ) -> None: ...

class Ext4WritepagesResultFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret", "pages_written", "pages_skipped", "writeback_index", "sync_mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    PAGES_WRITTEN_FIELD_NUMBER: _ClassVar[int]
    PAGES_SKIPPED_FIELD_NUMBER: _ClassVar[int]
    WRITEBACK_INDEX_FIELD_NUMBER: _ClassVar[int]
    SYNC_MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    pages_written: int
    pages_skipped: int
    writeback_index: int
    sync_mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        ret: _Optional[int] = ...,
        pages_written: _Optional[int] = ...,
        pages_skipped: _Optional[int] = ...,
        writeback_index: _Optional[int] = ...,
        sync_mode: _Optional[int] = ...,
    ) -> None: ...

class Ext4ZeroRangeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "offset", "len", "mode")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    offset: int
    len: int
    mode: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        len: _Optional[int] = ...,
        mode: _Optional[int] = ...,
    ) -> None: ...

class F2fsDoSubmitBioFtraceEvent(_message.Message):
    __slots__ = ("dev", "btype", "sync", "sector", "size")
    DEV_FIELD_NUMBER: _ClassVar[int]
    BTYPE_FIELD_NUMBER: _ClassVar[int]
    SYNC_FIELD_NUMBER: _ClassVar[int]
    SECTOR_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    btype: int
    sync: int
    sector: int
    size: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        btype: _Optional[int] = ...,
        sync: _Optional[int] = ...,
        sector: _Optional[int] = ...,
        size: _Optional[int] = ...,
    ) -> None: ...

class F2fsEvictInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pino", "mode", "size", "nlink", "blocks", "advise")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PINO_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    NLINK_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    ADVISE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pino: int
    mode: int
    size: int
    nlink: int
    blocks: int
    advise: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pino: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        size: _Optional[int] = ...,
        nlink: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        advise: _Optional[int] = ...,
    ) -> None: ...

class F2fsFallocateFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "mode", "offset", "len", "size", "blocks", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    OFFSET_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    mode: int
    offset: int
    len: int
    size: int
    blocks: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        offset: _Optional[int] = ...,
        len: _Optional[int] = ...,
        size: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class F2fsGetDataBlockFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "iblock", "bh_start", "bh_size", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    IBLOCK_FIELD_NUMBER: _ClassVar[int]
    BH_START_FIELD_NUMBER: _ClassVar[int]
    BH_SIZE_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    iblock: int
    bh_start: int
    bh_size: int
    ret: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        iblock: _Optional[int] = ...,
        bh_start: _Optional[int] = ...,
        bh_size: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class F2fsGetVictimFtraceEvent(_message.Message):
    __slots__ = (
        "dev",
        "type",
        "gc_type",
        "alloc_mode",
        "gc_mode",
        "victim",
        "ofs_unit",
        "pre_victim",
        "prefree",
        "free",
        "cost",
    )
    DEV_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    GC_TYPE_FIELD_NUMBER: _ClassVar[int]
    ALLOC_MODE_FIELD_NUMBER: _ClassVar[int]
    GC_MODE_FIELD_NUMBER: _ClassVar[int]
    VICTIM_FIELD_NUMBER: _ClassVar[int]
    OFS_UNIT_FIELD_NUMBER: _ClassVar[int]
    PRE_VICTIM_FIELD_NUMBER: _ClassVar[int]
    PREFREE_FIELD_NUMBER: _ClassVar[int]
    FREE_FIELD_NUMBER: _ClassVar[int]
    COST_FIELD_NUMBER: _ClassVar[int]
    dev: int
    type: int
    gc_type: int
    alloc_mode: int
    gc_mode: int
    victim: int
    ofs_unit: int
    pre_victim: int
    prefree: int
    free: int
    cost: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        type: _Optional[int] = ...,
        gc_type: _Optional[int] = ...,
        alloc_mode: _Optional[int] = ...,
        gc_mode: _Optional[int] = ...,
        victim: _Optional[int] = ...,
        ofs_unit: _Optional[int] = ...,
        pre_victim: _Optional[int] = ...,
        prefree: _Optional[int] = ...,
        free: _Optional[int] = ...,
        cost: _Optional[int] = ...,
    ) -> None: ...

class F2fsIgetFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pino", "mode", "size", "nlink", "blocks", "advise")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PINO_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    NLINK_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    ADVISE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pino: int
    mode: int
    size: int
    nlink: int
    blocks: int
    advise: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pino: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        size: _Optional[int] = ...,
        nlink: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        advise: _Optional[int] = ...,
    ) -> None: ...

class F2fsIgetExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class F2fsNewInodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class F2fsReadpageFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "index", "blkaddr", "type", "dir", "dirty", "uptodate")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    BLKADDR_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    DIR_FIELD_NUMBER: _ClassVar[int]
    DIRTY_FIELD_NUMBER: _ClassVar[int]
    UPTODATE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    index: int
    blkaddr: int
    type: int
    dir: int
    dirty: int
    uptodate: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        index: _Optional[int] = ...,
        blkaddr: _Optional[int] = ...,
        type: _Optional[int] = ...,
        dir: _Optional[int] = ...,
        dirty: _Optional[int] = ...,
        uptodate: _Optional[int] = ...,
    ) -> None: ...

class F2fsReserveNewBlockFtraceEvent(_message.Message):
    __slots__ = ("dev", "nid", "ofs_in_node")
    DEV_FIELD_NUMBER: _ClassVar[int]
    NID_FIELD_NUMBER: _ClassVar[int]
    OFS_IN_NODE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    nid: int
    ofs_in_node: int
    def __init__(
        self, dev: _Optional[int] = ..., nid: _Optional[int] = ..., ofs_in_node: _Optional[int] = ...
    ) -> None: ...

class F2fsSetPageDirtyFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "type", "dir", "index", "dirty", "uptodate")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    DIR_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    DIRTY_FIELD_NUMBER: _ClassVar[int]
    UPTODATE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    type: int
    dir: int
    index: int
    dirty: int
    uptodate: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        type: _Optional[int] = ...,
        dir: _Optional[int] = ...,
        index: _Optional[int] = ...,
        dirty: _Optional[int] = ...,
        uptodate: _Optional[int] = ...,
    ) -> None: ...

class F2fsSubmitWritePageFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "type", "index", "block")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    BLOCK_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    type: int
    index: int
    block: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        type: _Optional[int] = ...,
        index: _Optional[int] = ...,
        block: _Optional[int] = ...,
    ) -> None: ...

class F2fsSyncFileEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pino", "mode", "size", "nlink", "blocks", "advise")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PINO_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    NLINK_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    ADVISE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pino: int
    mode: int
    size: int
    nlink: int
    blocks: int
    advise: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pino: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        size: _Optional[int] = ...,
        nlink: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        advise: _Optional[int] = ...,
    ) -> None: ...

class F2fsSyncFileExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "need_cp", "datasync", "ret", "cp_reason")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NEED_CP_FIELD_NUMBER: _ClassVar[int]
    DATASYNC_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    CP_REASON_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    need_cp: int
    datasync: int
    ret: int
    cp_reason: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        need_cp: _Optional[int] = ...,
        datasync: _Optional[int] = ...,
        ret: _Optional[int] = ...,
        cp_reason: _Optional[int] = ...,
    ) -> None: ...

class F2fsSyncFsFtraceEvent(_message.Message):
    __slots__ = ("dev", "dirty", "wait")
    DEV_FIELD_NUMBER: _ClassVar[int]
    DIRTY_FIELD_NUMBER: _ClassVar[int]
    WAIT_FIELD_NUMBER: _ClassVar[int]
    dev: int
    dirty: int
    wait: int
    def __init__(self, dev: _Optional[int] = ..., dirty: _Optional[int] = ..., wait: _Optional[int] = ...) -> None: ...

class F2fsTruncateFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pino", "mode", "size", "nlink", "blocks", "advise")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    PINO_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    NLINK_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    ADVISE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pino: int
    mode: int
    size: int
    nlink: int
    blocks: int
    advise: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pino: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        size: _Optional[int] = ...,
        nlink: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        advise: _Optional[int] = ...,
    ) -> None: ...

class F2fsTruncateBlocksEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "size", "blocks")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    FROM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    size: int
    blocks: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        size: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        **kwargs
    ) -> None: ...

class F2fsTruncateBlocksExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class F2fsTruncateDataBlocksRangeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "nid", "ofs", "free")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NID_FIELD_NUMBER: _ClassVar[int]
    OFS_FIELD_NUMBER: _ClassVar[int]
    FREE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    nid: int
    ofs: int
    free: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        nid: _Optional[int] = ...,
        ofs: _Optional[int] = ...,
        free: _Optional[int] = ...,
    ) -> None: ...

class F2fsTruncateInodeBlocksEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "size", "blocks")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    FROM_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    size: int
    blocks: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        size: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        **kwargs
    ) -> None: ...

class F2fsTruncateInodeBlocksExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class F2fsTruncateNodeFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "nid", "blk_addr")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NID_FIELD_NUMBER: _ClassVar[int]
    BLK_ADDR_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    nid: int
    blk_addr: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        nid: _Optional[int] = ...,
        blk_addr: _Optional[int] = ...,
    ) -> None: ...

class F2fsTruncateNodesEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "nid", "blk_addr")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NID_FIELD_NUMBER: _ClassVar[int]
    BLK_ADDR_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    nid: int
    blk_addr: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        nid: _Optional[int] = ...,
        blk_addr: _Optional[int] = ...,
    ) -> None: ...

class F2fsTruncateNodesExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class F2fsTruncatePartialNodesFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "nid", "depth", "err")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    NID_FIELD_NUMBER: _ClassVar[int]
    DEPTH_FIELD_NUMBER: _ClassVar[int]
    ERR_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    nid: int
    depth: int
    err: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        nid: _Optional[int] = ...,
        depth: _Optional[int] = ...,
        err: _Optional[int] = ...,
    ) -> None: ...

class F2fsUnlinkEnterFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "size", "blocks", "name")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    BLOCKS_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    size: int
    blocks: int
    name: str
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        size: _Optional[int] = ...,
        blocks: _Optional[int] = ...,
        name: _Optional[str] = ...,
    ) -> None: ...

class F2fsUnlinkExitFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "ret")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    ret: int
    def __init__(self, dev: _Optional[int] = ..., ino: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class F2fsVmPageMkwriteFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "type", "dir", "index", "dirty", "uptodate")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    DIR_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    DIRTY_FIELD_NUMBER: _ClassVar[int]
    UPTODATE_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    type: int
    dir: int
    index: int
    dirty: int
    uptodate: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        type: _Optional[int] = ...,
        dir: _Optional[int] = ...,
        index: _Optional[int] = ...,
        dirty: _Optional[int] = ...,
        uptodate: _Optional[int] = ...,
    ) -> None: ...

class F2fsWriteBeginFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "flags")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    flags: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        flags: _Optional[int] = ...,
    ) -> None: ...

class F2fsWriteCheckpointFtraceEvent(_message.Message):
    __slots__ = ("dev", "is_umount", "msg", "reason")
    DEV_FIELD_NUMBER: _ClassVar[int]
    IS_UMOUNT_FIELD_NUMBER: _ClassVar[int]
    MSG_FIELD_NUMBER: _ClassVar[int]
    REASON_FIELD_NUMBER: _ClassVar[int]
    dev: int
    is_umount: int
    msg: str
    reason: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        is_umount: _Optional[int] = ...,
        msg: _Optional[str] = ...,
        reason: _Optional[int] = ...,
    ) -> None: ...

class F2fsWriteEndFtraceEvent(_message.Message):
    __slots__ = ("dev", "ino", "pos", "len", "copied")
    DEV_FIELD_NUMBER: _ClassVar[int]
    INO_FIELD_NUMBER: _ClassVar[int]
    POS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    COPIED_FIELD_NUMBER: _ClassVar[int]
    dev: int
    ino: int
    pos: int
    len: int
    copied: int
    def __init__(
        self,
        dev: _Optional[int] = ...,
        ino: _Optional[int] = ...,
        pos: _Optional[int] = ...,
        len: _Optional[int] = ...,
        copied: _Optional[int] = ...,
    ) -> None: ...

class F2fsIostatFtraceEvent(_message.Message):
    __slots__ = (
        "app_bio",
        "app_brio",
        "app_dio",
        "app_drio",
        "app_mio",
        "app_mrio",
        "app_rio",
        "app_wio",
        "dev",
        "fs_cdrio",
        "fs_cp_dio",
        "fs_cp_mio",
        "fs_cp_nio",
        "fs_dio",
        "fs_discard",
        "fs_drio",
        "fs_gc_dio",
        "fs_gc_nio",
        "fs_gdrio",
        "fs_mio",
        "fs_mrio",
        "fs_nio",
        "fs_nrio",
    )
    APP_BIO_FIELD_NUMBER: _ClassVar[int]
    APP_BRIO_FIELD_NUMBER: _ClassVar[int]
    APP_DIO_FIELD_NUMBER: _ClassVar[int]
    APP_DRIO_FIELD_NUMBER: _ClassVar[int]
    APP_MIO_FIELD_NUMBER: _ClassVar[int]
    APP_MRIO_FIELD_NUMBER: _ClassVar[int]
    APP_RIO_FIELD_NUMBER: _ClassVar[int]
    APP_WIO_FIELD_NUMBER: _ClassVar[int]
    DEV_FIELD_NUMBER: _ClassVar[int]
    FS_CDRIO_FIELD_NUMBER: _ClassVar[int]
    FS_CP_DIO_FIELD_NUMBER: _ClassVar[int]
    FS_CP_MIO_FIELD_NUMBER: _ClassVar[int]
    FS_CP_NIO_FIELD_NUMBER: _ClassVar[int]
    FS_DIO_FIELD_NUMBER: _ClassVar[int]
    FS_DISCARD_FIELD_NUMBER: _ClassVar[int]
    FS_DRIO_FIELD_NUMBER: _ClassVar[int]
    FS_GC_DIO_FIELD_NUMBER: _ClassVar[int]
    FS_GC_NIO_FIELD_NUMBER: _ClassVar[int]
    FS_GDRIO_FIELD_NUMBER: _ClassVar[int]
    FS_MIO_FIELD_NUMBER: _ClassVar[int]
    FS_MRIO_FIELD_NUMBER: _ClassVar[int]
    FS_NIO_FIELD_NUMBER: _ClassVar[int]
    FS_NRIO_FIELD_NUMBER: _ClassVar[int]
    app_bio: int
    app_brio: int
    app_dio: int
    app_drio: int
    app_mio: int
    app_mrio: int
    app_rio: int
    app_wio: int
    dev: int
    fs_cdrio: int
    fs_cp_dio: int
    fs_cp_mio: int
    fs_cp_nio: int
    fs_dio: int
    fs_discard: int
    fs_drio: int
    fs_gc_dio: int
    fs_gc_nio: int
    fs_gdrio: int
    fs_mio: int
    fs_mrio: int
    fs_nio: int
    fs_nrio: int
    def __init__(
        self,
        app_bio: _Optional[int] = ...,
        app_brio: _Optional[int] = ...,
        app_dio: _Optional[int] = ...,
        app_drio: _Optional[int] = ...,
        app_mio: _Optional[int] = ...,
        app_mrio: _Optional[int] = ...,
        app_rio: _Optional[int] = ...,
        app_wio: _Optional[int] = ...,
        dev: _Optional[int] = ...,
        fs_cdrio: _Optional[int] = ...,
        fs_cp_dio: _Optional[int] = ...,
        fs_cp_mio: _Optional[int] = ...,
        fs_cp_nio: _Optional[int] = ...,
        fs_dio: _Optional[int] = ...,
        fs_discard: _Optional[int] = ...,
        fs_drio: _Optional[int] = ...,
        fs_gc_dio: _Optional[int] = ...,
        fs_gc_nio: _Optional[int] = ...,
        fs_gdrio: _Optional[int] = ...,
        fs_mio: _Optional[int] = ...,
        fs_mrio: _Optional[int] = ...,
        fs_nio: _Optional[int] = ...,
        fs_nrio: _Optional[int] = ...,
    ) -> None: ...

class F2fsIostatLatencyFtraceEvent(_message.Message):
    __slots__ = (
        "d_rd_avg",
        "d_rd_cnt",
        "d_rd_peak",
        "d_wr_as_avg",
        "d_wr_as_cnt",
        "d_wr_as_peak",
        "d_wr_s_avg",
        "d_wr_s_cnt",
        "d_wr_s_peak",
        "dev",
        "m_rd_avg",
        "m_rd_cnt",
        "m_rd_peak",
        "m_wr_as_avg",
        "m_wr_as_cnt",
        "m_wr_as_peak",
        "m_wr_s_avg",
        "m_wr_s_cnt",
        "m_wr_s_peak",
        "n_rd_avg",
        "n_rd_cnt",
        "n_rd_peak",
        "n_wr_as_avg",
        "n_wr_as_cnt",
        "n_wr_as_peak",
        "n_wr_s_avg",
        "n_wr_s_cnt",
        "n_wr_s_peak",
    )
    D_RD_AVG_FIELD_NUMBER: _ClassVar[int]
    D_RD_CNT_FIELD_NUMBER: _ClassVar[int]
    D_RD_PEAK_FIELD_NUMBER: _ClassVar[int]
    D_WR_AS_AVG_FIELD_NUMBER: _ClassVar[int]
    D_WR_AS_CNT_FIELD_NUMBER: _ClassVar[int]
    D_WR_AS_PEAK_FIELD_NUMBER: _ClassVar[int]
    D_WR_S_AVG_FIELD_NUMBER: _ClassVar[int]
    D_WR_S_CNT_FIELD_NUMBER: _ClassVar[int]
    D_WR_S_PEAK_FIELD_NUMBER: _ClassVar[int]
    DEV_FIELD_NUMBER: _ClassVar[int]
    M_RD_AVG_FIELD_NUMBER: _ClassVar[int]
    M_RD_CNT_FIELD_NUMBER: _ClassVar[int]
    M_RD_PEAK_FIELD_NUMBER: _ClassVar[int]
    M_WR_AS_AVG_FIELD_NUMBER: _ClassVar[int]
    M_WR_AS_CNT_FIELD_NUMBER: _ClassVar[int]
    M_WR_AS_PEAK_FIELD_NUMBER: _ClassVar[int]
    M_WR_S_AVG_FIELD_NUMBER: _ClassVar[int]
    M_WR_S_CNT_FIELD_NUMBER: _ClassVar[int]
    M_WR_S_PEAK_FIELD_NUMBER: _ClassVar[int]
    N_RD_AVG_FIELD_NUMBER: _ClassVar[int]
    N_RD_CNT_FIELD_NUMBER: _ClassVar[int]
    N_RD_PEAK_FIELD_NUMBER: _ClassVar[int]
    N_WR_AS_AVG_FIELD_NUMBER: _ClassVar[int]
    N_WR_AS_CNT_FIELD_NUMBER: _ClassVar[int]
    N_WR_AS_PEAK_FIELD_NUMBER: _ClassVar[int]
    N_WR_S_AVG_FIELD_NUMBER: _ClassVar[int]
    N_WR_S_CNT_FIELD_NUMBER: _ClassVar[int]
    N_WR_S_PEAK_FIELD_NUMBER: _ClassVar[int]
    d_rd_avg: int
    d_rd_cnt: int
    d_rd_peak: int
    d_wr_as_avg: int
    d_wr_as_cnt: int
    d_wr_as_peak: int
    d_wr_s_avg: int
    d_wr_s_cnt: int
    d_wr_s_peak: int
    dev: int
    m_rd_avg: int
    m_rd_cnt: int
    m_rd_peak: int
    m_wr_as_avg: int
    m_wr_as_cnt: int
    m_wr_as_peak: int
    m_wr_s_avg: int
    m_wr_s_cnt: int
    m_wr_s_peak: int
    n_rd_avg: int
    n_rd_cnt: int
    n_rd_peak: int
    n_wr_as_avg: int
    n_wr_as_cnt: int
    n_wr_as_peak: int
    n_wr_s_avg: int
    n_wr_s_cnt: int
    n_wr_s_peak: int
    def __init__(
        self,
        d_rd_avg: _Optional[int] = ...,
        d_rd_cnt: _Optional[int] = ...,
        d_rd_peak: _Optional[int] = ...,
        d_wr_as_avg: _Optional[int] = ...,
        d_wr_as_cnt: _Optional[int] = ...,
        d_wr_as_peak: _Optional[int] = ...,
        d_wr_s_avg: _Optional[int] = ...,
        d_wr_s_cnt: _Optional[int] = ...,
        d_wr_s_peak: _Optional[int] = ...,
        dev: _Optional[int] = ...,
        m_rd_avg: _Optional[int] = ...,
        m_rd_cnt: _Optional[int] = ...,
        m_rd_peak: _Optional[int] = ...,
        m_wr_as_avg: _Optional[int] = ...,
        m_wr_as_cnt: _Optional[int] = ...,
        m_wr_as_peak: _Optional[int] = ...,
        m_wr_s_avg: _Optional[int] = ...,
        m_wr_s_cnt: _Optional[int] = ...,
        m_wr_s_peak: _Optional[int] = ...,
        n_rd_avg: _Optional[int] = ...,
        n_rd_cnt: _Optional[int] = ...,
        n_rd_peak: _Optional[int] = ...,
        n_wr_as_avg: _Optional[int] = ...,
        n_wr_as_cnt: _Optional[int] = ...,
        n_wr_as_peak: _Optional[int] = ...,
        n_wr_s_avg: _Optional[int] = ...,
        n_wr_s_cnt: _Optional[int] = ...,
        n_wr_s_peak: _Optional[int] = ...,
    ) -> None: ...

class FastrpcDmaStatFtraceEvent(_message.Message):
    __slots__ = ("cid", "len", "total_allocated")
    CID_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    TOTAL_ALLOCATED_FIELD_NUMBER: _ClassVar[int]
    cid: int
    len: int
    total_allocated: int
    def __init__(
        self, cid: _Optional[int] = ..., len: _Optional[int] = ..., total_allocated: _Optional[int] = ...
    ) -> None: ...

class FenceInitFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class FenceDestroyFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class FenceEnableSignalFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class FenceSignaledFtraceEvent(_message.Message):
    __slots__ = ("context", "driver", "seqno", "timeline")
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    DRIVER_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    context: int
    driver: str
    seqno: int
    timeline: str
    def __init__(
        self,
        context: _Optional[int] = ...,
        driver: _Optional[str] = ...,
        seqno: _Optional[int] = ...,
        timeline: _Optional[str] = ...,
    ) -> None: ...

class MmFilemapAddToPageCacheFtraceEvent(_message.Message):
    __slots__ = ("pfn", "i_ino", "index", "s_dev", "page")
    PFN_FIELD_NUMBER: _ClassVar[int]
    I_INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    S_DEV_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    pfn: int
    i_ino: int
    index: int
    s_dev: int
    page: int
    def __init__(
        self,
        pfn: _Optional[int] = ...,
        i_ino: _Optional[int] = ...,
        index: _Optional[int] = ...,
        s_dev: _Optional[int] = ...,
        page: _Optional[int] = ...,
    ) -> None: ...

class MmFilemapDeleteFromPageCacheFtraceEvent(_message.Message):
    __slots__ = ("pfn", "i_ino", "index", "s_dev", "page")
    PFN_FIELD_NUMBER: _ClassVar[int]
    I_INO_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    S_DEV_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    pfn: int
    i_ino: int
    index: int
    s_dev: int
    page: int
    def __init__(
        self,
        pfn: _Optional[int] = ...,
        i_ino: _Optional[int] = ...,
        index: _Optional[int] = ...,
        s_dev: _Optional[int] = ...,
        page: _Optional[int] = ...,
    ) -> None: ...

class PrintFtraceEvent(_message.Message):
    __slots__ = ("ip", "buf")
    IP_FIELD_NUMBER: _ClassVar[int]
    BUF_FIELD_NUMBER: _ClassVar[int]
    ip: int
    buf: str
    def __init__(self, ip: _Optional[int] = ..., buf: _Optional[str] = ...) -> None: ...

class FuncgraphEntryFtraceEvent(_message.Message):
    __slots__ = ("depth", "func")
    DEPTH_FIELD_NUMBER: _ClassVar[int]
    FUNC_FIELD_NUMBER: _ClassVar[int]
    depth: int
    func: int
    def __init__(self, depth: _Optional[int] = ..., func: _Optional[int] = ...) -> None: ...

class FuncgraphExitFtraceEvent(_message.Message):
    __slots__ = ("calltime", "depth", "func", "overrun", "rettime")
    CALLTIME_FIELD_NUMBER: _ClassVar[int]
    DEPTH_FIELD_NUMBER: _ClassVar[int]
    FUNC_FIELD_NUMBER: _ClassVar[int]
    OVERRUN_FIELD_NUMBER: _ClassVar[int]
    RETTIME_FIELD_NUMBER: _ClassVar[int]
    calltime: int
    depth: int
    func: int
    overrun: int
    rettime: int
    def __init__(
        self,
        calltime: _Optional[int] = ...,
        depth: _Optional[int] = ...,
        func: _Optional[int] = ...,
        overrun: _Optional[int] = ...,
        rettime: _Optional[int] = ...,
    ) -> None: ...

class G2dTracingMarkWriteFtraceEvent(_message.Message):
    __slots__ = ("pid", "name", "type", "value")
    PID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    pid: int
    name: str
    type: int
    value: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        name: _Optional[str] = ...,
        type: _Optional[int] = ...,
        value: _Optional[int] = ...,
    ) -> None: ...

class GenericFtraceEvent(_message.Message):
    __slots__ = ("event_name", "field")

    class Field(_message.Message):
        __slots__ = ("name", "str_value", "int_value", "uint_value")
        NAME_FIELD_NUMBER: _ClassVar[int]
        STR_VALUE_FIELD_NUMBER: _ClassVar[int]
        INT_VALUE_FIELD_NUMBER: _ClassVar[int]
        UINT_VALUE_FIELD_NUMBER: _ClassVar[int]
        name: str
        str_value: str
        int_value: int
        uint_value: int
        def __init__(
            self,
            name: _Optional[str] = ...,
            str_value: _Optional[str] = ...,
            int_value: _Optional[int] = ...,
            uint_value: _Optional[int] = ...,
        ) -> None: ...

    EVENT_NAME_FIELD_NUMBER: _ClassVar[int]
    FIELD_FIELD_NUMBER: _ClassVar[int]
    event_name: str
    field: _containers.RepeatedCompositeFieldContainer[GenericFtraceEvent.Field]
    def __init__(
        self,
        event_name: _Optional[str] = ...,
        field: _Optional[_Iterable[_Union[GenericFtraceEvent.Field, _Mapping]]] = ...,
    ) -> None: ...

class GpuMemTotalFtraceEvent(_message.Message):
    __slots__ = ("gpu_id", "pid", "size")
    GPU_ID_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    gpu_id: int
    pid: int
    size: int
    def __init__(self, gpu_id: _Optional[int] = ..., pid: _Optional[int] = ..., size: _Optional[int] = ...) -> None: ...

class DrmSchedJobFtraceEvent(_message.Message):
    __slots__ = ("entity", "fence", "hw_job_count", "id", "job_count", "name")
    ENTITY_FIELD_NUMBER: _ClassVar[int]
    FENCE_FIELD_NUMBER: _ClassVar[int]
    HW_JOB_COUNT_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    JOB_COUNT_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    entity: int
    fence: int
    hw_job_count: int
    id: int
    job_count: int
    name: str
    def __init__(
        self,
        entity: _Optional[int] = ...,
        fence: _Optional[int] = ...,
        hw_job_count: _Optional[int] = ...,
        id: _Optional[int] = ...,
        job_count: _Optional[int] = ...,
        name: _Optional[str] = ...,
    ) -> None: ...

class DrmRunJobFtraceEvent(_message.Message):
    __slots__ = ("entity", "fence", "hw_job_count", "id", "job_count", "name")
    ENTITY_FIELD_NUMBER: _ClassVar[int]
    FENCE_FIELD_NUMBER: _ClassVar[int]
    HW_JOB_COUNT_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    JOB_COUNT_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    entity: int
    fence: int
    hw_job_count: int
    id: int
    job_count: int
    name: str
    def __init__(
        self,
        entity: _Optional[int] = ...,
        fence: _Optional[int] = ...,
        hw_job_count: _Optional[int] = ...,
        id: _Optional[int] = ...,
        job_count: _Optional[int] = ...,
        name: _Optional[str] = ...,
    ) -> None: ...

class DrmSchedProcessJobFtraceEvent(_message.Message):
    __slots__ = ("fence",)
    FENCE_FIELD_NUMBER: _ClassVar[int]
    fence: int
    def __init__(self, fence: _Optional[int] = ...) -> None: ...

class HypEnterFtraceEvent(_message.Message):
    __slots__ = ()
    def __init__(self) -> None: ...

class HypExitFtraceEvent(_message.Message):
    __slots__ = ()
    def __init__(self) -> None: ...

class HostHcallFtraceEvent(_message.Message):
    __slots__ = ("id", "invalid")
    ID_FIELD_NUMBER: _ClassVar[int]
    INVALID_FIELD_NUMBER: _ClassVar[int]
    id: int
    invalid: int
    def __init__(self, id: _Optional[int] = ..., invalid: _Optional[int] = ...) -> None: ...

class HostSmcFtraceEvent(_message.Message):
    __slots__ = ("id", "forwarded")
    ID_FIELD_NUMBER: _ClassVar[int]
    FORWARDED_FIELD_NUMBER: _ClassVar[int]
    id: int
    forwarded: int
    def __init__(self, id: _Optional[int] = ..., forwarded: _Optional[int] = ...) -> None: ...

class HostMemAbortFtraceEvent(_message.Message):
    __slots__ = ("esr", "addr")
    ESR_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    esr: int
    addr: int
    def __init__(self, esr: _Optional[int] = ..., addr: _Optional[int] = ...) -> None: ...

class I2cReadFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "msg_nr", "addr", "flags", "len")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    MSG_NR_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    msg_nr: int
    addr: int
    flags: int
    len: int
    def __init__(
        self,
        adapter_nr: _Optional[int] = ...,
        msg_nr: _Optional[int] = ...,
        addr: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class I2cWriteFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "msg_nr", "addr", "flags", "len", "buf")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    MSG_NR_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    BUF_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    msg_nr: int
    addr: int
    flags: int
    len: int
    buf: int
    def __init__(
        self,
        adapter_nr: _Optional[int] = ...,
        msg_nr: _Optional[int] = ...,
        addr: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        len: _Optional[int] = ...,
        buf: _Optional[int] = ...,
    ) -> None: ...

class I2cResultFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "nr_msgs", "ret")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    NR_MSGS_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    nr_msgs: int
    ret: int
    def __init__(
        self, adapter_nr: _Optional[int] = ..., nr_msgs: _Optional[int] = ..., ret: _Optional[int] = ...
    ) -> None: ...

class I2cReplyFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "msg_nr", "addr", "flags", "len", "buf")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    MSG_NR_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    BUF_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    msg_nr: int
    addr: int
    flags: int
    len: int
    buf: int
    def __init__(
        self,
        adapter_nr: _Optional[int] = ...,
        msg_nr: _Optional[int] = ...,
        addr: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        len: _Optional[int] = ...,
        buf: _Optional[int] = ...,
    ) -> None: ...

class SmbusReadFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "flags", "addr", "command", "protocol")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    COMMAND_FIELD_NUMBER: _ClassVar[int]
    PROTOCOL_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    flags: int
    addr: int
    command: int
    protocol: int
    def __init__(
        self,
        adapter_nr: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        addr: _Optional[int] = ...,
        command: _Optional[int] = ...,
        protocol: _Optional[int] = ...,
    ) -> None: ...

class SmbusWriteFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "addr", "flags", "command", "len", "protocol")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    COMMAND_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    PROTOCOL_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    addr: int
    flags: int
    command: int
    len: int
    protocol: int
    def __init__(
        self,
        adapter_nr: _Optional[int] = ...,
        addr: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        command: _Optional[int] = ...,
        len: _Optional[int] = ...,
        protocol: _Optional[int] = ...,
    ) -> None: ...

class SmbusResultFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "addr", "flags", "read_write", "command", "res", "protocol")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    READ_WRITE_FIELD_NUMBER: _ClassVar[int]
    COMMAND_FIELD_NUMBER: _ClassVar[int]
    RES_FIELD_NUMBER: _ClassVar[int]
    PROTOCOL_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    addr: int
    flags: int
    read_write: int
    command: int
    res: int
    protocol: int
    def __init__(
        self,
        adapter_nr: _Optional[int] = ...,
        addr: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        read_write: _Optional[int] = ...,
        command: _Optional[int] = ...,
        res: _Optional[int] = ...,
        protocol: _Optional[int] = ...,
    ) -> None: ...

class SmbusReplyFtraceEvent(_message.Message):
    __slots__ = ("adapter_nr", "addr", "flags", "command", "len", "protocol")
    ADAPTER_NR_FIELD_NUMBER: _ClassVar[int]
    ADDR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    COMMAND_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    PROTOCOL_FIELD_NUMBER: _ClassVar[int]
    adapter_nr: int
    addr: int
    flags: int
    command: int
    len: int
    protocol: int
    def __init__(
        self,
        adapter_nr: _Optional[int] = ...,
        addr: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        command: _Optional[int] = ...,
        len: _Optional[int] = ...,
        protocol: _Optional[int] = ...,
    ) -> None: ...

class IonStatFtraceEvent(_message.Message):
    __slots__ = ("buffer_id", "len", "total_allocated")
    BUFFER_ID_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    TOTAL_ALLOCATED_FIELD_NUMBER: _ClassVar[int]
    buffer_id: int
    len: int
    total_allocated: int
    def __init__(
        self, buffer_id: _Optional[int] = ..., len: _Optional[int] = ..., total_allocated: _Optional[int] = ...
    ) -> None: ...

class IpiEntryFtraceEvent(_message.Message):
    __slots__ = ("reason",)
    REASON_FIELD_NUMBER: _ClassVar[int]
    reason: str
    def __init__(self, reason: _Optional[str] = ...) -> None: ...

class IpiExitFtraceEvent(_message.Message):
    __slots__ = ("reason",)
    REASON_FIELD_NUMBER: _ClassVar[int]
    reason: str
    def __init__(self, reason: _Optional[str] = ...) -> None: ...

class IpiRaiseFtraceEvent(_message.Message):
    __slots__ = ("target_cpus", "reason")
    TARGET_CPUS_FIELD_NUMBER: _ClassVar[int]
    REASON_FIELD_NUMBER: _ClassVar[int]
    target_cpus: int
    reason: str
    def __init__(self, target_cpus: _Optional[int] = ..., reason: _Optional[str] = ...) -> None: ...

class SoftirqEntryFtraceEvent(_message.Message):
    __slots__ = ("vec",)
    VEC_FIELD_NUMBER: _ClassVar[int]
    vec: int
    def __init__(self, vec: _Optional[int] = ...) -> None: ...

class SoftirqExitFtraceEvent(_message.Message):
    __slots__ = ("vec",)
    VEC_FIELD_NUMBER: _ClassVar[int]
    vec: int
    def __init__(self, vec: _Optional[int] = ...) -> None: ...

class SoftirqRaiseFtraceEvent(_message.Message):
    __slots__ = ("vec",)
    VEC_FIELD_NUMBER: _ClassVar[int]
    vec: int
    def __init__(self, vec: _Optional[int] = ...) -> None: ...

class IrqHandlerEntryFtraceEvent(_message.Message):
    __slots__ = ("irq", "name", "handler")
    IRQ_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    HANDLER_FIELD_NUMBER: _ClassVar[int]
    irq: int
    name: str
    handler: int
    def __init__(
        self, irq: _Optional[int] = ..., name: _Optional[str] = ..., handler: _Optional[int] = ...
    ) -> None: ...

class IrqHandlerExitFtraceEvent(_message.Message):
    __slots__ = ("irq", "ret")
    IRQ_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    irq: int
    ret: int
    def __init__(self, irq: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class AllocPagesIommuEndFtraceEvent(_message.Message):
    __slots__ = ("gfp_flags", "order")
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    gfp_flags: int
    order: int
    def __init__(self, gfp_flags: _Optional[int] = ..., order: _Optional[int] = ...) -> None: ...

class AllocPagesIommuFailFtraceEvent(_message.Message):
    __slots__ = ("gfp_flags", "order")
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    gfp_flags: int
    order: int
    def __init__(self, gfp_flags: _Optional[int] = ..., order: _Optional[int] = ...) -> None: ...

class AllocPagesIommuStartFtraceEvent(_message.Message):
    __slots__ = ("gfp_flags", "order")
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    gfp_flags: int
    order: int
    def __init__(self, gfp_flags: _Optional[int] = ..., order: _Optional[int] = ...) -> None: ...

class AllocPagesSysEndFtraceEvent(_message.Message):
    __slots__ = ("gfp_flags", "order")
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    gfp_flags: int
    order: int
    def __init__(self, gfp_flags: _Optional[int] = ..., order: _Optional[int] = ...) -> None: ...

class AllocPagesSysFailFtraceEvent(_message.Message):
    __slots__ = ("gfp_flags", "order")
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    gfp_flags: int
    order: int
    def __init__(self, gfp_flags: _Optional[int] = ..., order: _Optional[int] = ...) -> None: ...

class AllocPagesSysStartFtraceEvent(_message.Message):
    __slots__ = ("gfp_flags", "order")
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    gfp_flags: int
    order: int
    def __init__(self, gfp_flags: _Optional[int] = ..., order: _Optional[int] = ...) -> None: ...

class DmaAllocContiguousRetryFtraceEvent(_message.Message):
    __slots__ = ("tries",)
    TRIES_FIELD_NUMBER: _ClassVar[int]
    tries: int
    def __init__(self, tries: _Optional[int] = ...) -> None: ...

class IommuMapRangeFtraceEvent(_message.Message):
    __slots__ = ("chunk_size", "len", "pa", "va")
    CHUNK_SIZE_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    PA_FIELD_NUMBER: _ClassVar[int]
    VA_FIELD_NUMBER: _ClassVar[int]
    chunk_size: int
    len: int
    pa: int
    va: int
    def __init__(
        self,
        chunk_size: _Optional[int] = ...,
        len: _Optional[int] = ...,
        pa: _Optional[int] = ...,
        va: _Optional[int] = ...,
    ) -> None: ...

class IommuSecPtblMapRangeEndFtraceEvent(_message.Message):
    __slots__ = ("len", "num", "pa", "sec_id", "va")
    LEN_FIELD_NUMBER: _ClassVar[int]
    NUM_FIELD_NUMBER: _ClassVar[int]
    PA_FIELD_NUMBER: _ClassVar[int]
    SEC_ID_FIELD_NUMBER: _ClassVar[int]
    VA_FIELD_NUMBER: _ClassVar[int]
    len: int
    num: int
    pa: int
    sec_id: int
    va: int
    def __init__(
        self,
        len: _Optional[int] = ...,
        num: _Optional[int] = ...,
        pa: _Optional[int] = ...,
        sec_id: _Optional[int] = ...,
        va: _Optional[int] = ...,
    ) -> None: ...

class IommuSecPtblMapRangeStartFtraceEvent(_message.Message):
    __slots__ = ("len", "num", "pa", "sec_id", "va")
    LEN_FIELD_NUMBER: _ClassVar[int]
    NUM_FIELD_NUMBER: _ClassVar[int]
    PA_FIELD_NUMBER: _ClassVar[int]
    SEC_ID_FIELD_NUMBER: _ClassVar[int]
    VA_FIELD_NUMBER: _ClassVar[int]
    len: int
    num: int
    pa: int
    sec_id: int
    va: int
    def __init__(
        self,
        len: _Optional[int] = ...,
        num: _Optional[int] = ...,
        pa: _Optional[int] = ...,
        sec_id: _Optional[int] = ...,
        va: _Optional[int] = ...,
    ) -> None: ...

class IonAllocBufferEndFtraceEvent(_message.Message):
    __slots__ = ("client_name", "flags", "heap_name", "len", "mask")
    CLIENT_NAME_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MASK_FIELD_NUMBER: _ClassVar[int]
    client_name: str
    flags: int
    heap_name: str
    len: int
    mask: int
    def __init__(
        self,
        client_name: _Optional[str] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
        mask: _Optional[int] = ...,
    ) -> None: ...

class IonAllocBufferFailFtraceEvent(_message.Message):
    __slots__ = ("client_name", "error", "flags", "heap_name", "len", "mask")
    CLIENT_NAME_FIELD_NUMBER: _ClassVar[int]
    ERROR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MASK_FIELD_NUMBER: _ClassVar[int]
    client_name: str
    error: int
    flags: int
    heap_name: str
    len: int
    mask: int
    def __init__(
        self,
        client_name: _Optional[str] = ...,
        error: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
        mask: _Optional[int] = ...,
    ) -> None: ...

class IonAllocBufferFallbackFtraceEvent(_message.Message):
    __slots__ = ("client_name", "error", "flags", "heap_name", "len", "mask")
    CLIENT_NAME_FIELD_NUMBER: _ClassVar[int]
    ERROR_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MASK_FIELD_NUMBER: _ClassVar[int]
    client_name: str
    error: int
    flags: int
    heap_name: str
    len: int
    mask: int
    def __init__(
        self,
        client_name: _Optional[str] = ...,
        error: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
        mask: _Optional[int] = ...,
    ) -> None: ...

class IonAllocBufferStartFtraceEvent(_message.Message):
    __slots__ = ("client_name", "flags", "heap_name", "len", "mask")
    CLIENT_NAME_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MASK_FIELD_NUMBER: _ClassVar[int]
    client_name: str
    flags: int
    heap_name: str
    len: int
    mask: int
    def __init__(
        self,
        client_name: _Optional[str] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
        mask: _Optional[int] = ...,
    ) -> None: ...

class IonCpAllocRetryFtraceEvent(_message.Message):
    __slots__ = ("tries",)
    TRIES_FIELD_NUMBER: _ClassVar[int]
    tries: int
    def __init__(self, tries: _Optional[int] = ...) -> None: ...

class IonCpSecureBufferEndFtraceEvent(_message.Message):
    __slots__ = ("align", "flags", "heap_name", "len")
    ALIGN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    align: int
    flags: int
    heap_name: str
    len: int
    def __init__(
        self,
        align: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class IonCpSecureBufferStartFtraceEvent(_message.Message):
    __slots__ = ("align", "flags", "heap_name", "len")
    ALIGN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    align: int
    flags: int
    heap_name: str
    len: int
    def __init__(
        self,
        align: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class IonPrefetchingFtraceEvent(_message.Message):
    __slots__ = ("len",)
    LEN_FIELD_NUMBER: _ClassVar[int]
    len: int
    def __init__(self, len: _Optional[int] = ...) -> None: ...

class IonSecureCmaAddToPoolEndFtraceEvent(_message.Message):
    __slots__ = ("is_prefetch", "len", "pool_total")
    IS_PREFETCH_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    POOL_TOTAL_FIELD_NUMBER: _ClassVar[int]
    is_prefetch: int
    len: int
    pool_total: int
    def __init__(
        self, is_prefetch: _Optional[int] = ..., len: _Optional[int] = ..., pool_total: _Optional[int] = ...
    ) -> None: ...

class IonSecureCmaAddToPoolStartFtraceEvent(_message.Message):
    __slots__ = ("is_prefetch", "len", "pool_total")
    IS_PREFETCH_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    POOL_TOTAL_FIELD_NUMBER: _ClassVar[int]
    is_prefetch: int
    len: int
    pool_total: int
    def __init__(
        self, is_prefetch: _Optional[int] = ..., len: _Optional[int] = ..., pool_total: _Optional[int] = ...
    ) -> None: ...

class IonSecureCmaAllocateEndFtraceEvent(_message.Message):
    __slots__ = ("align", "flags", "heap_name", "len")
    ALIGN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    align: int
    flags: int
    heap_name: str
    len: int
    def __init__(
        self,
        align: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class IonSecureCmaAllocateStartFtraceEvent(_message.Message):
    __slots__ = ("align", "flags", "heap_name", "len")
    ALIGN_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    align: int
    flags: int
    heap_name: str
    len: int
    def __init__(
        self,
        align: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        heap_name: _Optional[str] = ...,
        len: _Optional[int] = ...,
    ) -> None: ...

class IonSecureCmaShrinkPoolEndFtraceEvent(_message.Message):
    __slots__ = ("drained_size", "skipped_size")
    DRAINED_SIZE_FIELD_NUMBER: _ClassVar[int]
    SKIPPED_SIZE_FIELD_NUMBER: _ClassVar[int]
    drained_size: int
    skipped_size: int
    def __init__(self, drained_size: _Optional[int] = ..., skipped_size: _Optional[int] = ...) -> None: ...

class IonSecureCmaShrinkPoolStartFtraceEvent(_message.Message):
    __slots__ = ("drained_size", "skipped_size")
    DRAINED_SIZE_FIELD_NUMBER: _ClassVar[int]
    SKIPPED_SIZE_FIELD_NUMBER: _ClassVar[int]
    drained_size: int
    skipped_size: int
    def __init__(self, drained_size: _Optional[int] = ..., skipped_size: _Optional[int] = ...) -> None: ...

class KfreeFtraceEvent(_message.Message):
    __slots__ = ("call_site", "ptr")
    CALL_SITE_FIELD_NUMBER: _ClassVar[int]
    PTR_FIELD_NUMBER: _ClassVar[int]
    call_site: int
    ptr: int
    def __init__(self, call_site: _Optional[int] = ..., ptr: _Optional[int] = ...) -> None: ...

class KmallocFtraceEvent(_message.Message):
    __slots__ = ("bytes_alloc", "bytes_req", "call_site", "gfp_flags", "ptr")
    BYTES_ALLOC_FIELD_NUMBER: _ClassVar[int]
    BYTES_REQ_FIELD_NUMBER: _ClassVar[int]
    CALL_SITE_FIELD_NUMBER: _ClassVar[int]
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    PTR_FIELD_NUMBER: _ClassVar[int]
    bytes_alloc: int
    bytes_req: int
    call_site: int
    gfp_flags: int
    ptr: int
    def __init__(
        self,
        bytes_alloc: _Optional[int] = ...,
        bytes_req: _Optional[int] = ...,
        call_site: _Optional[int] = ...,
        gfp_flags: _Optional[int] = ...,
        ptr: _Optional[int] = ...,
    ) -> None: ...

class KmallocNodeFtraceEvent(_message.Message):
    __slots__ = ("bytes_alloc", "bytes_req", "call_site", "gfp_flags", "node", "ptr")
    BYTES_ALLOC_FIELD_NUMBER: _ClassVar[int]
    BYTES_REQ_FIELD_NUMBER: _ClassVar[int]
    CALL_SITE_FIELD_NUMBER: _ClassVar[int]
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    NODE_FIELD_NUMBER: _ClassVar[int]
    PTR_FIELD_NUMBER: _ClassVar[int]
    bytes_alloc: int
    bytes_req: int
    call_site: int
    gfp_flags: int
    node: int
    ptr: int
    def __init__(
        self,
        bytes_alloc: _Optional[int] = ...,
        bytes_req: _Optional[int] = ...,
        call_site: _Optional[int] = ...,
        gfp_flags: _Optional[int] = ...,
        node: _Optional[int] = ...,
        ptr: _Optional[int] = ...,
    ) -> None: ...

class KmemCacheAllocFtraceEvent(_message.Message):
    __slots__ = ("bytes_alloc", "bytes_req", "call_site", "gfp_flags", "ptr")
    BYTES_ALLOC_FIELD_NUMBER: _ClassVar[int]
    BYTES_REQ_FIELD_NUMBER: _ClassVar[int]
    CALL_SITE_FIELD_NUMBER: _ClassVar[int]
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    PTR_FIELD_NUMBER: _ClassVar[int]
    bytes_alloc: int
    bytes_req: int
    call_site: int
    gfp_flags: int
    ptr: int
    def __init__(
        self,
        bytes_alloc: _Optional[int] = ...,
        bytes_req: _Optional[int] = ...,
        call_site: _Optional[int] = ...,
        gfp_flags: _Optional[int] = ...,
        ptr: _Optional[int] = ...,
    ) -> None: ...

class KmemCacheAllocNodeFtraceEvent(_message.Message):
    __slots__ = ("bytes_alloc", "bytes_req", "call_site", "gfp_flags", "node", "ptr")
    BYTES_ALLOC_FIELD_NUMBER: _ClassVar[int]
    BYTES_REQ_FIELD_NUMBER: _ClassVar[int]
    CALL_SITE_FIELD_NUMBER: _ClassVar[int]
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    NODE_FIELD_NUMBER: _ClassVar[int]
    PTR_FIELD_NUMBER: _ClassVar[int]
    bytes_alloc: int
    bytes_req: int
    call_site: int
    gfp_flags: int
    node: int
    ptr: int
    def __init__(
        self,
        bytes_alloc: _Optional[int] = ...,
        bytes_req: _Optional[int] = ...,
        call_site: _Optional[int] = ...,
        gfp_flags: _Optional[int] = ...,
        node: _Optional[int] = ...,
        ptr: _Optional[int] = ...,
    ) -> None: ...

class KmemCacheFreeFtraceEvent(_message.Message):
    __slots__ = ("call_site", "ptr")
    CALL_SITE_FIELD_NUMBER: _ClassVar[int]
    PTR_FIELD_NUMBER: _ClassVar[int]
    call_site: int
    ptr: int
    def __init__(self, call_site: _Optional[int] = ..., ptr: _Optional[int] = ...) -> None: ...

class MigratePagesEndFtraceEvent(_message.Message):
    __slots__ = ("mode",)
    MODE_FIELD_NUMBER: _ClassVar[int]
    mode: int
    def __init__(self, mode: _Optional[int] = ...) -> None: ...

class MigratePagesStartFtraceEvent(_message.Message):
    __slots__ = ("mode",)
    MODE_FIELD_NUMBER: _ClassVar[int]
    mode: int
    def __init__(self, mode: _Optional[int] = ...) -> None: ...

class MigrateRetryFtraceEvent(_message.Message):
    __slots__ = ("tries",)
    TRIES_FIELD_NUMBER: _ClassVar[int]
    tries: int
    def __init__(self, tries: _Optional[int] = ...) -> None: ...

class MmPageAllocFtraceEvent(_message.Message):
    __slots__ = ("gfp_flags", "migratetype", "order", "page", "pfn")
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    MIGRATETYPE_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    PFN_FIELD_NUMBER: _ClassVar[int]
    gfp_flags: int
    migratetype: int
    order: int
    page: int
    pfn: int
    def __init__(
        self,
        gfp_flags: _Optional[int] = ...,
        migratetype: _Optional[int] = ...,
        order: _Optional[int] = ...,
        page: _Optional[int] = ...,
        pfn: _Optional[int] = ...,
    ) -> None: ...

class MmPageAllocExtfragFtraceEvent(_message.Message):
    __slots__ = (
        "alloc_migratetype",
        "alloc_order",
        "fallback_migratetype",
        "fallback_order",
        "page",
        "change_ownership",
        "pfn",
    )
    ALLOC_MIGRATETYPE_FIELD_NUMBER: _ClassVar[int]
    ALLOC_ORDER_FIELD_NUMBER: _ClassVar[int]
    FALLBACK_MIGRATETYPE_FIELD_NUMBER: _ClassVar[int]
    FALLBACK_ORDER_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    CHANGE_OWNERSHIP_FIELD_NUMBER: _ClassVar[int]
    PFN_FIELD_NUMBER: _ClassVar[int]
    alloc_migratetype: int
    alloc_order: int
    fallback_migratetype: int
    fallback_order: int
    page: int
    change_ownership: int
    pfn: int
    def __init__(
        self,
        alloc_migratetype: _Optional[int] = ...,
        alloc_order: _Optional[int] = ...,
        fallback_migratetype: _Optional[int] = ...,
        fallback_order: _Optional[int] = ...,
        page: _Optional[int] = ...,
        change_ownership: _Optional[int] = ...,
        pfn: _Optional[int] = ...,
    ) -> None: ...

class MmPageAllocZoneLockedFtraceEvent(_message.Message):
    __slots__ = ("migratetype", "order", "page", "pfn")
    MIGRATETYPE_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    PFN_FIELD_NUMBER: _ClassVar[int]
    migratetype: int
    order: int
    page: int
    pfn: int
    def __init__(
        self,
        migratetype: _Optional[int] = ...,
        order: _Optional[int] = ...,
        page: _Optional[int] = ...,
        pfn: _Optional[int] = ...,
    ) -> None: ...

class MmPageFreeFtraceEvent(_message.Message):
    __slots__ = ("order", "page", "pfn")
    ORDER_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    PFN_FIELD_NUMBER: _ClassVar[int]
    order: int
    page: int
    pfn: int
    def __init__(self, order: _Optional[int] = ..., page: _Optional[int] = ..., pfn: _Optional[int] = ...) -> None: ...

class MmPageFreeBatchedFtraceEvent(_message.Message):
    __slots__ = ("cold", "page", "pfn")
    COLD_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    PFN_FIELD_NUMBER: _ClassVar[int]
    cold: int
    page: int
    pfn: int
    def __init__(self, cold: _Optional[int] = ..., page: _Optional[int] = ..., pfn: _Optional[int] = ...) -> None: ...

class MmPagePcpuDrainFtraceEvent(_message.Message):
    __slots__ = ("migratetype", "order", "page", "pfn")
    MIGRATETYPE_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    PAGE_FIELD_NUMBER: _ClassVar[int]
    PFN_FIELD_NUMBER: _ClassVar[int]
    migratetype: int
    order: int
    page: int
    pfn: int
    def __init__(
        self,
        migratetype: _Optional[int] = ...,
        order: _Optional[int] = ...,
        page: _Optional[int] = ...,
        pfn: _Optional[int] = ...,
    ) -> None: ...

class RssStatFtraceEvent(_message.Message):
    __slots__ = ("member", "size", "curr", "mm_id")
    MEMBER_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    CURR_FIELD_NUMBER: _ClassVar[int]
    MM_ID_FIELD_NUMBER: _ClassVar[int]
    member: int
    size: int
    curr: int
    mm_id: int
    def __init__(
        self,
        member: _Optional[int] = ...,
        size: _Optional[int] = ...,
        curr: _Optional[int] = ...,
        mm_id: _Optional[int] = ...,
    ) -> None: ...

class IonHeapShrinkFtraceEvent(_message.Message):
    __slots__ = ("heap_name", "len", "total_allocated")
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    TOTAL_ALLOCATED_FIELD_NUMBER: _ClassVar[int]
    heap_name: str
    len: int
    total_allocated: int
    def __init__(
        self, heap_name: _Optional[str] = ..., len: _Optional[int] = ..., total_allocated: _Optional[int] = ...
    ) -> None: ...

class IonHeapGrowFtraceEvent(_message.Message):
    __slots__ = ("heap_name", "len", "total_allocated")
    HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    TOTAL_ALLOCATED_FIELD_NUMBER: _ClassVar[int]
    heap_name: str
    len: int
    total_allocated: int
    def __init__(
        self, heap_name: _Optional[str] = ..., len: _Optional[int] = ..., total_allocated: _Optional[int] = ...
    ) -> None: ...

class IonBufferCreateFtraceEvent(_message.Message):
    __slots__ = ("addr", "len")
    ADDR_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    addr: int
    len: int
    def __init__(self, addr: _Optional[int] = ..., len: _Optional[int] = ...) -> None: ...

class IonBufferDestroyFtraceEvent(_message.Message):
    __slots__ = ("addr", "len")
    ADDR_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    addr: int
    len: int
    def __init__(self, addr: _Optional[int] = ..., len: _Optional[int] = ...) -> None: ...

class KvmAccessFaultFtraceEvent(_message.Message):
    __slots__ = ("ipa",)
    IPA_FIELD_NUMBER: _ClassVar[int]
    ipa: int
    def __init__(self, ipa: _Optional[int] = ...) -> None: ...

class KvmAckIrqFtraceEvent(_message.Message):
    __slots__ = ("irqchip", "pin")
    IRQCHIP_FIELD_NUMBER: _ClassVar[int]
    PIN_FIELD_NUMBER: _ClassVar[int]
    irqchip: int
    pin: int
    def __init__(self, irqchip: _Optional[int] = ..., pin: _Optional[int] = ...) -> None: ...

class KvmAgeHvaFtraceEvent(_message.Message):
    __slots__ = ("end", "start")
    END_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    end: int
    start: int
    def __init__(self, end: _Optional[int] = ..., start: _Optional[int] = ...) -> None: ...

class KvmAgePageFtraceEvent(_message.Message):
    __slots__ = ("gfn", "hva", "level", "referenced")
    GFN_FIELD_NUMBER: _ClassVar[int]
    HVA_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    REFERENCED_FIELD_NUMBER: _ClassVar[int]
    gfn: int
    hva: int
    level: int
    referenced: int
    def __init__(
        self,
        gfn: _Optional[int] = ...,
        hva: _Optional[int] = ...,
        level: _Optional[int] = ...,
        referenced: _Optional[int] = ...,
    ) -> None: ...

class KvmArmClearDebugFtraceEvent(_message.Message):
    __slots__ = ("guest_debug",)
    GUEST_DEBUG_FIELD_NUMBER: _ClassVar[int]
    guest_debug: int
    def __init__(self, guest_debug: _Optional[int] = ...) -> None: ...

class KvmArmSetDreg32FtraceEvent(_message.Message):
    __slots__ = ("name", "value")
    NAME_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    name: str
    value: int
    def __init__(self, name: _Optional[str] = ..., value: _Optional[int] = ...) -> None: ...

class KvmArmSetRegsetFtraceEvent(_message.Message):
    __slots__ = ("len", "name")
    LEN_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    len: int
    name: str
    def __init__(self, len: _Optional[int] = ..., name: _Optional[str] = ...) -> None: ...

class KvmArmSetupDebugFtraceEvent(_message.Message):
    __slots__ = ("guest_debug", "vcpu")
    GUEST_DEBUG_FIELD_NUMBER: _ClassVar[int]
    VCPU_FIELD_NUMBER: _ClassVar[int]
    guest_debug: int
    vcpu: int
    def __init__(self, guest_debug: _Optional[int] = ..., vcpu: _Optional[int] = ...) -> None: ...

class KvmEntryFtraceEvent(_message.Message):
    __slots__ = ("vcpu_pc",)
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    vcpu_pc: int
    def __init__(self, vcpu_pc: _Optional[int] = ...) -> None: ...

class KvmExitFtraceEvent(_message.Message):
    __slots__ = ("esr_ec", "ret", "vcpu_pc")
    ESR_EC_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    esr_ec: int
    ret: int
    vcpu_pc: int
    def __init__(
        self, esr_ec: _Optional[int] = ..., ret: _Optional[int] = ..., vcpu_pc: _Optional[int] = ...
    ) -> None: ...

class KvmFpuFtraceEvent(_message.Message):
    __slots__ = ("load",)
    LOAD_FIELD_NUMBER: _ClassVar[int]
    load: int
    def __init__(self, load: _Optional[int] = ...) -> None: ...

class KvmGetTimerMapFtraceEvent(_message.Message):
    __slots__ = ("direct_ptimer", "direct_vtimer", "emul_ptimer", "vcpu_id")
    DIRECT_PTIMER_FIELD_NUMBER: _ClassVar[int]
    DIRECT_VTIMER_FIELD_NUMBER: _ClassVar[int]
    EMUL_PTIMER_FIELD_NUMBER: _ClassVar[int]
    VCPU_ID_FIELD_NUMBER: _ClassVar[int]
    direct_ptimer: int
    direct_vtimer: int
    emul_ptimer: int
    vcpu_id: int
    def __init__(
        self,
        direct_ptimer: _Optional[int] = ...,
        direct_vtimer: _Optional[int] = ...,
        emul_ptimer: _Optional[int] = ...,
        vcpu_id: _Optional[int] = ...,
    ) -> None: ...

class KvmGuestFaultFtraceEvent(_message.Message):
    __slots__ = ("hsr", "hxfar", "ipa", "vcpu_pc")
    HSR_FIELD_NUMBER: _ClassVar[int]
    HXFAR_FIELD_NUMBER: _ClassVar[int]
    IPA_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    hsr: int
    hxfar: int
    ipa: int
    vcpu_pc: int
    def __init__(
        self,
        hsr: _Optional[int] = ...,
        hxfar: _Optional[int] = ...,
        ipa: _Optional[int] = ...,
        vcpu_pc: _Optional[int] = ...,
    ) -> None: ...

class KvmHandleSysRegFtraceEvent(_message.Message):
    __slots__ = ("hsr",)
    HSR_FIELD_NUMBER: _ClassVar[int]
    hsr: int
    def __init__(self, hsr: _Optional[int] = ...) -> None: ...

class KvmHvcArm64FtraceEvent(_message.Message):
    __slots__ = ("imm", "r0", "vcpu_pc")
    IMM_FIELD_NUMBER: _ClassVar[int]
    R0_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    imm: int
    r0: int
    vcpu_pc: int
    def __init__(self, imm: _Optional[int] = ..., r0: _Optional[int] = ..., vcpu_pc: _Optional[int] = ...) -> None: ...

class KvmIrqLineFtraceEvent(_message.Message):
    __slots__ = ("irq_num", "level", "type", "vcpu_idx")
    IRQ_NUM_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    VCPU_IDX_FIELD_NUMBER: _ClassVar[int]
    irq_num: int
    level: int
    type: int
    vcpu_idx: int
    def __init__(
        self,
        irq_num: _Optional[int] = ...,
        level: _Optional[int] = ...,
        type: _Optional[int] = ...,
        vcpu_idx: _Optional[int] = ...,
    ) -> None: ...

class KvmMmioFtraceEvent(_message.Message):
    __slots__ = ("gpa", "len", "type", "val")
    GPA_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    VAL_FIELD_NUMBER: _ClassVar[int]
    gpa: int
    len: int
    type: int
    val: int
    def __init__(
        self,
        gpa: _Optional[int] = ...,
        len: _Optional[int] = ...,
        type: _Optional[int] = ...,
        val: _Optional[int] = ...,
    ) -> None: ...

class KvmMmioEmulateFtraceEvent(_message.Message):
    __slots__ = ("cpsr", "instr", "vcpu_pc")
    CPSR_FIELD_NUMBER: _ClassVar[int]
    INSTR_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    cpsr: int
    instr: int
    vcpu_pc: int
    def __init__(
        self, cpsr: _Optional[int] = ..., instr: _Optional[int] = ..., vcpu_pc: _Optional[int] = ...
    ) -> None: ...

class KvmSetGuestDebugFtraceEvent(_message.Message):
    __slots__ = ("guest_debug", "vcpu")
    GUEST_DEBUG_FIELD_NUMBER: _ClassVar[int]
    VCPU_FIELD_NUMBER: _ClassVar[int]
    guest_debug: int
    vcpu: int
    def __init__(self, guest_debug: _Optional[int] = ..., vcpu: _Optional[int] = ...) -> None: ...

class KvmSetIrqFtraceEvent(_message.Message):
    __slots__ = ("gsi", "irq_source_id", "level")
    GSI_FIELD_NUMBER: _ClassVar[int]
    IRQ_SOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    gsi: int
    irq_source_id: int
    level: int
    def __init__(
        self, gsi: _Optional[int] = ..., irq_source_id: _Optional[int] = ..., level: _Optional[int] = ...
    ) -> None: ...

class KvmSetSpteHvaFtraceEvent(_message.Message):
    __slots__ = ("hva",)
    HVA_FIELD_NUMBER: _ClassVar[int]
    hva: int
    def __init__(self, hva: _Optional[int] = ...) -> None: ...

class KvmSetWayFlushFtraceEvent(_message.Message):
    __slots__ = ("cache", "vcpu_pc")
    CACHE_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    cache: int
    vcpu_pc: int
    def __init__(self, cache: _Optional[int] = ..., vcpu_pc: _Optional[int] = ...) -> None: ...

class KvmSysAccessFtraceEvent(_message.Message):
    __slots__ = ("CRm", "CRn", "Op0", "Op1", "Op2", "is_write", "name", "vcpu_pc")
    CRM_FIELD_NUMBER: _ClassVar[int]
    CRN_FIELD_NUMBER: _ClassVar[int]
    OP0_FIELD_NUMBER: _ClassVar[int]
    OP1_FIELD_NUMBER: _ClassVar[int]
    OP2_FIELD_NUMBER: _ClassVar[int]
    IS_WRITE_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    CRm: int
    CRn: int
    Op0: int
    Op1: int
    Op2: int
    is_write: int
    name: str
    vcpu_pc: int
    def __init__(
        self,
        CRm: _Optional[int] = ...,
        CRn: _Optional[int] = ...,
        Op0: _Optional[int] = ...,
        Op1: _Optional[int] = ...,
        Op2: _Optional[int] = ...,
        is_write: _Optional[int] = ...,
        name: _Optional[str] = ...,
        vcpu_pc: _Optional[int] = ...,
    ) -> None: ...

class KvmTestAgeHvaFtraceEvent(_message.Message):
    __slots__ = ("hva",)
    HVA_FIELD_NUMBER: _ClassVar[int]
    hva: int
    def __init__(self, hva: _Optional[int] = ...) -> None: ...

class KvmTimerEmulateFtraceEvent(_message.Message):
    __slots__ = ("should_fire", "timer_idx")
    SHOULD_FIRE_FIELD_NUMBER: _ClassVar[int]
    TIMER_IDX_FIELD_NUMBER: _ClassVar[int]
    should_fire: int
    timer_idx: int
    def __init__(self, should_fire: _Optional[int] = ..., timer_idx: _Optional[int] = ...) -> None: ...

class KvmTimerHrtimerExpireFtraceEvent(_message.Message):
    __slots__ = ("timer_idx",)
    TIMER_IDX_FIELD_NUMBER: _ClassVar[int]
    timer_idx: int
    def __init__(self, timer_idx: _Optional[int] = ...) -> None: ...

class KvmTimerRestoreStateFtraceEvent(_message.Message):
    __slots__ = ("ctl", "cval", "timer_idx")
    CTL_FIELD_NUMBER: _ClassVar[int]
    CVAL_FIELD_NUMBER: _ClassVar[int]
    TIMER_IDX_FIELD_NUMBER: _ClassVar[int]
    ctl: int
    cval: int
    timer_idx: int
    def __init__(
        self, ctl: _Optional[int] = ..., cval: _Optional[int] = ..., timer_idx: _Optional[int] = ...
    ) -> None: ...

class KvmTimerSaveStateFtraceEvent(_message.Message):
    __slots__ = ("ctl", "cval", "timer_idx")
    CTL_FIELD_NUMBER: _ClassVar[int]
    CVAL_FIELD_NUMBER: _ClassVar[int]
    TIMER_IDX_FIELD_NUMBER: _ClassVar[int]
    ctl: int
    cval: int
    timer_idx: int
    def __init__(
        self, ctl: _Optional[int] = ..., cval: _Optional[int] = ..., timer_idx: _Optional[int] = ...
    ) -> None: ...

class KvmTimerUpdateIrqFtraceEvent(_message.Message):
    __slots__ = ("irq", "level", "vcpu_id")
    IRQ_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    VCPU_ID_FIELD_NUMBER: _ClassVar[int]
    irq: int
    level: int
    vcpu_id: int
    def __init__(
        self, irq: _Optional[int] = ..., level: _Optional[int] = ..., vcpu_id: _Optional[int] = ...
    ) -> None: ...

class KvmToggleCacheFtraceEvent(_message.Message):
    __slots__ = ("now", "vcpu_pc", "was")
    NOW_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    WAS_FIELD_NUMBER: _ClassVar[int]
    now: int
    vcpu_pc: int
    was: int
    def __init__(self, now: _Optional[int] = ..., vcpu_pc: _Optional[int] = ..., was: _Optional[int] = ...) -> None: ...

class KvmUnmapHvaRangeFtraceEvent(_message.Message):
    __slots__ = ("end", "start")
    END_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    end: int
    start: int
    def __init__(self, end: _Optional[int] = ..., start: _Optional[int] = ...) -> None: ...

class KvmUserspaceExitFtraceEvent(_message.Message):
    __slots__ = ("reason",)
    REASON_FIELD_NUMBER: _ClassVar[int]
    reason: int
    def __init__(self, reason: _Optional[int] = ...) -> None: ...

class KvmVcpuWakeupFtraceEvent(_message.Message):
    __slots__ = ("ns", "valid", "waited")
    NS_FIELD_NUMBER: _ClassVar[int]
    VALID_FIELD_NUMBER: _ClassVar[int]
    WAITED_FIELD_NUMBER: _ClassVar[int]
    ns: int
    valid: int
    waited: int
    def __init__(self, ns: _Optional[int] = ..., valid: _Optional[int] = ..., waited: _Optional[int] = ...) -> None: ...

class KvmWfxArm64FtraceEvent(_message.Message):
    __slots__ = ("is_wfe", "vcpu_pc")
    IS_WFE_FIELD_NUMBER: _ClassVar[int]
    VCPU_PC_FIELD_NUMBER: _ClassVar[int]
    is_wfe: int
    vcpu_pc: int
    def __init__(self, is_wfe: _Optional[int] = ..., vcpu_pc: _Optional[int] = ...) -> None: ...

class TrapRegFtraceEvent(_message.Message):
    __slots__ = ("fn", "is_write", "reg", "write_value")
    FN_FIELD_NUMBER: _ClassVar[int]
    IS_WRITE_FIELD_NUMBER: _ClassVar[int]
    REG_FIELD_NUMBER: _ClassVar[int]
    WRITE_VALUE_FIELD_NUMBER: _ClassVar[int]
    fn: str
    is_write: int
    reg: int
    write_value: int
    def __init__(
        self,
        fn: _Optional[str] = ...,
        is_write: _Optional[int] = ...,
        reg: _Optional[int] = ...,
        write_value: _Optional[int] = ...,
    ) -> None: ...

class VgicUpdateIrqPendingFtraceEvent(_message.Message):
    __slots__ = ("irq", "level", "vcpu_id")
    IRQ_FIELD_NUMBER: _ClassVar[int]
    LEVEL_FIELD_NUMBER: _ClassVar[int]
    VCPU_ID_FIELD_NUMBER: _ClassVar[int]
    irq: int
    level: int
    vcpu_id: int
    def __init__(
        self, irq: _Optional[int] = ..., level: _Optional[int] = ..., vcpu_id: _Optional[int] = ...
    ) -> None: ...

class LowmemoryKillFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid", "pagecache_size", "pagecache_limit", "free")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    PAGECACHE_SIZE_FIELD_NUMBER: _ClassVar[int]
    PAGECACHE_LIMIT_FIELD_NUMBER: _ClassVar[int]
    FREE_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    pagecache_size: int
    pagecache_limit: int
    free: int
    def __init__(
        self,
        comm: _Optional[str] = ...,
        pid: _Optional[int] = ...,
        pagecache_size: _Optional[int] = ...,
        pagecache_limit: _Optional[int] = ...,
        free: _Optional[int] = ...,
    ) -> None: ...

class LwisTracingMarkWriteFtraceEvent(_message.Message):
    __slots__ = ("lwis_name", "type", "pid", "func_name", "value")
    LWIS_NAME_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    FUNC_NAME_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    lwis_name: str
    type: int
    pid: int
    func_name: str
    value: int
    def __init__(
        self,
        lwis_name: _Optional[str] = ...,
        type: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        func_name: _Optional[str] = ...,
        value: _Optional[int] = ...,
    ) -> None: ...

class MaliTracingMarkWriteFtraceEvent(_message.Message):
    __slots__ = ("name", "pid", "type", "value")
    NAME_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    name: str
    pid: int
    type: int
    value: int
    def __init__(
        self,
        name: _Optional[str] = ...,
        pid: _Optional[int] = ...,
        type: _Optional[int] = ...,
        value: _Optional[int] = ...,
    ) -> None: ...

class MaliMaliKCPUCQSSETFtraceEvent(_message.Message):
    __slots__ = ("id", "info_val1", "info_val2", "kctx_id", "kctx_tgid")
    ID_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL1_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL2_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    id: int
    info_val1: int
    info_val2: int
    kctx_id: int
    kctx_tgid: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        info_val1: _Optional[int] = ...,
        info_val2: _Optional[int] = ...,
        kctx_id: _Optional[int] = ...,
        kctx_tgid: _Optional[int] = ...,
    ) -> None: ...

class MaliMaliKCPUCQSWAITSTARTFtraceEvent(_message.Message):
    __slots__ = ("id", "info_val1", "info_val2", "kctx_id", "kctx_tgid")
    ID_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL1_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL2_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    id: int
    info_val1: int
    info_val2: int
    kctx_id: int
    kctx_tgid: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        info_val1: _Optional[int] = ...,
        info_val2: _Optional[int] = ...,
        kctx_id: _Optional[int] = ...,
        kctx_tgid: _Optional[int] = ...,
    ) -> None: ...

class MaliMaliKCPUCQSWAITENDFtraceEvent(_message.Message):
    __slots__ = ("id", "info_val1", "info_val2", "kctx_id", "kctx_tgid")
    ID_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL1_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL2_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    id: int
    info_val1: int
    info_val2: int
    kctx_id: int
    kctx_tgid: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        info_val1: _Optional[int] = ...,
        info_val2: _Optional[int] = ...,
        kctx_id: _Optional[int] = ...,
        kctx_tgid: _Optional[int] = ...,
    ) -> None: ...

class MaliMaliKCPUFENCESIGNALFtraceEvent(_message.Message):
    __slots__ = ("info_val1", "info_val2", "kctx_tgid", "kctx_id", "id")
    INFO_VAL1_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL2_FIELD_NUMBER: _ClassVar[int]
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    info_val1: int
    info_val2: int
    kctx_tgid: int
    kctx_id: int
    id: int
    def __init__(
        self,
        info_val1: _Optional[int] = ...,
        info_val2: _Optional[int] = ...,
        kctx_tgid: _Optional[int] = ...,
        kctx_id: _Optional[int] = ...,
        id: _Optional[int] = ...,
    ) -> None: ...

class MaliMaliKCPUFENCEWAITSTARTFtraceEvent(_message.Message):
    __slots__ = ("info_val1", "info_val2", "kctx_tgid", "kctx_id", "id")
    INFO_VAL1_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL2_FIELD_NUMBER: _ClassVar[int]
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    info_val1: int
    info_val2: int
    kctx_tgid: int
    kctx_id: int
    id: int
    def __init__(
        self,
        info_val1: _Optional[int] = ...,
        info_val2: _Optional[int] = ...,
        kctx_tgid: _Optional[int] = ...,
        kctx_id: _Optional[int] = ...,
        id: _Optional[int] = ...,
    ) -> None: ...

class MaliMaliKCPUFENCEWAITENDFtraceEvent(_message.Message):
    __slots__ = ("info_val1", "info_val2", "kctx_tgid", "kctx_id", "id")
    INFO_VAL1_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL2_FIELD_NUMBER: _ClassVar[int]
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    ID_FIELD_NUMBER: _ClassVar[int]
    info_val1: int
    info_val2: int
    kctx_tgid: int
    kctx_id: int
    id: int
    def __init__(
        self,
        info_val1: _Optional[int] = ...,
        info_val2: _Optional[int] = ...,
        kctx_tgid: _Optional[int] = ...,
        kctx_id: _Optional[int] = ...,
        id: _Optional[int] = ...,
    ) -> None: ...

class MaliMaliCSFINTERRUPTSTARTFtraceEvent(_message.Message):
    __slots__ = ("kctx_tgid", "kctx_id", "info_val")
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL_FIELD_NUMBER: _ClassVar[int]
    kctx_tgid: int
    kctx_id: int
    info_val: int
    def __init__(
        self, kctx_tgid: _Optional[int] = ..., kctx_id: _Optional[int] = ..., info_val: _Optional[int] = ...
    ) -> None: ...

class MaliMaliCSFINTERRUPTENDFtraceEvent(_message.Message):
    __slots__ = ("kctx_tgid", "kctx_id", "info_val")
    KCTX_TGID_FIELD_NUMBER: _ClassVar[int]
    KCTX_ID_FIELD_NUMBER: _ClassVar[int]
    INFO_VAL_FIELD_NUMBER: _ClassVar[int]
    kctx_tgid: int
    kctx_id: int
    info_val: int
    def __init__(
        self, kctx_tgid: _Optional[int] = ..., kctx_id: _Optional[int] = ..., info_val: _Optional[int] = ...
    ) -> None: ...

class MdpCmdKickoffFtraceEvent(_message.Message):
    __slots__ = ("ctl_num", "kickoff_cnt")
    CTL_NUM_FIELD_NUMBER: _ClassVar[int]
    KICKOFF_CNT_FIELD_NUMBER: _ClassVar[int]
    ctl_num: int
    kickoff_cnt: int
    def __init__(self, ctl_num: _Optional[int] = ..., kickoff_cnt: _Optional[int] = ...) -> None: ...

class MdpCommitFtraceEvent(_message.Message):
    __slots__ = ("num", "play_cnt", "clk_rate", "bandwidth")
    NUM_FIELD_NUMBER: _ClassVar[int]
    PLAY_CNT_FIELD_NUMBER: _ClassVar[int]
    CLK_RATE_FIELD_NUMBER: _ClassVar[int]
    BANDWIDTH_FIELD_NUMBER: _ClassVar[int]
    num: int
    play_cnt: int
    clk_rate: int
    bandwidth: int
    def __init__(
        self,
        num: _Optional[int] = ...,
        play_cnt: _Optional[int] = ...,
        clk_rate: _Optional[int] = ...,
        bandwidth: _Optional[int] = ...,
    ) -> None: ...

class MdpPerfSetOtFtraceEvent(_message.Message):
    __slots__ = ("pnum", "xin_id", "rd_lim", "is_vbif_rt")
    PNUM_FIELD_NUMBER: _ClassVar[int]
    XIN_ID_FIELD_NUMBER: _ClassVar[int]
    RD_LIM_FIELD_NUMBER: _ClassVar[int]
    IS_VBIF_RT_FIELD_NUMBER: _ClassVar[int]
    pnum: int
    xin_id: int
    rd_lim: int
    is_vbif_rt: int
    def __init__(
        self,
        pnum: _Optional[int] = ...,
        xin_id: _Optional[int] = ...,
        rd_lim: _Optional[int] = ...,
        is_vbif_rt: _Optional[int] = ...,
    ) -> None: ...

class MdpSsppChangeFtraceEvent(_message.Message):
    __slots__ = (
        "num",
        "play_cnt",
        "mixer",
        "stage",
        "flags",
        "format",
        "img_w",
        "img_h",
        "src_x",
        "src_y",
        "src_w",
        "src_h",
        "dst_x",
        "dst_y",
        "dst_w",
        "dst_h",
    )
    NUM_FIELD_NUMBER: _ClassVar[int]
    PLAY_CNT_FIELD_NUMBER: _ClassVar[int]
    MIXER_FIELD_NUMBER: _ClassVar[int]
    STAGE_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    FORMAT_FIELD_NUMBER: _ClassVar[int]
    IMG_W_FIELD_NUMBER: _ClassVar[int]
    IMG_H_FIELD_NUMBER: _ClassVar[int]
    SRC_X_FIELD_NUMBER: _ClassVar[int]
    SRC_Y_FIELD_NUMBER: _ClassVar[int]
    SRC_W_FIELD_NUMBER: _ClassVar[int]
    SRC_H_FIELD_NUMBER: _ClassVar[int]
    DST_X_FIELD_NUMBER: _ClassVar[int]
    DST_Y_FIELD_NUMBER: _ClassVar[int]
    DST_W_FIELD_NUMBER: _ClassVar[int]
    DST_H_FIELD_NUMBER: _ClassVar[int]
    num: int
    play_cnt: int
    mixer: int
    stage: int
    flags: int
    format: int
    img_w: int
    img_h: int
    src_x: int
    src_y: int
    src_w: int
    src_h: int
    dst_x: int
    dst_y: int
    dst_w: int
    dst_h: int
    def __init__(
        self,
        num: _Optional[int] = ...,
        play_cnt: _Optional[int] = ...,
        mixer: _Optional[int] = ...,
        stage: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        format: _Optional[int] = ...,
        img_w: _Optional[int] = ...,
        img_h: _Optional[int] = ...,
        src_x: _Optional[int] = ...,
        src_y: _Optional[int] = ...,
        src_w: _Optional[int] = ...,
        src_h: _Optional[int] = ...,
        dst_x: _Optional[int] = ...,
        dst_y: _Optional[int] = ...,
        dst_w: _Optional[int] = ...,
        dst_h: _Optional[int] = ...,
    ) -> None: ...

class TracingMarkWriteFtraceEvent(_message.Message):
    __slots__ = ("pid", "trace_name", "trace_begin")
    PID_FIELD_NUMBER: _ClassVar[int]
    TRACE_NAME_FIELD_NUMBER: _ClassVar[int]
    TRACE_BEGIN_FIELD_NUMBER: _ClassVar[int]
    pid: int
    trace_name: str
    trace_begin: int
    def __init__(
        self, pid: _Optional[int] = ..., trace_name: _Optional[str] = ..., trace_begin: _Optional[int] = ...
    ) -> None: ...

class MdpCmdPingpongDoneFtraceEvent(_message.Message):
    __slots__ = ("ctl_num", "intf_num", "pp_num", "koff_cnt")
    CTL_NUM_FIELD_NUMBER: _ClassVar[int]
    INTF_NUM_FIELD_NUMBER: _ClassVar[int]
    PP_NUM_FIELD_NUMBER: _ClassVar[int]
    KOFF_CNT_FIELD_NUMBER: _ClassVar[int]
    ctl_num: int
    intf_num: int
    pp_num: int
    koff_cnt: int
    def __init__(
        self,
        ctl_num: _Optional[int] = ...,
        intf_num: _Optional[int] = ...,
        pp_num: _Optional[int] = ...,
        koff_cnt: _Optional[int] = ...,
    ) -> None: ...

class MdpCompareBwFtraceEvent(_message.Message):
    __slots__ = ("new_ab", "new_ib", "new_wb", "old_ab", "old_ib", "old_wb", "params_changed", "update_bw")
    NEW_AB_FIELD_NUMBER: _ClassVar[int]
    NEW_IB_FIELD_NUMBER: _ClassVar[int]
    NEW_WB_FIELD_NUMBER: _ClassVar[int]
    OLD_AB_FIELD_NUMBER: _ClassVar[int]
    OLD_IB_FIELD_NUMBER: _ClassVar[int]
    OLD_WB_FIELD_NUMBER: _ClassVar[int]
    PARAMS_CHANGED_FIELD_NUMBER: _ClassVar[int]
    UPDATE_BW_FIELD_NUMBER: _ClassVar[int]
    new_ab: int
    new_ib: int
    new_wb: int
    old_ab: int
    old_ib: int
    old_wb: int
    params_changed: int
    update_bw: int
    def __init__(
        self,
        new_ab: _Optional[int] = ...,
        new_ib: _Optional[int] = ...,
        new_wb: _Optional[int] = ...,
        old_ab: _Optional[int] = ...,
        old_ib: _Optional[int] = ...,
        old_wb: _Optional[int] = ...,
        params_changed: _Optional[int] = ...,
        update_bw: _Optional[int] = ...,
    ) -> None: ...

class MdpPerfSetPanicLutsFtraceEvent(_message.Message):
    __slots__ = ("pnum", "fmt", "mode", "panic_lut", "robust_lut")
    PNUM_FIELD_NUMBER: _ClassVar[int]
    FMT_FIELD_NUMBER: _ClassVar[int]
    MODE_FIELD_NUMBER: _ClassVar[int]
    PANIC_LUT_FIELD_NUMBER: _ClassVar[int]
    ROBUST_LUT_FIELD_NUMBER: _ClassVar[int]
    pnum: int
    fmt: int
    mode: int
    panic_lut: int
    robust_lut: int
    def __init__(
        self,
        pnum: _Optional[int] = ...,
        fmt: _Optional[int] = ...,
        mode: _Optional[int] = ...,
        panic_lut: _Optional[int] = ...,
        robust_lut: _Optional[int] = ...,
    ) -> None: ...

class MdpSsppSetFtraceEvent(_message.Message):
    __slots__ = (
        "num",
        "play_cnt",
        "mixer",
        "stage",
        "flags",
        "format",
        "img_w",
        "img_h",
        "src_x",
        "src_y",
        "src_w",
        "src_h",
        "dst_x",
        "dst_y",
        "dst_w",
        "dst_h",
    )
    NUM_FIELD_NUMBER: _ClassVar[int]
    PLAY_CNT_FIELD_NUMBER: _ClassVar[int]
    MIXER_FIELD_NUMBER: _ClassVar[int]
    STAGE_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    FORMAT_FIELD_NUMBER: _ClassVar[int]
    IMG_W_FIELD_NUMBER: _ClassVar[int]
    IMG_H_FIELD_NUMBER: _ClassVar[int]
    SRC_X_FIELD_NUMBER: _ClassVar[int]
    SRC_Y_FIELD_NUMBER: _ClassVar[int]
    SRC_W_FIELD_NUMBER: _ClassVar[int]
    SRC_H_FIELD_NUMBER: _ClassVar[int]
    DST_X_FIELD_NUMBER: _ClassVar[int]
    DST_Y_FIELD_NUMBER: _ClassVar[int]
    DST_W_FIELD_NUMBER: _ClassVar[int]
    DST_H_FIELD_NUMBER: _ClassVar[int]
    num: int
    play_cnt: int
    mixer: int
    stage: int
    flags: int
    format: int
    img_w: int
    img_h: int
    src_x: int
    src_y: int
    src_w: int
    src_h: int
    dst_x: int
    dst_y: int
    dst_w: int
    dst_h: int
    def __init__(
        self,
        num: _Optional[int] = ...,
        play_cnt: _Optional[int] = ...,
        mixer: _Optional[int] = ...,
        stage: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        format: _Optional[int] = ...,
        img_w: _Optional[int] = ...,
        img_h: _Optional[int] = ...,
        src_x: _Optional[int] = ...,
        src_y: _Optional[int] = ...,
        src_w: _Optional[int] = ...,
        src_h: _Optional[int] = ...,
        dst_x: _Optional[int] = ...,
        dst_y: _Optional[int] = ...,
        dst_w: _Optional[int] = ...,
        dst_h: _Optional[int] = ...,
    ) -> None: ...

class MdpCmdReadptrDoneFtraceEvent(_message.Message):
    __slots__ = ("ctl_num", "koff_cnt")
    CTL_NUM_FIELD_NUMBER: _ClassVar[int]
    KOFF_CNT_FIELD_NUMBER: _ClassVar[int]
    ctl_num: int
    koff_cnt: int
    def __init__(self, ctl_num: _Optional[int] = ..., koff_cnt: _Optional[int] = ...) -> None: ...

class MdpMisrCrcFtraceEvent(_message.Message):
    __slots__ = ("block_id", "vsync_cnt", "crc")
    BLOCK_ID_FIELD_NUMBER: _ClassVar[int]
    VSYNC_CNT_FIELD_NUMBER: _ClassVar[int]
    CRC_FIELD_NUMBER: _ClassVar[int]
    block_id: int
    vsync_cnt: int
    crc: int
    def __init__(
        self, block_id: _Optional[int] = ..., vsync_cnt: _Optional[int] = ..., crc: _Optional[int] = ...
    ) -> None: ...

class MdpPerfSetQosLutsFtraceEvent(_message.Message):
    __slots__ = ("pnum", "fmt", "intf", "rot", "fl", "lut", "linear")
    PNUM_FIELD_NUMBER: _ClassVar[int]
    FMT_FIELD_NUMBER: _ClassVar[int]
    INTF_FIELD_NUMBER: _ClassVar[int]
    ROT_FIELD_NUMBER: _ClassVar[int]
    FL_FIELD_NUMBER: _ClassVar[int]
    LUT_FIELD_NUMBER: _ClassVar[int]
    LINEAR_FIELD_NUMBER: _ClassVar[int]
    pnum: int
    fmt: int
    intf: int
    rot: int
    fl: int
    lut: int
    linear: int
    def __init__(
        self,
        pnum: _Optional[int] = ...,
        fmt: _Optional[int] = ...,
        intf: _Optional[int] = ...,
        rot: _Optional[int] = ...,
        fl: _Optional[int] = ...,
        lut: _Optional[int] = ...,
        linear: _Optional[int] = ...,
    ) -> None: ...

class MdpTraceCounterFtraceEvent(_message.Message):
    __slots__ = ("pid", "counter_name", "value")
    PID_FIELD_NUMBER: _ClassVar[int]
    COUNTER_NAME_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    pid: int
    counter_name: str
    value: int
    def __init__(
        self, pid: _Optional[int] = ..., counter_name: _Optional[str] = ..., value: _Optional[int] = ...
    ) -> None: ...

class MdpCmdReleaseBwFtraceEvent(_message.Message):
    __slots__ = ("ctl_num",)
    CTL_NUM_FIELD_NUMBER: _ClassVar[int]
    ctl_num: int
    def __init__(self, ctl_num: _Optional[int] = ...) -> None: ...

class MdpMixerUpdateFtraceEvent(_message.Message):
    __slots__ = ("mixer_num",)
    MIXER_NUM_FIELD_NUMBER: _ClassVar[int]
    mixer_num: int
    def __init__(self, mixer_num: _Optional[int] = ...) -> None: ...

class MdpPerfSetWmLevelsFtraceEvent(_message.Message):
    __slots__ = ("pnum", "use_space", "priority_bytes", "wm0", "wm1", "wm2", "mb_cnt", "mb_size")
    PNUM_FIELD_NUMBER: _ClassVar[int]
    USE_SPACE_FIELD_NUMBER: _ClassVar[int]
    PRIORITY_BYTES_FIELD_NUMBER: _ClassVar[int]
    WM0_FIELD_NUMBER: _ClassVar[int]
    WM1_FIELD_NUMBER: _ClassVar[int]
    WM2_FIELD_NUMBER: _ClassVar[int]
    MB_CNT_FIELD_NUMBER: _ClassVar[int]
    MB_SIZE_FIELD_NUMBER: _ClassVar[int]
    pnum: int
    use_space: int
    priority_bytes: int
    wm0: int
    wm1: int
    wm2: int
    mb_cnt: int
    mb_size: int
    def __init__(
        self,
        pnum: _Optional[int] = ...,
        use_space: _Optional[int] = ...,
        priority_bytes: _Optional[int] = ...,
        wm0: _Optional[int] = ...,
        wm1: _Optional[int] = ...,
        wm2: _Optional[int] = ...,
        mb_cnt: _Optional[int] = ...,
        mb_size: _Optional[int] = ...,
    ) -> None: ...

class MdpVideoUnderrunDoneFtraceEvent(_message.Message):
    __slots__ = ("ctl_num", "underrun_cnt")
    CTL_NUM_FIELD_NUMBER: _ClassVar[int]
    UNDERRUN_CNT_FIELD_NUMBER: _ClassVar[int]
    ctl_num: int
    underrun_cnt: int
    def __init__(self, ctl_num: _Optional[int] = ..., underrun_cnt: _Optional[int] = ...) -> None: ...

class MdpCmdWaitPingpongFtraceEvent(_message.Message):
    __slots__ = ("ctl_num", "kickoff_cnt")
    CTL_NUM_FIELD_NUMBER: _ClassVar[int]
    KICKOFF_CNT_FIELD_NUMBER: _ClassVar[int]
    ctl_num: int
    kickoff_cnt: int
    def __init__(self, ctl_num: _Optional[int] = ..., kickoff_cnt: _Optional[int] = ...) -> None: ...

class MdpPerfPrefillCalcFtraceEvent(_message.Message):
    __slots__ = (
        "pnum",
        "latency_buf",
        "ot",
        "y_buf",
        "y_scaler",
        "pp_lines",
        "pp_bytes",
        "post_sc",
        "fbc_bytes",
        "prefill_bytes",
    )
    PNUM_FIELD_NUMBER: _ClassVar[int]
    LATENCY_BUF_FIELD_NUMBER: _ClassVar[int]
    OT_FIELD_NUMBER: _ClassVar[int]
    Y_BUF_FIELD_NUMBER: _ClassVar[int]
    Y_SCALER_FIELD_NUMBER: _ClassVar[int]
    PP_LINES_FIELD_NUMBER: _ClassVar[int]
    PP_BYTES_FIELD_NUMBER: _ClassVar[int]
    POST_SC_FIELD_NUMBER: _ClassVar[int]
    FBC_BYTES_FIELD_NUMBER: _ClassVar[int]
    PREFILL_BYTES_FIELD_NUMBER: _ClassVar[int]
    pnum: int
    latency_buf: int
    ot: int
    y_buf: int
    y_scaler: int
    pp_lines: int
    pp_bytes: int
    post_sc: int
    fbc_bytes: int
    prefill_bytes: int
    def __init__(
        self,
        pnum: _Optional[int] = ...,
        latency_buf: _Optional[int] = ...,
        ot: _Optional[int] = ...,
        y_buf: _Optional[int] = ...,
        y_scaler: _Optional[int] = ...,
        pp_lines: _Optional[int] = ...,
        pp_bytes: _Optional[int] = ...,
        post_sc: _Optional[int] = ...,
        fbc_bytes: _Optional[int] = ...,
        prefill_bytes: _Optional[int] = ...,
    ) -> None: ...

class MdpPerfUpdateBusFtraceEvent(_message.Message):
    __slots__ = ("client", "ab_quota", "ib_quota")
    CLIENT_FIELD_NUMBER: _ClassVar[int]
    AB_QUOTA_FIELD_NUMBER: _ClassVar[int]
    IB_QUOTA_FIELD_NUMBER: _ClassVar[int]
    client: int
    ab_quota: int
    ib_quota: int
    def __init__(
        self, client: _Optional[int] = ..., ab_quota: _Optional[int] = ..., ib_quota: _Optional[int] = ...
    ) -> None: ...

class RotatorBwAoAsContextFtraceEvent(_message.Message):
    __slots__ = ("state",)
    STATE_FIELD_NUMBER: _ClassVar[int]
    state: int
    def __init__(self, state: _Optional[int] = ...) -> None: ...

class MmEventRecordFtraceEvent(_message.Message):
    __slots__ = ("avg_lat", "count", "max_lat", "type")
    AVG_LAT_FIELD_NUMBER: _ClassVar[int]
    COUNT_FIELD_NUMBER: _ClassVar[int]
    MAX_LAT_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    avg_lat: int
    count: int
    max_lat: int
    type: int
    def __init__(
        self,
        avg_lat: _Optional[int] = ...,
        count: _Optional[int] = ...,
        max_lat: _Optional[int] = ...,
        type: _Optional[int] = ...,
    ) -> None: ...

class NetifReceiveSkbFtraceEvent(_message.Message):
    __slots__ = ("len", "name", "skbaddr")
    LEN_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    SKBADDR_FIELD_NUMBER: _ClassVar[int]
    len: int
    name: str
    skbaddr: int
    def __init__(
        self, len: _Optional[int] = ..., name: _Optional[str] = ..., skbaddr: _Optional[int] = ...
    ) -> None: ...

class NetDevXmitFtraceEvent(_message.Message):
    __slots__ = ("len", "name", "rc", "skbaddr")
    LEN_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    RC_FIELD_NUMBER: _ClassVar[int]
    SKBADDR_FIELD_NUMBER: _ClassVar[int]
    len: int
    name: str
    rc: int
    skbaddr: int
    def __init__(
        self,
        len: _Optional[int] = ...,
        name: _Optional[str] = ...,
        rc: _Optional[int] = ...,
        skbaddr: _Optional[int] = ...,
    ) -> None: ...

class NapiGroReceiveEntryFtraceEvent(_message.Message):
    __slots__ = (
        "data_len",
        "gso_size",
        "gso_type",
        "hash",
        "ip_summed",
        "l4_hash",
        "len",
        "mac_header",
        "mac_header_valid",
        "name",
        "napi_id",
        "nr_frags",
        "protocol",
        "queue_mapping",
        "skbaddr",
        "truesize",
        "vlan_proto",
        "vlan_tagged",
        "vlan_tci",
    )
    DATA_LEN_FIELD_NUMBER: _ClassVar[int]
    GSO_SIZE_FIELD_NUMBER: _ClassVar[int]
    GSO_TYPE_FIELD_NUMBER: _ClassVar[int]
    HASH_FIELD_NUMBER: _ClassVar[int]
    IP_SUMMED_FIELD_NUMBER: _ClassVar[int]
    L4_HASH_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    MAC_HEADER_FIELD_NUMBER: _ClassVar[int]
    MAC_HEADER_VALID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    NAPI_ID_FIELD_NUMBER: _ClassVar[int]
    NR_FRAGS_FIELD_NUMBER: _ClassVar[int]
    PROTOCOL_FIELD_NUMBER: _ClassVar[int]
    QUEUE_MAPPING_FIELD_NUMBER: _ClassVar[int]
    SKBADDR_FIELD_NUMBER: _ClassVar[int]
    TRUESIZE_FIELD_NUMBER: _ClassVar[int]
    VLAN_PROTO_FIELD_NUMBER: _ClassVar[int]
    VLAN_TAGGED_FIELD_NUMBER: _ClassVar[int]
    VLAN_TCI_FIELD_NUMBER: _ClassVar[int]
    data_len: int
    gso_size: int
    gso_type: int
    hash: int
    ip_summed: int
    l4_hash: int
    len: int
    mac_header: int
    mac_header_valid: int
    name: str
    napi_id: int
    nr_frags: int
    protocol: int
    queue_mapping: int
    skbaddr: int
    truesize: int
    vlan_proto: int
    vlan_tagged: int
    vlan_tci: int
    def __init__(
        self,
        data_len: _Optional[int] = ...,
        gso_size: _Optional[int] = ...,
        gso_type: _Optional[int] = ...,
        hash: _Optional[int] = ...,
        ip_summed: _Optional[int] = ...,
        l4_hash: _Optional[int] = ...,
        len: _Optional[int] = ...,
        mac_header: _Optional[int] = ...,
        mac_header_valid: _Optional[int] = ...,
        name: _Optional[str] = ...,
        napi_id: _Optional[int] = ...,
        nr_frags: _Optional[int] = ...,
        protocol: _Optional[int] = ...,
        queue_mapping: _Optional[int] = ...,
        skbaddr: _Optional[int] = ...,
        truesize: _Optional[int] = ...,
        vlan_proto: _Optional[int] = ...,
        vlan_tagged: _Optional[int] = ...,
        vlan_tci: _Optional[int] = ...,
    ) -> None: ...

class NapiGroReceiveExitFtraceEvent(_message.Message):
    __slots__ = ("ret",)
    RET_FIELD_NUMBER: _ClassVar[int]
    ret: int
    def __init__(self, ret: _Optional[int] = ...) -> None: ...

class OomScoreAdjUpdateFtraceEvent(_message.Message):
    __slots__ = ("comm", "oom_score_adj", "pid")
    COMM_FIELD_NUMBER: _ClassVar[int]
    OOM_SCORE_ADJ_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    comm: str
    oom_score_adj: int
    pid: int
    def __init__(
        self, comm: _Optional[str] = ..., oom_score_adj: _Optional[int] = ..., pid: _Optional[int] = ...
    ) -> None: ...

class MarkVictimFtraceEvent(_message.Message):
    __slots__ = ("pid",)
    PID_FIELD_NUMBER: _ClassVar[int]
    pid: int
    def __init__(self, pid: _Optional[int] = ...) -> None: ...

class DsiCmdFifoStatusFtraceEvent(_message.Message):
    __slots__ = ("header", "payload")
    HEADER_FIELD_NUMBER: _ClassVar[int]
    PAYLOAD_FIELD_NUMBER: _ClassVar[int]
    header: int
    payload: int
    def __init__(self, header: _Optional[int] = ..., payload: _Optional[int] = ...) -> None: ...

class DsiRxFtraceEvent(_message.Message):
    __slots__ = ("cmd", "rx_buf")
    CMD_FIELD_NUMBER: _ClassVar[int]
    RX_BUF_FIELD_NUMBER: _ClassVar[int]
    cmd: int
    rx_buf: int
    def __init__(self, cmd: _Optional[int] = ..., rx_buf: _Optional[int] = ...) -> None: ...

class DsiTxFtraceEvent(_message.Message):
    __slots__ = ("last", "tx_buf", "type")
    LAST_FIELD_NUMBER: _ClassVar[int]
    TX_BUF_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    last: int
    tx_buf: int
    type: int
    def __init__(
        self, last: _Optional[int] = ..., tx_buf: _Optional[int] = ..., type: _Optional[int] = ...
    ) -> None: ...

class SchedSwitchWithCtrsFtraceEvent(_message.Message):
    __slots__ = (
        "old_pid",
        "new_pid",
        "cctr",
        "ctr0",
        "ctr1",
        "ctr2",
        "ctr3",
        "lctr0",
        "lctr1",
        "ctr4",
        "ctr5",
        "prev_comm",
        "prev_pid",
        "cyc",
        "inst",
        "stallbm",
        "l3dm",
    )
    OLD_PID_FIELD_NUMBER: _ClassVar[int]
    NEW_PID_FIELD_NUMBER: _ClassVar[int]
    CCTR_FIELD_NUMBER: _ClassVar[int]
    CTR0_FIELD_NUMBER: _ClassVar[int]
    CTR1_FIELD_NUMBER: _ClassVar[int]
    CTR2_FIELD_NUMBER: _ClassVar[int]
    CTR3_FIELD_NUMBER: _ClassVar[int]
    LCTR0_FIELD_NUMBER: _ClassVar[int]
    LCTR1_FIELD_NUMBER: _ClassVar[int]
    CTR4_FIELD_NUMBER: _ClassVar[int]
    CTR5_FIELD_NUMBER: _ClassVar[int]
    PREV_COMM_FIELD_NUMBER: _ClassVar[int]
    PREV_PID_FIELD_NUMBER: _ClassVar[int]
    CYC_FIELD_NUMBER: _ClassVar[int]
    INST_FIELD_NUMBER: _ClassVar[int]
    STALLBM_FIELD_NUMBER: _ClassVar[int]
    L3DM_FIELD_NUMBER: _ClassVar[int]
    old_pid: int
    new_pid: int
    cctr: int
    ctr0: int
    ctr1: int
    ctr2: int
    ctr3: int
    lctr0: int
    lctr1: int
    ctr4: int
    ctr5: int
    prev_comm: str
    prev_pid: int
    cyc: int
    inst: int
    stallbm: int
    l3dm: int
    def __init__(
        self,
        old_pid: _Optional[int] = ...,
        new_pid: _Optional[int] = ...,
        cctr: _Optional[int] = ...,
        ctr0: _Optional[int] = ...,
        ctr1: _Optional[int] = ...,
        ctr2: _Optional[int] = ...,
        ctr3: _Optional[int] = ...,
        lctr0: _Optional[int] = ...,
        lctr1: _Optional[int] = ...,
        ctr4: _Optional[int] = ...,
        ctr5: _Optional[int] = ...,
        prev_comm: _Optional[str] = ...,
        prev_pid: _Optional[int] = ...,
        cyc: _Optional[int] = ...,
        inst: _Optional[int] = ...,
        stallbm: _Optional[int] = ...,
        l3dm: _Optional[int] = ...,
    ) -> None: ...

class CpuFrequencyFtraceEvent(_message.Message):
    __slots__ = ("state", "cpu_id")
    STATE_FIELD_NUMBER: _ClassVar[int]
    CPU_ID_FIELD_NUMBER: _ClassVar[int]
    state: int
    cpu_id: int
    def __init__(self, state: _Optional[int] = ..., cpu_id: _Optional[int] = ...) -> None: ...

class CpuFrequencyLimitsFtraceEvent(_message.Message):
    __slots__ = ("min_freq", "max_freq", "cpu_id")
    MIN_FREQ_FIELD_NUMBER: _ClassVar[int]
    MAX_FREQ_FIELD_NUMBER: _ClassVar[int]
    CPU_ID_FIELD_NUMBER: _ClassVar[int]
    min_freq: int
    max_freq: int
    cpu_id: int
    def __init__(
        self, min_freq: _Optional[int] = ..., max_freq: _Optional[int] = ..., cpu_id: _Optional[int] = ...
    ) -> None: ...

class CpuIdleFtraceEvent(_message.Message):
    __slots__ = ("state", "cpu_id")
    STATE_FIELD_NUMBER: _ClassVar[int]
    CPU_ID_FIELD_NUMBER: _ClassVar[int]
    state: int
    cpu_id: int
    def __init__(self, state: _Optional[int] = ..., cpu_id: _Optional[int] = ...) -> None: ...

class ClockEnableFtraceEvent(_message.Message):
    __slots__ = ("name", "state", "cpu_id")
    NAME_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    CPU_ID_FIELD_NUMBER: _ClassVar[int]
    name: str
    state: int
    cpu_id: int
    def __init__(
        self, name: _Optional[str] = ..., state: _Optional[int] = ..., cpu_id: _Optional[int] = ...
    ) -> None: ...

class ClockDisableFtraceEvent(_message.Message):
    __slots__ = ("name", "state", "cpu_id")
    NAME_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    CPU_ID_FIELD_NUMBER: _ClassVar[int]
    name: str
    state: int
    cpu_id: int
    def __init__(
        self, name: _Optional[str] = ..., state: _Optional[int] = ..., cpu_id: _Optional[int] = ...
    ) -> None: ...

class ClockSetRateFtraceEvent(_message.Message):
    __slots__ = ("name", "state", "cpu_id")
    NAME_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    CPU_ID_FIELD_NUMBER: _ClassVar[int]
    name: str
    state: int
    cpu_id: int
    def __init__(
        self, name: _Optional[str] = ..., state: _Optional[int] = ..., cpu_id: _Optional[int] = ...
    ) -> None: ...

class SuspendResumeFtraceEvent(_message.Message):
    __slots__ = ("action", "val", "start")
    ACTION_FIELD_NUMBER: _ClassVar[int]
    VAL_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    action: str
    val: int
    start: int
    def __init__(
        self, action: _Optional[str] = ..., val: _Optional[int] = ..., start: _Optional[int] = ...
    ) -> None: ...

class GpuFrequencyFtraceEvent(_message.Message):
    __slots__ = ("gpu_id", "state")
    GPU_ID_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    gpu_id: int
    state: int
    def __init__(self, gpu_id: _Optional[int] = ..., state: _Optional[int] = ...) -> None: ...

class WakeupSourceActivateFtraceEvent(_message.Message):
    __slots__ = ("name", "state")
    NAME_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    name: str
    state: int
    def __init__(self, name: _Optional[str] = ..., state: _Optional[int] = ...) -> None: ...

class WakeupSourceDeactivateFtraceEvent(_message.Message):
    __slots__ = ("name", "state")
    NAME_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    name: str
    state: int
    def __init__(self, name: _Optional[str] = ..., state: _Optional[int] = ...) -> None: ...

class GpuWorkPeriodFtraceEvent(_message.Message):
    __slots__ = ("gpu_id", "uid", "start_time_ns", "end_time_ns", "total_active_duration_ns")
    GPU_ID_FIELD_NUMBER: _ClassVar[int]
    UID_FIELD_NUMBER: _ClassVar[int]
    START_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    END_TIME_NS_FIELD_NUMBER: _ClassVar[int]
    TOTAL_ACTIVE_DURATION_NS_FIELD_NUMBER: _ClassVar[int]
    gpu_id: int
    uid: int
    start_time_ns: int
    end_time_ns: int
    total_active_duration_ns: int
    def __init__(
        self,
        gpu_id: _Optional[int] = ...,
        uid: _Optional[int] = ...,
        start_time_ns: _Optional[int] = ...,
        end_time_ns: _Optional[int] = ...,
        total_active_duration_ns: _Optional[int] = ...,
    ) -> None: ...

class ConsoleFtraceEvent(_message.Message):
    __slots__ = ("msg",)
    MSG_FIELD_NUMBER: _ClassVar[int]
    msg: str
    def __init__(self, msg: _Optional[str] = ...) -> None: ...

class SysEnterFtraceEvent(_message.Message):
    __slots__ = ("id", "args")
    ID_FIELD_NUMBER: _ClassVar[int]
    ARGS_FIELD_NUMBER: _ClassVar[int]
    id: int
    args: _containers.RepeatedScalarFieldContainer[int]
    def __init__(self, id: _Optional[int] = ..., args: _Optional[_Iterable[int]] = ...) -> None: ...

class SysExitFtraceEvent(_message.Message):
    __slots__ = ("id", "ret")
    ID_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    id: int
    ret: int
    def __init__(self, id: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class RegulatorDisableFtraceEvent(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class RegulatorDisableCompleteFtraceEvent(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class RegulatorEnableFtraceEvent(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class RegulatorEnableCompleteFtraceEvent(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class RegulatorEnableDelayFtraceEvent(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class RegulatorSetVoltageFtraceEvent(_message.Message):
    __slots__ = ("name", "min", "max")
    NAME_FIELD_NUMBER: _ClassVar[int]
    MIN_FIELD_NUMBER: _ClassVar[int]
    MAX_FIELD_NUMBER: _ClassVar[int]
    name: str
    min: int
    max: int
    def __init__(self, name: _Optional[str] = ..., min: _Optional[int] = ..., max: _Optional[int] = ...) -> None: ...

class RegulatorSetVoltageCompleteFtraceEvent(_message.Message):
    __slots__ = ("name", "val")
    NAME_FIELD_NUMBER: _ClassVar[int]
    VAL_FIELD_NUMBER: _ClassVar[int]
    name: str
    val: int
    def __init__(self, name: _Optional[str] = ..., val: _Optional[int] = ...) -> None: ...

class SamsungTracingMarkWriteFtraceEvent(_message.Message):
    __slots__ = ("pid", "trace_name", "trace_begin", "trace_type", "value")
    PID_FIELD_NUMBER: _ClassVar[int]
    TRACE_NAME_FIELD_NUMBER: _ClassVar[int]
    TRACE_BEGIN_FIELD_NUMBER: _ClassVar[int]
    TRACE_TYPE_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    pid: int
    trace_name: str
    trace_begin: int
    trace_type: int
    value: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        trace_name: _Optional[str] = ...,
        trace_begin: _Optional[int] = ...,
        trace_type: _Optional[int] = ...,
        value: _Optional[int] = ...,
    ) -> None: ...

class SchedSwitchFtraceEvent(_message.Message):
    __slots__ = ("prev_comm", "prev_pid", "prev_prio", "prev_state", "next_comm", "next_pid", "next_prio")
    PREV_COMM_FIELD_NUMBER: _ClassVar[int]
    PREV_PID_FIELD_NUMBER: _ClassVar[int]
    PREV_PRIO_FIELD_NUMBER: _ClassVar[int]
    PREV_STATE_FIELD_NUMBER: _ClassVar[int]
    NEXT_COMM_FIELD_NUMBER: _ClassVar[int]
    NEXT_PID_FIELD_NUMBER: _ClassVar[int]
    NEXT_PRIO_FIELD_NUMBER: _ClassVar[int]
    prev_comm: str
    prev_pid: int
    prev_prio: int
    prev_state: int
    next_comm: str
    next_pid: int
    next_prio: int
    def __init__(
        self,
        prev_comm: _Optional[str] = ...,
        prev_pid: _Optional[int] = ...,
        prev_prio: _Optional[int] = ...,
        prev_state: _Optional[int] = ...,
        next_comm: _Optional[str] = ...,
        next_pid: _Optional[int] = ...,
        next_prio: _Optional[int] = ...,
    ) -> None: ...

class SchedWakeupFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid", "prio", "success", "target_cpu")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    SUCCESS_FIELD_NUMBER: _ClassVar[int]
    TARGET_CPU_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    prio: int
    success: int
    target_cpu: int
    def __init__(
        self,
        comm: _Optional[str] = ...,
        pid: _Optional[int] = ...,
        prio: _Optional[int] = ...,
        success: _Optional[int] = ...,
        target_cpu: _Optional[int] = ...,
    ) -> None: ...

class SchedBlockedReasonFtraceEvent(_message.Message):
    __slots__ = ("pid", "caller", "io_wait")
    PID_FIELD_NUMBER: _ClassVar[int]
    CALLER_FIELD_NUMBER: _ClassVar[int]
    IO_WAIT_FIELD_NUMBER: _ClassVar[int]
    pid: int
    caller: int
    io_wait: int
    def __init__(
        self, pid: _Optional[int] = ..., caller: _Optional[int] = ..., io_wait: _Optional[int] = ...
    ) -> None: ...

class SchedCpuHotplugFtraceEvent(_message.Message):
    __slots__ = ("affected_cpu", "error", "status")
    AFFECTED_CPU_FIELD_NUMBER: _ClassVar[int]
    ERROR_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    affected_cpu: int
    error: int
    status: int
    def __init__(
        self, affected_cpu: _Optional[int] = ..., error: _Optional[int] = ..., status: _Optional[int] = ...
    ) -> None: ...

class SchedWakingFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid", "prio", "success", "target_cpu")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    SUCCESS_FIELD_NUMBER: _ClassVar[int]
    TARGET_CPU_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    prio: int
    success: int
    target_cpu: int
    def __init__(
        self,
        comm: _Optional[str] = ...,
        pid: _Optional[int] = ...,
        prio: _Optional[int] = ...,
        success: _Optional[int] = ...,
        target_cpu: _Optional[int] = ...,
    ) -> None: ...

class SchedWakeupNewFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid", "prio", "success", "target_cpu")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    SUCCESS_FIELD_NUMBER: _ClassVar[int]
    TARGET_CPU_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    prio: int
    success: int
    target_cpu: int
    def __init__(
        self,
        comm: _Optional[str] = ...,
        pid: _Optional[int] = ...,
        prio: _Optional[int] = ...,
        success: _Optional[int] = ...,
        target_cpu: _Optional[int] = ...,
    ) -> None: ...

class SchedProcessExecFtraceEvent(_message.Message):
    __slots__ = ("filename", "pid", "old_pid")
    FILENAME_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    OLD_PID_FIELD_NUMBER: _ClassVar[int]
    filename: str
    pid: int
    old_pid: int
    def __init__(
        self, filename: _Optional[str] = ..., pid: _Optional[int] = ..., old_pid: _Optional[int] = ...
    ) -> None: ...

class SchedProcessExitFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid", "tgid", "prio")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    TGID_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    tgid: int
    prio: int
    def __init__(
        self,
        comm: _Optional[str] = ...,
        pid: _Optional[int] = ...,
        tgid: _Optional[int] = ...,
        prio: _Optional[int] = ...,
    ) -> None: ...

class SchedProcessForkFtraceEvent(_message.Message):
    __slots__ = ("parent_comm", "parent_pid", "child_comm", "child_pid")
    PARENT_COMM_FIELD_NUMBER: _ClassVar[int]
    PARENT_PID_FIELD_NUMBER: _ClassVar[int]
    CHILD_COMM_FIELD_NUMBER: _ClassVar[int]
    CHILD_PID_FIELD_NUMBER: _ClassVar[int]
    parent_comm: str
    parent_pid: int
    child_comm: str
    child_pid: int
    def __init__(
        self,
        parent_comm: _Optional[str] = ...,
        parent_pid: _Optional[int] = ...,
        child_comm: _Optional[str] = ...,
        child_pid: _Optional[int] = ...,
    ) -> None: ...

class SchedProcessFreeFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid", "prio")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    prio: int
    def __init__(self, comm: _Optional[str] = ..., pid: _Optional[int] = ..., prio: _Optional[int] = ...) -> None: ...

class SchedProcessHangFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    def __init__(self, comm: _Optional[str] = ..., pid: _Optional[int] = ...) -> None: ...

class SchedProcessWaitFtraceEvent(_message.Message):
    __slots__ = ("comm", "pid", "prio")
    COMM_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    comm: str
    pid: int
    prio: int
    def __init__(self, comm: _Optional[str] = ..., pid: _Optional[int] = ..., prio: _Optional[int] = ...) -> None: ...

class SchedPiSetprioFtraceEvent(_message.Message):
    __slots__ = ("comm", "newprio", "oldprio", "pid")
    COMM_FIELD_NUMBER: _ClassVar[int]
    NEWPRIO_FIELD_NUMBER: _ClassVar[int]
    OLDPRIO_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    comm: str
    newprio: int
    oldprio: int
    pid: int
    def __init__(
        self,
        comm: _Optional[str] = ...,
        newprio: _Optional[int] = ...,
        oldprio: _Optional[int] = ...,
        pid: _Optional[int] = ...,
    ) -> None: ...

class SchedCpuUtilCfsFtraceEvent(_message.Message):
    __slots__ = (
        "active",
        "capacity",
        "capacity_orig",
        "cpu",
        "cpu_importance",
        "cpu_util",
        "exit_lat",
        "group_capacity",
        "grp_overutilized",
        "idle_cpu",
        "nr_running",
        "spare_cap",
        "task_fits",
        "wake_group_util",
        "wake_util",
    )
    ACTIVE_FIELD_NUMBER: _ClassVar[int]
    CAPACITY_FIELD_NUMBER: _ClassVar[int]
    CAPACITY_ORIG_FIELD_NUMBER: _ClassVar[int]
    CPU_FIELD_NUMBER: _ClassVar[int]
    CPU_IMPORTANCE_FIELD_NUMBER: _ClassVar[int]
    CPU_UTIL_FIELD_NUMBER: _ClassVar[int]
    EXIT_LAT_FIELD_NUMBER: _ClassVar[int]
    GROUP_CAPACITY_FIELD_NUMBER: _ClassVar[int]
    GRP_OVERUTILIZED_FIELD_NUMBER: _ClassVar[int]
    IDLE_CPU_FIELD_NUMBER: _ClassVar[int]
    NR_RUNNING_FIELD_NUMBER: _ClassVar[int]
    SPARE_CAP_FIELD_NUMBER: _ClassVar[int]
    TASK_FITS_FIELD_NUMBER: _ClassVar[int]
    WAKE_GROUP_UTIL_FIELD_NUMBER: _ClassVar[int]
    WAKE_UTIL_FIELD_NUMBER: _ClassVar[int]
    active: int
    capacity: int
    capacity_orig: int
    cpu: int
    cpu_importance: int
    cpu_util: int
    exit_lat: int
    group_capacity: int
    grp_overutilized: int
    idle_cpu: int
    nr_running: int
    spare_cap: int
    task_fits: int
    wake_group_util: int
    wake_util: int
    def __init__(
        self,
        active: _Optional[int] = ...,
        capacity: _Optional[int] = ...,
        capacity_orig: _Optional[int] = ...,
        cpu: _Optional[int] = ...,
        cpu_importance: _Optional[int] = ...,
        cpu_util: _Optional[int] = ...,
        exit_lat: _Optional[int] = ...,
        group_capacity: _Optional[int] = ...,
        grp_overutilized: _Optional[int] = ...,
        idle_cpu: _Optional[int] = ...,
        nr_running: _Optional[int] = ...,
        spare_cap: _Optional[int] = ...,
        task_fits: _Optional[int] = ...,
        wake_group_util: _Optional[int] = ...,
        wake_util: _Optional[int] = ...,
    ) -> None: ...

class ScmCallStartFtraceEvent(_message.Message):
    __slots__ = ("arginfo", "x0", "x5")
    ARGINFO_FIELD_NUMBER: _ClassVar[int]
    X0_FIELD_NUMBER: _ClassVar[int]
    X5_FIELD_NUMBER: _ClassVar[int]
    arginfo: int
    x0: int
    x5: int
    def __init__(self, arginfo: _Optional[int] = ..., x0: _Optional[int] = ..., x5: _Optional[int] = ...) -> None: ...

class ScmCallEndFtraceEvent(_message.Message):
    __slots__ = ()
    def __init__(self) -> None: ...

class SdeTracingMarkWriteFtraceEvent(_message.Message):
    __slots__ = ("pid", "trace_name", "trace_type", "value", "trace_begin")
    PID_FIELD_NUMBER: _ClassVar[int]
    TRACE_NAME_FIELD_NUMBER: _ClassVar[int]
    TRACE_TYPE_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    TRACE_BEGIN_FIELD_NUMBER: _ClassVar[int]
    pid: int
    trace_name: str
    trace_type: int
    value: int
    trace_begin: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        trace_name: _Optional[str] = ...,
        trace_type: _Optional[int] = ...,
        value: _Optional[int] = ...,
        trace_begin: _Optional[int] = ...,
    ) -> None: ...

class SdeSdeEvtlogFtraceEvent(_message.Message):
    __slots__ = ("evtlog_tag", "pid", "tag_id")
    EVTLOG_TAG_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    TAG_ID_FIELD_NUMBER: _ClassVar[int]
    evtlog_tag: str
    pid: int
    tag_id: int
    def __init__(
        self, evtlog_tag: _Optional[str] = ..., pid: _Optional[int] = ..., tag_id: _Optional[int] = ...
    ) -> None: ...

class SdeSdePerfCalcCrtcFtraceEvent(_message.Message):
    __slots__ = ("bw_ctl_ebi", "bw_ctl_llcc", "bw_ctl_mnoc", "core_clk_rate", "crtc", "ib_ebi", "ib_llcc", "ib_mnoc")
    BW_CTL_EBI_FIELD_NUMBER: _ClassVar[int]
    BW_CTL_LLCC_FIELD_NUMBER: _ClassVar[int]
    BW_CTL_MNOC_FIELD_NUMBER: _ClassVar[int]
    CORE_CLK_RATE_FIELD_NUMBER: _ClassVar[int]
    CRTC_FIELD_NUMBER: _ClassVar[int]
    IB_EBI_FIELD_NUMBER: _ClassVar[int]
    IB_LLCC_FIELD_NUMBER: _ClassVar[int]
    IB_MNOC_FIELD_NUMBER: _ClassVar[int]
    bw_ctl_ebi: int
    bw_ctl_llcc: int
    bw_ctl_mnoc: int
    core_clk_rate: int
    crtc: int
    ib_ebi: int
    ib_llcc: int
    ib_mnoc: int
    def __init__(
        self,
        bw_ctl_ebi: _Optional[int] = ...,
        bw_ctl_llcc: _Optional[int] = ...,
        bw_ctl_mnoc: _Optional[int] = ...,
        core_clk_rate: _Optional[int] = ...,
        crtc: _Optional[int] = ...,
        ib_ebi: _Optional[int] = ...,
        ib_llcc: _Optional[int] = ...,
        ib_mnoc: _Optional[int] = ...,
    ) -> None: ...

class SdeSdePerfCrtcUpdateFtraceEvent(_message.Message):
    __slots__ = (
        "bw_ctl_ebi",
        "bw_ctl_llcc",
        "bw_ctl_mnoc",
        "core_clk_rate",
        "crtc",
        "params",
        "per_pipe_ib_ebi",
        "per_pipe_ib_llcc",
        "per_pipe_ib_mnoc",
        "stop_req",
        "update_bus",
        "update_clk",
    )
    BW_CTL_EBI_FIELD_NUMBER: _ClassVar[int]
    BW_CTL_LLCC_FIELD_NUMBER: _ClassVar[int]
    BW_CTL_MNOC_FIELD_NUMBER: _ClassVar[int]
    CORE_CLK_RATE_FIELD_NUMBER: _ClassVar[int]
    CRTC_FIELD_NUMBER: _ClassVar[int]
    PARAMS_FIELD_NUMBER: _ClassVar[int]
    PER_PIPE_IB_EBI_FIELD_NUMBER: _ClassVar[int]
    PER_PIPE_IB_LLCC_FIELD_NUMBER: _ClassVar[int]
    PER_PIPE_IB_MNOC_FIELD_NUMBER: _ClassVar[int]
    STOP_REQ_FIELD_NUMBER: _ClassVar[int]
    UPDATE_BUS_FIELD_NUMBER: _ClassVar[int]
    UPDATE_CLK_FIELD_NUMBER: _ClassVar[int]
    bw_ctl_ebi: int
    bw_ctl_llcc: int
    bw_ctl_mnoc: int
    core_clk_rate: int
    crtc: int
    params: int
    per_pipe_ib_ebi: int
    per_pipe_ib_llcc: int
    per_pipe_ib_mnoc: int
    stop_req: int
    update_bus: int
    update_clk: int
    def __init__(
        self,
        bw_ctl_ebi: _Optional[int] = ...,
        bw_ctl_llcc: _Optional[int] = ...,
        bw_ctl_mnoc: _Optional[int] = ...,
        core_clk_rate: _Optional[int] = ...,
        crtc: _Optional[int] = ...,
        params: _Optional[int] = ...,
        per_pipe_ib_ebi: _Optional[int] = ...,
        per_pipe_ib_llcc: _Optional[int] = ...,
        per_pipe_ib_mnoc: _Optional[int] = ...,
        stop_req: _Optional[int] = ...,
        update_bus: _Optional[int] = ...,
        update_clk: _Optional[int] = ...,
    ) -> None: ...

class SdeSdePerfSetQosLutsFtraceEvent(_message.Message):
    __slots__ = ("fl", "fmt", "lut", "lut_usage", "pnum", "rt")
    FL_FIELD_NUMBER: _ClassVar[int]
    FMT_FIELD_NUMBER: _ClassVar[int]
    LUT_FIELD_NUMBER: _ClassVar[int]
    LUT_USAGE_FIELD_NUMBER: _ClassVar[int]
    PNUM_FIELD_NUMBER: _ClassVar[int]
    RT_FIELD_NUMBER: _ClassVar[int]
    fl: int
    fmt: int
    lut: int
    lut_usage: int
    pnum: int
    rt: int
    def __init__(
        self,
        fl: _Optional[int] = ...,
        fmt: _Optional[int] = ...,
        lut: _Optional[int] = ...,
        lut_usage: _Optional[int] = ...,
        pnum: _Optional[int] = ...,
        rt: _Optional[int] = ...,
    ) -> None: ...

class SdeSdePerfUpdateBusFtraceEvent(_message.Message):
    __slots__ = ("ab_quota", "bus_id", "client", "ib_quota")
    AB_QUOTA_FIELD_NUMBER: _ClassVar[int]
    BUS_ID_FIELD_NUMBER: _ClassVar[int]
    CLIENT_FIELD_NUMBER: _ClassVar[int]
    IB_QUOTA_FIELD_NUMBER: _ClassVar[int]
    ab_quota: int
    bus_id: int
    client: int
    ib_quota: int
    def __init__(
        self,
        ab_quota: _Optional[int] = ...,
        bus_id: _Optional[int] = ...,
        client: _Optional[int] = ...,
        ib_quota: _Optional[int] = ...,
    ) -> None: ...

class SignalDeliverFtraceEvent(_message.Message):
    __slots__ = ("code", "sa_flags", "sig")
    CODE_FIELD_NUMBER: _ClassVar[int]
    SA_FLAGS_FIELD_NUMBER: _ClassVar[int]
    SIG_FIELD_NUMBER: _ClassVar[int]
    code: int
    sa_flags: int
    sig: int
    def __init__(
        self, code: _Optional[int] = ..., sa_flags: _Optional[int] = ..., sig: _Optional[int] = ...
    ) -> None: ...

class SignalGenerateFtraceEvent(_message.Message):
    __slots__ = ("code", "comm", "group", "pid", "result", "sig")
    CODE_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    GROUP_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    RESULT_FIELD_NUMBER: _ClassVar[int]
    SIG_FIELD_NUMBER: _ClassVar[int]
    code: int
    comm: str
    group: int
    pid: int
    result: int
    sig: int
    def __init__(
        self,
        code: _Optional[int] = ...,
        comm: _Optional[str] = ...,
        group: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        result: _Optional[int] = ...,
        sig: _Optional[int] = ...,
    ) -> None: ...

class KfreeSkbFtraceEvent(_message.Message):
    __slots__ = ("location", "protocol", "skbaddr")
    LOCATION_FIELD_NUMBER: _ClassVar[int]
    PROTOCOL_FIELD_NUMBER: _ClassVar[int]
    SKBADDR_FIELD_NUMBER: _ClassVar[int]
    location: int
    protocol: int
    skbaddr: int
    def __init__(
        self, location: _Optional[int] = ..., protocol: _Optional[int] = ..., skbaddr: _Optional[int] = ...
    ) -> None: ...

class InetSockSetStateFtraceEvent(_message.Message):
    __slots__ = ("daddr", "dport", "family", "newstate", "oldstate", "protocol", "saddr", "skaddr", "sport")
    DADDR_FIELD_NUMBER: _ClassVar[int]
    DPORT_FIELD_NUMBER: _ClassVar[int]
    FAMILY_FIELD_NUMBER: _ClassVar[int]
    NEWSTATE_FIELD_NUMBER: _ClassVar[int]
    OLDSTATE_FIELD_NUMBER: _ClassVar[int]
    PROTOCOL_FIELD_NUMBER: _ClassVar[int]
    SADDR_FIELD_NUMBER: _ClassVar[int]
    SKADDR_FIELD_NUMBER: _ClassVar[int]
    SPORT_FIELD_NUMBER: _ClassVar[int]
    daddr: int
    dport: int
    family: int
    newstate: int
    oldstate: int
    protocol: int
    saddr: int
    skaddr: int
    sport: int
    def __init__(
        self,
        daddr: _Optional[int] = ...,
        dport: _Optional[int] = ...,
        family: _Optional[int] = ...,
        newstate: _Optional[int] = ...,
        oldstate: _Optional[int] = ...,
        protocol: _Optional[int] = ...,
        saddr: _Optional[int] = ...,
        skaddr: _Optional[int] = ...,
        sport: _Optional[int] = ...,
    ) -> None: ...

class SyncPtFtraceEvent(_message.Message):
    __slots__ = ("timeline", "value")
    TIMELINE_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    timeline: str
    value: str
    def __init__(self, timeline: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...

class SyncTimelineFtraceEvent(_message.Message):
    __slots__ = ("name", "value")
    NAME_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    name: str
    value: str
    def __init__(self, name: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...

class SyncWaitFtraceEvent(_message.Message):
    __slots__ = ("name", "status", "begin")
    NAME_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    BEGIN_FIELD_NUMBER: _ClassVar[int]
    name: str
    status: int
    begin: int
    def __init__(
        self, name: _Optional[str] = ..., status: _Optional[int] = ..., begin: _Optional[int] = ...
    ) -> None: ...

class RssStatThrottledFtraceEvent(_message.Message):
    __slots__ = ("curr", "member", "mm_id", "size")
    CURR_FIELD_NUMBER: _ClassVar[int]
    MEMBER_FIELD_NUMBER: _ClassVar[int]
    MM_ID_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    curr: int
    member: int
    mm_id: int
    size: int
    def __init__(
        self,
        curr: _Optional[int] = ...,
        member: _Optional[int] = ...,
        mm_id: _Optional[int] = ...,
        size: _Optional[int] = ...,
    ) -> None: ...

class SuspendResumeMinimalFtraceEvent(_message.Message):
    __slots__ = ("start",)
    START_FIELD_NUMBER: _ClassVar[int]
    start: int
    def __init__(self, start: _Optional[int] = ...) -> None: ...

class ZeroFtraceEvent(_message.Message):
    __slots__ = ("flag", "name", "pid", "value")
    FLAG_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    VALUE_FIELD_NUMBER: _ClassVar[int]
    flag: int
    name: str
    pid: int
    value: int
    def __init__(
        self,
        flag: _Optional[int] = ...,
        name: _Optional[str] = ...,
        pid: _Optional[int] = ...,
        value: _Optional[int] = ...,
    ) -> None: ...

class TaskNewtaskFtraceEvent(_message.Message):
    __slots__ = ("pid", "comm", "clone_flags", "oom_score_adj")
    PID_FIELD_NUMBER: _ClassVar[int]
    COMM_FIELD_NUMBER: _ClassVar[int]
    CLONE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    OOM_SCORE_ADJ_FIELD_NUMBER: _ClassVar[int]
    pid: int
    comm: str
    clone_flags: int
    oom_score_adj: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        comm: _Optional[str] = ...,
        clone_flags: _Optional[int] = ...,
        oom_score_adj: _Optional[int] = ...,
    ) -> None: ...

class TaskRenameFtraceEvent(_message.Message):
    __slots__ = ("pid", "oldcomm", "newcomm", "oom_score_adj")
    PID_FIELD_NUMBER: _ClassVar[int]
    OLDCOMM_FIELD_NUMBER: _ClassVar[int]
    NEWCOMM_FIELD_NUMBER: _ClassVar[int]
    OOM_SCORE_ADJ_FIELD_NUMBER: _ClassVar[int]
    pid: int
    oldcomm: str
    newcomm: str
    oom_score_adj: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        oldcomm: _Optional[str] = ...,
        newcomm: _Optional[str] = ...,
        oom_score_adj: _Optional[int] = ...,
    ) -> None: ...

class TcpRetransmitSkbFtraceEvent(_message.Message):
    __slots__ = ("daddr", "dport", "saddr", "skaddr", "skbaddr", "sport", "state")
    DADDR_FIELD_NUMBER: _ClassVar[int]
    DPORT_FIELD_NUMBER: _ClassVar[int]
    SADDR_FIELD_NUMBER: _ClassVar[int]
    SKADDR_FIELD_NUMBER: _ClassVar[int]
    SKBADDR_FIELD_NUMBER: _ClassVar[int]
    SPORT_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    daddr: int
    dport: int
    saddr: int
    skaddr: int
    skbaddr: int
    sport: int
    state: int
    def __init__(
        self,
        daddr: _Optional[int] = ...,
        dport: _Optional[int] = ...,
        saddr: _Optional[int] = ...,
        skaddr: _Optional[int] = ...,
        skbaddr: _Optional[int] = ...,
        sport: _Optional[int] = ...,
        state: _Optional[int] = ...,
    ) -> None: ...

class ThermalTemperatureFtraceEvent(_message.Message):
    __slots__ = ("id", "temp", "temp_prev", "thermal_zone")
    ID_FIELD_NUMBER: _ClassVar[int]
    TEMP_FIELD_NUMBER: _ClassVar[int]
    TEMP_PREV_FIELD_NUMBER: _ClassVar[int]
    THERMAL_ZONE_FIELD_NUMBER: _ClassVar[int]
    id: int
    temp: int
    temp_prev: int
    thermal_zone: str
    def __init__(
        self,
        id: _Optional[int] = ...,
        temp: _Optional[int] = ...,
        temp_prev: _Optional[int] = ...,
        thermal_zone: _Optional[str] = ...,
    ) -> None: ...

class CdevUpdateFtraceEvent(_message.Message):
    __slots__ = ("target", "type")
    TARGET_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    target: int
    type: str
    def __init__(self, target: _Optional[int] = ..., type: _Optional[str] = ...) -> None: ...

class TrustySmcFtraceEvent(_message.Message):
    __slots__ = ("r0", "r1", "r2", "r3")
    R0_FIELD_NUMBER: _ClassVar[int]
    R1_FIELD_NUMBER: _ClassVar[int]
    R2_FIELD_NUMBER: _ClassVar[int]
    R3_FIELD_NUMBER: _ClassVar[int]
    r0: int
    r1: int
    r2: int
    r3: int
    def __init__(
        self, r0: _Optional[int] = ..., r1: _Optional[int] = ..., r2: _Optional[int] = ..., r3: _Optional[int] = ...
    ) -> None: ...

class TrustySmcDoneFtraceEvent(_message.Message):
    __slots__ = ("ret",)
    RET_FIELD_NUMBER: _ClassVar[int]
    ret: int
    def __init__(self, ret: _Optional[int] = ...) -> None: ...

class TrustyStdCall32FtraceEvent(_message.Message):
    __slots__ = ("r0", "r1", "r2", "r3")
    R0_FIELD_NUMBER: _ClassVar[int]
    R1_FIELD_NUMBER: _ClassVar[int]
    R2_FIELD_NUMBER: _ClassVar[int]
    R3_FIELD_NUMBER: _ClassVar[int]
    r0: int
    r1: int
    r2: int
    r3: int
    def __init__(
        self, r0: _Optional[int] = ..., r1: _Optional[int] = ..., r2: _Optional[int] = ..., r3: _Optional[int] = ...
    ) -> None: ...

class TrustyStdCall32DoneFtraceEvent(_message.Message):
    __slots__ = ("ret",)
    RET_FIELD_NUMBER: _ClassVar[int]
    ret: int
    def __init__(self, ret: _Optional[int] = ...) -> None: ...

class TrustyShareMemoryFtraceEvent(_message.Message):
    __slots__ = ("len", "lend", "nents")
    LEN_FIELD_NUMBER: _ClassVar[int]
    LEND_FIELD_NUMBER: _ClassVar[int]
    NENTS_FIELD_NUMBER: _ClassVar[int]
    len: int
    lend: int
    nents: int
    def __init__(self, len: _Optional[int] = ..., lend: _Optional[int] = ..., nents: _Optional[int] = ...) -> None: ...

class TrustyShareMemoryDoneFtraceEvent(_message.Message):
    __slots__ = ("handle", "len", "lend", "nents", "ret")
    HANDLE_FIELD_NUMBER: _ClassVar[int]
    LEN_FIELD_NUMBER: _ClassVar[int]
    LEND_FIELD_NUMBER: _ClassVar[int]
    NENTS_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    handle: int
    len: int
    lend: int
    nents: int
    ret: int
    def __init__(
        self,
        handle: _Optional[int] = ...,
        len: _Optional[int] = ...,
        lend: _Optional[int] = ...,
        nents: _Optional[int] = ...,
        ret: _Optional[int] = ...,
    ) -> None: ...

class TrustyReclaimMemoryFtraceEvent(_message.Message):
    __slots__ = ("id",)
    ID_FIELD_NUMBER: _ClassVar[int]
    id: int
    def __init__(self, id: _Optional[int] = ...) -> None: ...

class TrustyReclaimMemoryDoneFtraceEvent(_message.Message):
    __slots__ = ("id", "ret")
    ID_FIELD_NUMBER: _ClassVar[int]
    RET_FIELD_NUMBER: _ClassVar[int]
    id: int
    ret: int
    def __init__(self, id: _Optional[int] = ..., ret: _Optional[int] = ...) -> None: ...

class TrustyIrqFtraceEvent(_message.Message):
    __slots__ = ("irq",)
    IRQ_FIELD_NUMBER: _ClassVar[int]
    irq: int
    def __init__(self, irq: _Optional[int] = ...) -> None: ...

class TrustyIpcHandleEventFtraceEvent(_message.Message):
    __slots__ = ("chan", "event_id", "srv_name")
    CHAN_FIELD_NUMBER: _ClassVar[int]
    EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    SRV_NAME_FIELD_NUMBER: _ClassVar[int]
    chan: int
    event_id: int
    srv_name: str
    def __init__(
        self, chan: _Optional[int] = ..., event_id: _Optional[int] = ..., srv_name: _Optional[str] = ...
    ) -> None: ...

class TrustyIpcConnectFtraceEvent(_message.Message):
    __slots__ = ("chan", "port", "state")
    CHAN_FIELD_NUMBER: _ClassVar[int]
    PORT_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    chan: int
    port: str
    state: int
    def __init__(self, chan: _Optional[int] = ..., port: _Optional[str] = ..., state: _Optional[int] = ...) -> None: ...

class TrustyIpcConnectEndFtraceEvent(_message.Message):
    __slots__ = ("chan", "err", "state")
    CHAN_FIELD_NUMBER: _ClassVar[int]
    ERR_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    chan: int
    err: int
    state: int
    def __init__(self, chan: _Optional[int] = ..., err: _Optional[int] = ..., state: _Optional[int] = ...) -> None: ...

class TrustyIpcWriteFtraceEvent(_message.Message):
    __slots__ = ("buf_id", "chan", "kind_shm", "len_or_err", "shm_cnt", "srv_name")
    BUF_ID_FIELD_NUMBER: _ClassVar[int]
    CHAN_FIELD_NUMBER: _ClassVar[int]
    KIND_SHM_FIELD_NUMBER: _ClassVar[int]
    LEN_OR_ERR_FIELD_NUMBER: _ClassVar[int]
    SHM_CNT_FIELD_NUMBER: _ClassVar[int]
    SRV_NAME_FIELD_NUMBER: _ClassVar[int]
    buf_id: int
    chan: int
    kind_shm: int
    len_or_err: int
    shm_cnt: int
    srv_name: str
    def __init__(
        self,
        buf_id: _Optional[int] = ...,
        chan: _Optional[int] = ...,
        kind_shm: _Optional[int] = ...,
        len_or_err: _Optional[int] = ...,
        shm_cnt: _Optional[int] = ...,
        srv_name: _Optional[str] = ...,
    ) -> None: ...

class TrustyIpcPollFtraceEvent(_message.Message):
    __slots__ = ("chan", "poll_mask", "srv_name")
    CHAN_FIELD_NUMBER: _ClassVar[int]
    POLL_MASK_FIELD_NUMBER: _ClassVar[int]
    SRV_NAME_FIELD_NUMBER: _ClassVar[int]
    chan: int
    poll_mask: int
    srv_name: str
    def __init__(
        self, chan: _Optional[int] = ..., poll_mask: _Optional[int] = ..., srv_name: _Optional[str] = ...
    ) -> None: ...

class TrustyIpcReadFtraceEvent(_message.Message):
    __slots__ = ("chan", "srv_name")
    CHAN_FIELD_NUMBER: _ClassVar[int]
    SRV_NAME_FIELD_NUMBER: _ClassVar[int]
    chan: int
    srv_name: str
    def __init__(self, chan: _Optional[int] = ..., srv_name: _Optional[str] = ...) -> None: ...

class TrustyIpcReadEndFtraceEvent(_message.Message):
    __slots__ = ("buf_id", "chan", "len_or_err", "shm_cnt", "srv_name")
    BUF_ID_FIELD_NUMBER: _ClassVar[int]
    CHAN_FIELD_NUMBER: _ClassVar[int]
    LEN_OR_ERR_FIELD_NUMBER: _ClassVar[int]
    SHM_CNT_FIELD_NUMBER: _ClassVar[int]
    SRV_NAME_FIELD_NUMBER: _ClassVar[int]
    buf_id: int
    chan: int
    len_or_err: int
    shm_cnt: int
    srv_name: str
    def __init__(
        self,
        buf_id: _Optional[int] = ...,
        chan: _Optional[int] = ...,
        len_or_err: _Optional[int] = ...,
        shm_cnt: _Optional[int] = ...,
        srv_name: _Optional[str] = ...,
    ) -> None: ...

class TrustyIpcRxFtraceEvent(_message.Message):
    __slots__ = ("buf_id", "chan", "srv_name")
    BUF_ID_FIELD_NUMBER: _ClassVar[int]
    CHAN_FIELD_NUMBER: _ClassVar[int]
    SRV_NAME_FIELD_NUMBER: _ClassVar[int]
    buf_id: int
    chan: int
    srv_name: str
    def __init__(
        self, buf_id: _Optional[int] = ..., chan: _Optional[int] = ..., srv_name: _Optional[str] = ...
    ) -> None: ...

class TrustyEnqueueNopFtraceEvent(_message.Message):
    __slots__ = ("arg1", "arg2", "arg3")
    ARG1_FIELD_NUMBER: _ClassVar[int]
    ARG2_FIELD_NUMBER: _ClassVar[int]
    ARG3_FIELD_NUMBER: _ClassVar[int]
    arg1: int
    arg2: int
    arg3: int
    def __init__(self, arg1: _Optional[int] = ..., arg2: _Optional[int] = ..., arg3: _Optional[int] = ...) -> None: ...

class UfshcdCommandFtraceEvent(_message.Message):
    __slots__ = ("dev_name", "doorbell", "intr", "lba", "opcode", "str", "tag", "transfer_len", "group_id", "str_t")
    DEV_NAME_FIELD_NUMBER: _ClassVar[int]
    DOORBELL_FIELD_NUMBER: _ClassVar[int]
    INTR_FIELD_NUMBER: _ClassVar[int]
    LBA_FIELD_NUMBER: _ClassVar[int]
    OPCODE_FIELD_NUMBER: _ClassVar[int]
    STR_FIELD_NUMBER: _ClassVar[int]
    TAG_FIELD_NUMBER: _ClassVar[int]
    TRANSFER_LEN_FIELD_NUMBER: _ClassVar[int]
    GROUP_ID_FIELD_NUMBER: _ClassVar[int]
    STR_T_FIELD_NUMBER: _ClassVar[int]
    dev_name: str
    doorbell: int
    intr: int
    lba: int
    opcode: int
    str: str
    tag: int
    transfer_len: int
    group_id: int
    str_t: int
    def __init__(
        self,
        dev_name: _Optional[str] = ...,
        doorbell: _Optional[int] = ...,
        intr: _Optional[int] = ...,
        lba: _Optional[int] = ...,
        opcode: _Optional[int] = ...,
        str: _Optional[str] = ...,
        tag: _Optional[int] = ...,
        transfer_len: _Optional[int] = ...,
        group_id: _Optional[int] = ...,
        str_t: _Optional[int] = ...,
    ) -> None: ...

class UfshcdClkGatingFtraceEvent(_message.Message):
    __slots__ = ("dev_name", "state")
    DEV_NAME_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    dev_name: str
    state: int
    def __init__(self, dev_name: _Optional[str] = ..., state: _Optional[int] = ...) -> None: ...

class V4l2QbufFtraceEvent(_message.Message):
    __slots__ = (
        "bytesused",
        "field",
        "flags",
        "index",
        "minor",
        "sequence",
        "timecode_flags",
        "timecode_frames",
        "timecode_hours",
        "timecode_minutes",
        "timecode_seconds",
        "timecode_type",
        "timecode_userbits0",
        "timecode_userbits1",
        "timecode_userbits2",
        "timecode_userbits3",
        "timestamp",
        "type",
    )
    BYTESUSED_FIELD_NUMBER: _ClassVar[int]
    FIELD_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    MINOR_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FRAMES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_HOURS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_MINUTES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_SECONDS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_TYPE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS0_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS1_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS2_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS3_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    bytesused: int
    field: int
    flags: int
    index: int
    minor: int
    sequence: int
    timecode_flags: int
    timecode_frames: int
    timecode_hours: int
    timecode_minutes: int
    timecode_seconds: int
    timecode_type: int
    timecode_userbits0: int
    timecode_userbits1: int
    timecode_userbits2: int
    timecode_userbits3: int
    timestamp: int
    type: int
    def __init__(
        self,
        bytesused: _Optional[int] = ...,
        field: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        index: _Optional[int] = ...,
        minor: _Optional[int] = ...,
        sequence: _Optional[int] = ...,
        timecode_flags: _Optional[int] = ...,
        timecode_frames: _Optional[int] = ...,
        timecode_hours: _Optional[int] = ...,
        timecode_minutes: _Optional[int] = ...,
        timecode_seconds: _Optional[int] = ...,
        timecode_type: _Optional[int] = ...,
        timecode_userbits0: _Optional[int] = ...,
        timecode_userbits1: _Optional[int] = ...,
        timecode_userbits2: _Optional[int] = ...,
        timecode_userbits3: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
        type: _Optional[int] = ...,
    ) -> None: ...

class V4l2DqbufFtraceEvent(_message.Message):
    __slots__ = (
        "bytesused",
        "field",
        "flags",
        "index",
        "minor",
        "sequence",
        "timecode_flags",
        "timecode_frames",
        "timecode_hours",
        "timecode_minutes",
        "timecode_seconds",
        "timecode_type",
        "timecode_userbits0",
        "timecode_userbits1",
        "timecode_userbits2",
        "timecode_userbits3",
        "timestamp",
        "type",
    )
    BYTESUSED_FIELD_NUMBER: _ClassVar[int]
    FIELD_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    MINOR_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FRAMES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_HOURS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_MINUTES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_SECONDS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_TYPE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS0_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS1_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS2_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS3_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    bytesused: int
    field: int
    flags: int
    index: int
    minor: int
    sequence: int
    timecode_flags: int
    timecode_frames: int
    timecode_hours: int
    timecode_minutes: int
    timecode_seconds: int
    timecode_type: int
    timecode_userbits0: int
    timecode_userbits1: int
    timecode_userbits2: int
    timecode_userbits3: int
    timestamp: int
    type: int
    def __init__(
        self,
        bytesused: _Optional[int] = ...,
        field: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        index: _Optional[int] = ...,
        minor: _Optional[int] = ...,
        sequence: _Optional[int] = ...,
        timecode_flags: _Optional[int] = ...,
        timecode_frames: _Optional[int] = ...,
        timecode_hours: _Optional[int] = ...,
        timecode_minutes: _Optional[int] = ...,
        timecode_seconds: _Optional[int] = ...,
        timecode_type: _Optional[int] = ...,
        timecode_userbits0: _Optional[int] = ...,
        timecode_userbits1: _Optional[int] = ...,
        timecode_userbits2: _Optional[int] = ...,
        timecode_userbits3: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
        type: _Optional[int] = ...,
    ) -> None: ...

class Vb2V4l2BufQueueFtraceEvent(_message.Message):
    __slots__ = (
        "field",
        "flags",
        "minor",
        "sequence",
        "timecode_flags",
        "timecode_frames",
        "timecode_hours",
        "timecode_minutes",
        "timecode_seconds",
        "timecode_type",
        "timecode_userbits0",
        "timecode_userbits1",
        "timecode_userbits2",
        "timecode_userbits3",
        "timestamp",
    )
    FIELD_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    MINOR_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FRAMES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_HOURS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_MINUTES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_SECONDS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_TYPE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS0_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS1_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS2_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS3_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    field: int
    flags: int
    minor: int
    sequence: int
    timecode_flags: int
    timecode_frames: int
    timecode_hours: int
    timecode_minutes: int
    timecode_seconds: int
    timecode_type: int
    timecode_userbits0: int
    timecode_userbits1: int
    timecode_userbits2: int
    timecode_userbits3: int
    timestamp: int
    def __init__(
        self,
        field: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        minor: _Optional[int] = ...,
        sequence: _Optional[int] = ...,
        timecode_flags: _Optional[int] = ...,
        timecode_frames: _Optional[int] = ...,
        timecode_hours: _Optional[int] = ...,
        timecode_minutes: _Optional[int] = ...,
        timecode_seconds: _Optional[int] = ...,
        timecode_type: _Optional[int] = ...,
        timecode_userbits0: _Optional[int] = ...,
        timecode_userbits1: _Optional[int] = ...,
        timecode_userbits2: _Optional[int] = ...,
        timecode_userbits3: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
    ) -> None: ...

class Vb2V4l2BufDoneFtraceEvent(_message.Message):
    __slots__ = (
        "field",
        "flags",
        "minor",
        "sequence",
        "timecode_flags",
        "timecode_frames",
        "timecode_hours",
        "timecode_minutes",
        "timecode_seconds",
        "timecode_type",
        "timecode_userbits0",
        "timecode_userbits1",
        "timecode_userbits2",
        "timecode_userbits3",
        "timestamp",
    )
    FIELD_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    MINOR_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FRAMES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_HOURS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_MINUTES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_SECONDS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_TYPE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS0_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS1_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS2_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS3_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    field: int
    flags: int
    minor: int
    sequence: int
    timecode_flags: int
    timecode_frames: int
    timecode_hours: int
    timecode_minutes: int
    timecode_seconds: int
    timecode_type: int
    timecode_userbits0: int
    timecode_userbits1: int
    timecode_userbits2: int
    timecode_userbits3: int
    timestamp: int
    def __init__(
        self,
        field: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        minor: _Optional[int] = ...,
        sequence: _Optional[int] = ...,
        timecode_flags: _Optional[int] = ...,
        timecode_frames: _Optional[int] = ...,
        timecode_hours: _Optional[int] = ...,
        timecode_minutes: _Optional[int] = ...,
        timecode_seconds: _Optional[int] = ...,
        timecode_type: _Optional[int] = ...,
        timecode_userbits0: _Optional[int] = ...,
        timecode_userbits1: _Optional[int] = ...,
        timecode_userbits2: _Optional[int] = ...,
        timecode_userbits3: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
    ) -> None: ...

class Vb2V4l2QbufFtraceEvent(_message.Message):
    __slots__ = (
        "field",
        "flags",
        "minor",
        "sequence",
        "timecode_flags",
        "timecode_frames",
        "timecode_hours",
        "timecode_minutes",
        "timecode_seconds",
        "timecode_type",
        "timecode_userbits0",
        "timecode_userbits1",
        "timecode_userbits2",
        "timecode_userbits3",
        "timestamp",
    )
    FIELD_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    MINOR_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FRAMES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_HOURS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_MINUTES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_SECONDS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_TYPE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS0_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS1_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS2_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS3_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    field: int
    flags: int
    minor: int
    sequence: int
    timecode_flags: int
    timecode_frames: int
    timecode_hours: int
    timecode_minutes: int
    timecode_seconds: int
    timecode_type: int
    timecode_userbits0: int
    timecode_userbits1: int
    timecode_userbits2: int
    timecode_userbits3: int
    timestamp: int
    def __init__(
        self,
        field: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        minor: _Optional[int] = ...,
        sequence: _Optional[int] = ...,
        timecode_flags: _Optional[int] = ...,
        timecode_frames: _Optional[int] = ...,
        timecode_hours: _Optional[int] = ...,
        timecode_minutes: _Optional[int] = ...,
        timecode_seconds: _Optional[int] = ...,
        timecode_type: _Optional[int] = ...,
        timecode_userbits0: _Optional[int] = ...,
        timecode_userbits1: _Optional[int] = ...,
        timecode_userbits2: _Optional[int] = ...,
        timecode_userbits3: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
    ) -> None: ...

class Vb2V4l2DqbufFtraceEvent(_message.Message):
    __slots__ = (
        "field",
        "flags",
        "minor",
        "sequence",
        "timecode_flags",
        "timecode_frames",
        "timecode_hours",
        "timecode_minutes",
        "timecode_seconds",
        "timecode_type",
        "timecode_userbits0",
        "timecode_userbits1",
        "timecode_userbits2",
        "timecode_userbits3",
        "timestamp",
    )
    FIELD_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    MINOR_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_FRAMES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_HOURS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_MINUTES_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_SECONDS_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_TYPE_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS0_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS1_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS2_FIELD_NUMBER: _ClassVar[int]
    TIMECODE_USERBITS3_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    field: int
    flags: int
    minor: int
    sequence: int
    timecode_flags: int
    timecode_frames: int
    timecode_hours: int
    timecode_minutes: int
    timecode_seconds: int
    timecode_type: int
    timecode_userbits0: int
    timecode_userbits1: int
    timecode_userbits2: int
    timecode_userbits3: int
    timestamp: int
    def __init__(
        self,
        field: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        minor: _Optional[int] = ...,
        sequence: _Optional[int] = ...,
        timecode_flags: _Optional[int] = ...,
        timecode_frames: _Optional[int] = ...,
        timecode_hours: _Optional[int] = ...,
        timecode_minutes: _Optional[int] = ...,
        timecode_seconds: _Optional[int] = ...,
        timecode_type: _Optional[int] = ...,
        timecode_userbits0: _Optional[int] = ...,
        timecode_userbits1: _Optional[int] = ...,
        timecode_userbits2: _Optional[int] = ...,
        timecode_userbits3: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
    ) -> None: ...

class VirtioGpuCmdQueueFtraceEvent(_message.Message):
    __slots__ = ("ctx_id", "dev", "fence_id", "flags", "name", "num_free", "seqno", "type", "vq")
    CTX_ID_FIELD_NUMBER: _ClassVar[int]
    DEV_FIELD_NUMBER: _ClassVar[int]
    FENCE_ID_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    NUM_FREE_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    VQ_FIELD_NUMBER: _ClassVar[int]
    ctx_id: int
    dev: int
    fence_id: int
    flags: int
    name: str
    num_free: int
    seqno: int
    type: int
    vq: int
    def __init__(
        self,
        ctx_id: _Optional[int] = ...,
        dev: _Optional[int] = ...,
        fence_id: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        name: _Optional[str] = ...,
        num_free: _Optional[int] = ...,
        seqno: _Optional[int] = ...,
        type: _Optional[int] = ...,
        vq: _Optional[int] = ...,
    ) -> None: ...

class VirtioGpuCmdResponseFtraceEvent(_message.Message):
    __slots__ = ("ctx_id", "dev", "fence_id", "flags", "name", "num_free", "seqno", "type", "vq")
    CTX_ID_FIELD_NUMBER: _ClassVar[int]
    DEV_FIELD_NUMBER: _ClassVar[int]
    FENCE_ID_FIELD_NUMBER: _ClassVar[int]
    FLAGS_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    NUM_FREE_FIELD_NUMBER: _ClassVar[int]
    SEQNO_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    VQ_FIELD_NUMBER: _ClassVar[int]
    ctx_id: int
    dev: int
    fence_id: int
    flags: int
    name: str
    num_free: int
    seqno: int
    type: int
    vq: int
    def __init__(
        self,
        ctx_id: _Optional[int] = ...,
        dev: _Optional[int] = ...,
        fence_id: _Optional[int] = ...,
        flags: _Optional[int] = ...,
        name: _Optional[str] = ...,
        num_free: _Optional[int] = ...,
        seqno: _Optional[int] = ...,
        type: _Optional[int] = ...,
        vq: _Optional[int] = ...,
    ) -> None: ...

class VirtioVideoCmdFtraceEvent(_message.Message):
    __slots__ = ("stream_id", "type")
    STREAM_ID_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    stream_id: int
    type: int
    def __init__(self, stream_id: _Optional[int] = ..., type: _Optional[int] = ...) -> None: ...

class VirtioVideoCmdDoneFtraceEvent(_message.Message):
    __slots__ = ("stream_id", "type")
    STREAM_ID_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    stream_id: int
    type: int
    def __init__(self, stream_id: _Optional[int] = ..., type: _Optional[int] = ...) -> None: ...

class VirtioVideoResourceQueueFtraceEvent(_message.Message):
    __slots__ = (
        "data_size0",
        "data_size1",
        "data_size2",
        "data_size3",
        "queue_type",
        "resource_id",
        "stream_id",
        "timestamp",
    )
    DATA_SIZE0_FIELD_NUMBER: _ClassVar[int]
    DATA_SIZE1_FIELD_NUMBER: _ClassVar[int]
    DATA_SIZE2_FIELD_NUMBER: _ClassVar[int]
    DATA_SIZE3_FIELD_NUMBER: _ClassVar[int]
    QUEUE_TYPE_FIELD_NUMBER: _ClassVar[int]
    RESOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    STREAM_ID_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    data_size0: int
    data_size1: int
    data_size2: int
    data_size3: int
    queue_type: int
    resource_id: int
    stream_id: int
    timestamp: int
    def __init__(
        self,
        data_size0: _Optional[int] = ...,
        data_size1: _Optional[int] = ...,
        data_size2: _Optional[int] = ...,
        data_size3: _Optional[int] = ...,
        queue_type: _Optional[int] = ...,
        resource_id: _Optional[int] = ...,
        stream_id: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
    ) -> None: ...

class VirtioVideoResourceQueueDoneFtraceEvent(_message.Message):
    __slots__ = (
        "data_size0",
        "data_size1",
        "data_size2",
        "data_size3",
        "queue_type",
        "resource_id",
        "stream_id",
        "timestamp",
    )
    DATA_SIZE0_FIELD_NUMBER: _ClassVar[int]
    DATA_SIZE1_FIELD_NUMBER: _ClassVar[int]
    DATA_SIZE2_FIELD_NUMBER: _ClassVar[int]
    DATA_SIZE3_FIELD_NUMBER: _ClassVar[int]
    QUEUE_TYPE_FIELD_NUMBER: _ClassVar[int]
    RESOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    STREAM_ID_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    data_size0: int
    data_size1: int
    data_size2: int
    data_size3: int
    queue_type: int
    resource_id: int
    stream_id: int
    timestamp: int
    def __init__(
        self,
        data_size0: _Optional[int] = ...,
        data_size1: _Optional[int] = ...,
        data_size2: _Optional[int] = ...,
        data_size3: _Optional[int] = ...,
        queue_type: _Optional[int] = ...,
        resource_id: _Optional[int] = ...,
        stream_id: _Optional[int] = ...,
        timestamp: _Optional[int] = ...,
    ) -> None: ...

class MmVmscanDirectReclaimBeginFtraceEvent(_message.Message):
    __slots__ = ("order", "may_writepage", "gfp_flags")
    ORDER_FIELD_NUMBER: _ClassVar[int]
    MAY_WRITEPAGE_FIELD_NUMBER: _ClassVar[int]
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    order: int
    may_writepage: int
    gfp_flags: int
    def __init__(
        self, order: _Optional[int] = ..., may_writepage: _Optional[int] = ..., gfp_flags: _Optional[int] = ...
    ) -> None: ...

class MmVmscanDirectReclaimEndFtraceEvent(_message.Message):
    __slots__ = ("nr_reclaimed",)
    NR_RECLAIMED_FIELD_NUMBER: _ClassVar[int]
    nr_reclaimed: int
    def __init__(self, nr_reclaimed: _Optional[int] = ...) -> None: ...

class MmVmscanKswapdWakeFtraceEvent(_message.Message):
    __slots__ = ("nid", "order", "zid")
    NID_FIELD_NUMBER: _ClassVar[int]
    ORDER_FIELD_NUMBER: _ClassVar[int]
    ZID_FIELD_NUMBER: _ClassVar[int]
    nid: int
    order: int
    zid: int
    def __init__(self, nid: _Optional[int] = ..., order: _Optional[int] = ..., zid: _Optional[int] = ...) -> None: ...

class MmVmscanKswapdSleepFtraceEvent(_message.Message):
    __slots__ = ("nid",)
    NID_FIELD_NUMBER: _ClassVar[int]
    nid: int
    def __init__(self, nid: _Optional[int] = ...) -> None: ...

class MmShrinkSlabStartFtraceEvent(_message.Message):
    __slots__ = (
        "cache_items",
        "delta",
        "gfp_flags",
        "lru_pgs",
        "nr_objects_to_shrink",
        "pgs_scanned",
        "shr",
        "shrink",
        "total_scan",
        "nid",
        "priority",
    )
    CACHE_ITEMS_FIELD_NUMBER: _ClassVar[int]
    DELTA_FIELD_NUMBER: _ClassVar[int]
    GFP_FLAGS_FIELD_NUMBER: _ClassVar[int]
    LRU_PGS_FIELD_NUMBER: _ClassVar[int]
    NR_OBJECTS_TO_SHRINK_FIELD_NUMBER: _ClassVar[int]
    PGS_SCANNED_FIELD_NUMBER: _ClassVar[int]
    SHR_FIELD_NUMBER: _ClassVar[int]
    SHRINK_FIELD_NUMBER: _ClassVar[int]
    TOTAL_SCAN_FIELD_NUMBER: _ClassVar[int]
    NID_FIELD_NUMBER: _ClassVar[int]
    PRIORITY_FIELD_NUMBER: _ClassVar[int]
    cache_items: int
    delta: int
    gfp_flags: int
    lru_pgs: int
    nr_objects_to_shrink: int
    pgs_scanned: int
    shr: int
    shrink: int
    total_scan: int
    nid: int
    priority: int
    def __init__(
        self,
        cache_items: _Optional[int] = ...,
        delta: _Optional[int] = ...,
        gfp_flags: _Optional[int] = ...,
        lru_pgs: _Optional[int] = ...,
        nr_objects_to_shrink: _Optional[int] = ...,
        pgs_scanned: _Optional[int] = ...,
        shr: _Optional[int] = ...,
        shrink: _Optional[int] = ...,
        total_scan: _Optional[int] = ...,
        nid: _Optional[int] = ...,
        priority: _Optional[int] = ...,
    ) -> None: ...

class MmShrinkSlabEndFtraceEvent(_message.Message):
    __slots__ = ("new_scan", "retval", "shr", "shrink", "total_scan", "unused_scan", "nid")
    NEW_SCAN_FIELD_NUMBER: _ClassVar[int]
    RETVAL_FIELD_NUMBER: _ClassVar[int]
    SHR_FIELD_NUMBER: _ClassVar[int]
    SHRINK_FIELD_NUMBER: _ClassVar[int]
    TOTAL_SCAN_FIELD_NUMBER: _ClassVar[int]
    UNUSED_SCAN_FIELD_NUMBER: _ClassVar[int]
    NID_FIELD_NUMBER: _ClassVar[int]
    new_scan: int
    retval: int
    shr: int
    shrink: int
    total_scan: int
    unused_scan: int
    nid: int
    def __init__(
        self,
        new_scan: _Optional[int] = ...,
        retval: _Optional[int] = ...,
        shr: _Optional[int] = ...,
        shrink: _Optional[int] = ...,
        total_scan: _Optional[int] = ...,
        unused_scan: _Optional[int] = ...,
        nid: _Optional[int] = ...,
    ) -> None: ...

class WorkqueueActivateWorkFtraceEvent(_message.Message):
    __slots__ = ("work",)
    WORK_FIELD_NUMBER: _ClassVar[int]
    work: int
    def __init__(self, work: _Optional[int] = ...) -> None: ...

class WorkqueueExecuteEndFtraceEvent(_message.Message):
    __slots__ = ("work", "function")
    WORK_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_FIELD_NUMBER: _ClassVar[int]
    work: int
    function: int
    def __init__(self, work: _Optional[int] = ..., function: _Optional[int] = ...) -> None: ...

class WorkqueueExecuteStartFtraceEvent(_message.Message):
    __slots__ = ("work", "function")
    WORK_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_FIELD_NUMBER: _ClassVar[int]
    work: int
    function: int
    def __init__(self, work: _Optional[int] = ..., function: _Optional[int] = ...) -> None: ...

class WorkqueueQueueWorkFtraceEvent(_message.Message):
    __slots__ = ("work", "function", "workqueue", "req_cpu", "cpu")
    WORK_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_FIELD_NUMBER: _ClassVar[int]
    WORKQUEUE_FIELD_NUMBER: _ClassVar[int]
    REQ_CPU_FIELD_NUMBER: _ClassVar[int]
    CPU_FIELD_NUMBER: _ClassVar[int]
    work: int
    function: int
    workqueue: int
    req_cpu: int
    cpu: int
    def __init__(
        self,
        work: _Optional[int] = ...,
        function: _Optional[int] = ...,
        workqueue: _Optional[int] = ...,
        req_cpu: _Optional[int] = ...,
        cpu: _Optional[int] = ...,
    ) -> None: ...

class FtraceEvent(_message.Message):
    __slots__ = (
        "timestamp",
        "pid",
        "common_flags",
        "print",
        "sched_switch",
        "cpu_frequency",
        "cpu_frequency_limits",
        "cpu_idle",
        "clock_enable",
        "clock_disable",
        "clock_set_rate",
        "sched_wakeup",
        "sched_blocked_reason",
        "sched_cpu_hotplug",
        "sched_waking",
        "ipi_entry",
        "ipi_exit",
        "ipi_raise",
        "softirq_entry",
        "softirq_exit",
        "softirq_raise",
        "i2c_read",
        "i2c_write",
        "i2c_result",
        "i2c_reply",
        "smbus_read",
        "smbus_write",
        "smbus_result",
        "smbus_reply",
        "lowmemory_kill",
        "irq_handler_entry",
        "irq_handler_exit",
        "sync_pt",
        "sync_timeline",
        "sync_wait",
        "ext4_da_write_begin",
        "ext4_da_write_end",
        "ext4_sync_file_enter",
        "ext4_sync_file_exit",
        "block_rq_issue",
        "mm_vmscan_direct_reclaim_begin",
        "mm_vmscan_direct_reclaim_end",
        "mm_vmscan_kswapd_wake",
        "mm_vmscan_kswapd_sleep",
        "binder_transaction",
        "binder_transaction_received",
        "binder_set_priority",
        "binder_lock",
        "binder_locked",
        "binder_unlock",
        "workqueue_activate_work",
        "workqueue_execute_end",
        "workqueue_execute_start",
        "workqueue_queue_work",
        "regulator_disable",
        "regulator_disable_complete",
        "regulator_enable",
        "regulator_enable_complete",
        "regulator_enable_delay",
        "regulator_set_voltage",
        "regulator_set_voltage_complete",
        "cgroup_attach_task",
        "cgroup_mkdir",
        "cgroup_remount",
        "cgroup_rmdir",
        "cgroup_transfer_tasks",
        "cgroup_destroy_root",
        "cgroup_release",
        "cgroup_rename",
        "cgroup_setup_root",
        "mdp_cmd_kickoff",
        "mdp_commit",
        "mdp_perf_set_ot",
        "mdp_sspp_change",
        "tracing_mark_write",
        "mdp_cmd_pingpong_done",
        "mdp_compare_bw",
        "mdp_perf_set_panic_luts",
        "mdp_sspp_set",
        "mdp_cmd_readptr_done",
        "mdp_misr_crc",
        "mdp_perf_set_qos_luts",
        "mdp_trace_counter",
        "mdp_cmd_release_bw",
        "mdp_mixer_update",
        "mdp_perf_set_wm_levels",
        "mdp_video_underrun_done",
        "mdp_cmd_wait_pingpong",
        "mdp_perf_prefill_calc",
        "mdp_perf_update_bus",
        "rotator_bw_ao_as_context",
        "mm_filemap_add_to_page_cache",
        "mm_filemap_delete_from_page_cache",
        "mm_compaction_begin",
        "mm_compaction_defer_compaction",
        "mm_compaction_deferred",
        "mm_compaction_defer_reset",
        "mm_compaction_end",
        "mm_compaction_finished",
        "mm_compaction_isolate_freepages",
        "mm_compaction_isolate_migratepages",
        "mm_compaction_kcompactd_sleep",
        "mm_compaction_kcompactd_wake",
        "mm_compaction_migratepages",
        "mm_compaction_suitable",
        "mm_compaction_try_to_compact_pages",
        "mm_compaction_wakeup_kcompactd",
        "suspend_resume",
        "sched_wakeup_new",
        "block_bio_backmerge",
        "block_bio_bounce",
        "block_bio_complete",
        "block_bio_frontmerge",
        "block_bio_queue",
        "block_bio_remap",
        "block_dirty_buffer",
        "block_getrq",
        "block_plug",
        "block_rq_abort",
        "block_rq_complete",
        "block_rq_insert",
        "block_rq_remap",
        "block_rq_requeue",
        "block_sleeprq",
        "block_split",
        "block_touch_buffer",
        "block_unplug",
        "ext4_alloc_da_blocks",
        "ext4_allocate_blocks",
        "ext4_allocate_inode",
        "ext4_begin_ordered_truncate",
        "ext4_collapse_range",
        "ext4_da_release_space",
        "ext4_da_reserve_space",
        "ext4_da_update_reserve_space",
        "ext4_da_write_pages",
        "ext4_da_write_pages_extent",
        "ext4_direct_IO_enter",
        "ext4_direct_IO_exit",
        "ext4_discard_blocks",
        "ext4_discard_preallocations",
        "ext4_drop_inode",
        "ext4_es_cache_extent",
        "ext4_es_find_delayed_extent_range_enter",
        "ext4_es_find_delayed_extent_range_exit",
        "ext4_es_insert_extent",
        "ext4_es_lookup_extent_enter",
        "ext4_es_lookup_extent_exit",
        "ext4_es_remove_extent",
        "ext4_es_shrink",
        "ext4_es_shrink_count",
        "ext4_es_shrink_scan_enter",
        "ext4_es_shrink_scan_exit",
        "ext4_evict_inode",
        "ext4_ext_convert_to_initialized_enter",
        "ext4_ext_convert_to_initialized_fastpath",
        "ext4_ext_handle_unwritten_extents",
        "ext4_ext_in_cache",
        "ext4_ext_load_extent",
        "ext4_ext_map_blocks_enter",
        "ext4_ext_map_blocks_exit",
        "ext4_ext_put_in_cache",
        "ext4_ext_remove_space",
        "ext4_ext_remove_space_done",
        "ext4_ext_rm_idx",
        "ext4_ext_rm_leaf",
        "ext4_ext_show_extent",
        "ext4_fallocate_enter",
        "ext4_fallocate_exit",
        "ext4_find_delalloc_range",
        "ext4_forget",
        "ext4_free_blocks",
        "ext4_free_inode",
        "ext4_get_implied_cluster_alloc_exit",
        "ext4_get_reserved_cluster_alloc",
        "ext4_ind_map_blocks_enter",
        "ext4_ind_map_blocks_exit",
        "ext4_insert_range",
        "ext4_invalidatepage",
        "ext4_journal_start",
        "ext4_journal_start_reserved",
        "ext4_journalled_invalidatepage",
        "ext4_journalled_write_end",
        "ext4_load_inode",
        "ext4_load_inode_bitmap",
        "ext4_mark_inode_dirty",
        "ext4_mb_bitmap_load",
        "ext4_mb_buddy_bitmap_load",
        "ext4_mb_discard_preallocations",
        "ext4_mb_new_group_pa",
        "ext4_mb_new_inode_pa",
        "ext4_mb_release_group_pa",
        "ext4_mb_release_inode_pa",
        "ext4_mballoc_alloc",
        "ext4_mballoc_discard",
        "ext4_mballoc_free",
        "ext4_mballoc_prealloc",
        "ext4_other_inode_update_time",
        "ext4_punch_hole",
        "ext4_read_block_bitmap_load",
        "ext4_readpage",
        "ext4_releasepage",
        "ext4_remove_blocks",
        "ext4_request_blocks",
        "ext4_request_inode",
        "ext4_sync_fs",
        "ext4_trim_all_free",
        "ext4_trim_extent",
        "ext4_truncate_enter",
        "ext4_truncate_exit",
        "ext4_unlink_enter",
        "ext4_unlink_exit",
        "ext4_write_begin",
        "ext4_write_end",
        "ext4_writepage",
        "ext4_writepages",
        "ext4_writepages_result",
        "ext4_zero_range",
        "task_newtask",
        "task_rename",
        "sched_process_exec",
        "sched_process_exit",
        "sched_process_fork",
        "sched_process_free",
        "sched_process_hang",
        "sched_process_wait",
        "f2fs_do_submit_bio",
        "f2fs_evict_inode",
        "f2fs_fallocate",
        "f2fs_get_data_block",
        "f2fs_get_victim",
        "f2fs_iget",
        "f2fs_iget_exit",
        "f2fs_new_inode",
        "f2fs_readpage",
        "f2fs_reserve_new_block",
        "f2fs_set_page_dirty",
        "f2fs_submit_write_page",
        "f2fs_sync_file_enter",
        "f2fs_sync_file_exit",
        "f2fs_sync_fs",
        "f2fs_truncate",
        "f2fs_truncate_blocks_enter",
        "f2fs_truncate_blocks_exit",
        "f2fs_truncate_data_blocks_range",
        "f2fs_truncate_inode_blocks_enter",
        "f2fs_truncate_inode_blocks_exit",
        "f2fs_truncate_node",
        "f2fs_truncate_nodes_enter",
        "f2fs_truncate_nodes_exit",
        "f2fs_truncate_partial_nodes",
        "f2fs_unlink_enter",
        "f2fs_unlink_exit",
        "f2fs_vm_page_mkwrite",
        "f2fs_write_begin",
        "f2fs_write_checkpoint",
        "f2fs_write_end",
        "alloc_pages_iommu_end",
        "alloc_pages_iommu_fail",
        "alloc_pages_iommu_start",
        "alloc_pages_sys_end",
        "alloc_pages_sys_fail",
        "alloc_pages_sys_start",
        "dma_alloc_contiguous_retry",
        "iommu_map_range",
        "iommu_sec_ptbl_map_range_end",
        "iommu_sec_ptbl_map_range_start",
        "ion_alloc_buffer_end",
        "ion_alloc_buffer_fail",
        "ion_alloc_buffer_fallback",
        "ion_alloc_buffer_start",
        "ion_cp_alloc_retry",
        "ion_cp_secure_buffer_end",
        "ion_cp_secure_buffer_start",
        "ion_prefetching",
        "ion_secure_cma_add_to_pool_end",
        "ion_secure_cma_add_to_pool_start",
        "ion_secure_cma_allocate_end",
        "ion_secure_cma_allocate_start",
        "ion_secure_cma_shrink_pool_end",
        "ion_secure_cma_shrink_pool_start",
        "kfree",
        "kmalloc",
        "kmalloc_node",
        "kmem_cache_alloc",
        "kmem_cache_alloc_node",
        "kmem_cache_free",
        "migrate_pages_end",
        "migrate_pages_start",
        "migrate_retry",
        "mm_page_alloc",
        "mm_page_alloc_extfrag",
        "mm_page_alloc_zone_locked",
        "mm_page_free",
        "mm_page_free_batched",
        "mm_page_pcpu_drain",
        "rss_stat",
        "ion_heap_shrink",
        "ion_heap_grow",
        "fence_init",
        "fence_destroy",
        "fence_enable_signal",
        "fence_signaled",
        "clk_enable",
        "clk_disable",
        "clk_set_rate",
        "binder_transaction_alloc_buf",
        "signal_deliver",
        "signal_generate",
        "oom_score_adj_update",
        "generic",
        "mm_event_record",
        "sys_enter",
        "sys_exit",
        "zero",
        "gpu_frequency",
        "sde_tracing_mark_write",
        "mark_victim",
        "ion_stat",
        "ion_buffer_create",
        "ion_buffer_destroy",
        "scm_call_start",
        "scm_call_end",
        "gpu_mem_total",
        "thermal_temperature",
        "cdev_update",
        "cpuhp_exit",
        "cpuhp_multi_enter",
        "cpuhp_enter",
        "cpuhp_latency",
        "fastrpc_dma_stat",
        "dpu_tracing_mark_write",
        "g2d_tracing_mark_write",
        "mali_tracing_mark_write",
        "dma_heap_stat",
        "cpuhp_pause",
        "sched_pi_setprio",
        "sde_sde_evtlog",
        "sde_sde_perf_calc_crtc",
        "sde_sde_perf_crtc_update",
        "sde_sde_perf_set_qos_luts",
        "sde_sde_perf_update_bus",
        "rss_stat_throttled",
        "netif_receive_skb",
        "net_dev_xmit",
        "inet_sock_set_state",
        "tcp_retransmit_skb",
        "cros_ec_sensorhub_data",
        "napi_gro_receive_entry",
        "napi_gro_receive_exit",
        "kfree_skb",
        "kvm_access_fault",
        "kvm_ack_irq",
        "kvm_age_hva",
        "kvm_age_page",
        "kvm_arm_clear_debug",
        "kvm_arm_set_dreg32",
        "kvm_arm_set_regset",
        "kvm_arm_setup_debug",
        "kvm_entry",
        "kvm_exit",
        "kvm_fpu",
        "kvm_get_timer_map",
        "kvm_guest_fault",
        "kvm_handle_sys_reg",
        "kvm_hvc_arm64",
        "kvm_irq_line",
        "kvm_mmio",
        "kvm_mmio_emulate",
        "kvm_set_guest_debug",
        "kvm_set_irq",
        "kvm_set_spte_hva",
        "kvm_set_way_flush",
        "kvm_sys_access",
        "kvm_test_age_hva",
        "kvm_timer_emulate",
        "kvm_timer_hrtimer_expire",
        "kvm_timer_restore_state",
        "kvm_timer_save_state",
        "kvm_timer_update_irq",
        "kvm_toggle_cache",
        "kvm_unmap_hva_range",
        "kvm_userspace_exit",
        "kvm_vcpu_wakeup",
        "kvm_wfx_arm64",
        "trap_reg",
        "vgic_update_irq_pending",
        "wakeup_source_activate",
        "wakeup_source_deactivate",
        "ufshcd_command",
        "ufshcd_clk_gating",
        "console",
        "drm_vblank_event",
        "drm_vblank_event_delivered",
        "drm_sched_job",
        "drm_run_job",
        "drm_sched_process_job",
        "dma_fence_init",
        "dma_fence_emit",
        "dma_fence_signaled",
        "dma_fence_wait_start",
        "dma_fence_wait_end",
        "f2fs_iostat",
        "f2fs_iostat_latency",
        "sched_cpu_util_cfs",
        "v4l2_qbuf",
        "v4l2_dqbuf",
        "vb2_v4l2_buf_queue",
        "vb2_v4l2_buf_done",
        "vb2_v4l2_qbuf",
        "vb2_v4l2_dqbuf",
        "dsi_cmd_fifo_status",
        "dsi_rx",
        "dsi_tx",
        "android_fs_dataread_end",
        "android_fs_dataread_start",
        "android_fs_datawrite_end",
        "android_fs_datawrite_start",
        "android_fs_fsync_end",
        "android_fs_fsync_start",
        "funcgraph_entry",
        "funcgraph_exit",
        "virtio_video_cmd",
        "virtio_video_cmd_done",
        "virtio_video_resource_queue",
        "virtio_video_resource_queue_done",
        "mm_shrink_slab_start",
        "mm_shrink_slab_end",
        "trusty_smc",
        "trusty_smc_done",
        "trusty_std_call32",
        "trusty_std_call32_done",
        "trusty_share_memory",
        "trusty_share_memory_done",
        "trusty_reclaim_memory",
        "trusty_reclaim_memory_done",
        "trusty_irq",
        "trusty_ipc_handle_event",
        "trusty_ipc_connect",
        "trusty_ipc_connect_end",
        "trusty_ipc_write",
        "trusty_ipc_poll",
        "trusty_ipc_read",
        "trusty_ipc_read_end",
        "trusty_ipc_rx",
        "trusty_enqueue_nop",
        "cma_alloc_start",
        "cma_alloc_info",
        "lwis_tracing_mark_write",
        "virtio_gpu_cmd_queue",
        "virtio_gpu_cmd_response",
        "mali_mali_KCPU_CQS_SET",
        "mali_mali_KCPU_CQS_WAIT_START",
        "mali_mali_KCPU_CQS_WAIT_END",
        "mali_mali_KCPU_FENCE_SIGNAL",
        "mali_mali_KCPU_FENCE_WAIT_START",
        "mali_mali_KCPU_FENCE_WAIT_END",
        "hyp_enter",
        "hyp_exit",
        "host_hcall",
        "host_smc",
        "host_mem_abort",
        "suspend_resume_minimal",
        "mali_mali_CSF_INTERRUPT_START",
        "mali_mali_CSF_INTERRUPT_END",
        "samsung_tracing_mark_write",
        "binder_command",
        "binder_return",
        "sched_switch_with_ctrs",
        "gpu_work_period",
    )
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    COMMON_FLAGS_FIELD_NUMBER: _ClassVar[int]
    PRINT_FIELD_NUMBER: _ClassVar[int]
    SCHED_SWITCH_FIELD_NUMBER: _ClassVar[int]
    CPU_FREQUENCY_FIELD_NUMBER: _ClassVar[int]
    CPU_FREQUENCY_LIMITS_FIELD_NUMBER: _ClassVar[int]
    CPU_IDLE_FIELD_NUMBER: _ClassVar[int]
    CLOCK_ENABLE_FIELD_NUMBER: _ClassVar[int]
    CLOCK_DISABLE_FIELD_NUMBER: _ClassVar[int]
    CLOCK_SET_RATE_FIELD_NUMBER: _ClassVar[int]
    SCHED_WAKEUP_FIELD_NUMBER: _ClassVar[int]
    SCHED_BLOCKED_REASON_FIELD_NUMBER: _ClassVar[int]
    SCHED_CPU_HOTPLUG_FIELD_NUMBER: _ClassVar[int]
    SCHED_WAKING_FIELD_NUMBER: _ClassVar[int]
    IPI_ENTRY_FIELD_NUMBER: _ClassVar[int]
    IPI_EXIT_FIELD_NUMBER: _ClassVar[int]
    IPI_RAISE_FIELD_NUMBER: _ClassVar[int]
    SOFTIRQ_ENTRY_FIELD_NUMBER: _ClassVar[int]
    SOFTIRQ_EXIT_FIELD_NUMBER: _ClassVar[int]
    SOFTIRQ_RAISE_FIELD_NUMBER: _ClassVar[int]
    I2C_READ_FIELD_NUMBER: _ClassVar[int]
    I2C_WRITE_FIELD_NUMBER: _ClassVar[int]
    I2C_RESULT_FIELD_NUMBER: _ClassVar[int]
    I2C_REPLY_FIELD_NUMBER: _ClassVar[int]
    SMBUS_READ_FIELD_NUMBER: _ClassVar[int]
    SMBUS_WRITE_FIELD_NUMBER: _ClassVar[int]
    SMBUS_RESULT_FIELD_NUMBER: _ClassVar[int]
    SMBUS_REPLY_FIELD_NUMBER: _ClassVar[int]
    LOWMEMORY_KILL_FIELD_NUMBER: _ClassVar[int]
    IRQ_HANDLER_ENTRY_FIELD_NUMBER: _ClassVar[int]
    IRQ_HANDLER_EXIT_FIELD_NUMBER: _ClassVar[int]
    SYNC_PT_FIELD_NUMBER: _ClassVar[int]
    SYNC_TIMELINE_FIELD_NUMBER: _ClassVar[int]
    SYNC_WAIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_DA_WRITE_BEGIN_FIELD_NUMBER: _ClassVar[int]
    EXT4_DA_WRITE_END_FIELD_NUMBER: _ClassVar[int]
    EXT4_SYNC_FILE_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_SYNC_FILE_EXIT_FIELD_NUMBER: _ClassVar[int]
    BLOCK_RQ_ISSUE_FIELD_NUMBER: _ClassVar[int]
    MM_VMSCAN_DIRECT_RECLAIM_BEGIN_FIELD_NUMBER: _ClassVar[int]
    MM_VMSCAN_DIRECT_RECLAIM_END_FIELD_NUMBER: _ClassVar[int]
    MM_VMSCAN_KSWAPD_WAKE_FIELD_NUMBER: _ClassVar[int]
    MM_VMSCAN_KSWAPD_SLEEP_FIELD_NUMBER: _ClassVar[int]
    BINDER_TRANSACTION_FIELD_NUMBER: _ClassVar[int]
    BINDER_TRANSACTION_RECEIVED_FIELD_NUMBER: _ClassVar[int]
    BINDER_SET_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    BINDER_LOCK_FIELD_NUMBER: _ClassVar[int]
    BINDER_LOCKED_FIELD_NUMBER: _ClassVar[int]
    BINDER_UNLOCK_FIELD_NUMBER: _ClassVar[int]
    WORKQUEUE_ACTIVATE_WORK_FIELD_NUMBER: _ClassVar[int]
    WORKQUEUE_EXECUTE_END_FIELD_NUMBER: _ClassVar[int]
    WORKQUEUE_EXECUTE_START_FIELD_NUMBER: _ClassVar[int]
    WORKQUEUE_QUEUE_WORK_FIELD_NUMBER: _ClassVar[int]
    REGULATOR_DISABLE_FIELD_NUMBER: _ClassVar[int]
    REGULATOR_DISABLE_COMPLETE_FIELD_NUMBER: _ClassVar[int]
    REGULATOR_ENABLE_FIELD_NUMBER: _ClassVar[int]
    REGULATOR_ENABLE_COMPLETE_FIELD_NUMBER: _ClassVar[int]
    REGULATOR_ENABLE_DELAY_FIELD_NUMBER: _ClassVar[int]
    REGULATOR_SET_VOLTAGE_FIELD_NUMBER: _ClassVar[int]
    REGULATOR_SET_VOLTAGE_COMPLETE_FIELD_NUMBER: _ClassVar[int]
    CGROUP_ATTACH_TASK_FIELD_NUMBER: _ClassVar[int]
    CGROUP_MKDIR_FIELD_NUMBER: _ClassVar[int]
    CGROUP_REMOUNT_FIELD_NUMBER: _ClassVar[int]
    CGROUP_RMDIR_FIELD_NUMBER: _ClassVar[int]
    CGROUP_TRANSFER_TASKS_FIELD_NUMBER: _ClassVar[int]
    CGROUP_DESTROY_ROOT_FIELD_NUMBER: _ClassVar[int]
    CGROUP_RELEASE_FIELD_NUMBER: _ClassVar[int]
    CGROUP_RENAME_FIELD_NUMBER: _ClassVar[int]
    CGROUP_SETUP_ROOT_FIELD_NUMBER: _ClassVar[int]
    MDP_CMD_KICKOFF_FIELD_NUMBER: _ClassVar[int]
    MDP_COMMIT_FIELD_NUMBER: _ClassVar[int]
    MDP_PERF_SET_OT_FIELD_NUMBER: _ClassVar[int]
    MDP_SSPP_CHANGE_FIELD_NUMBER: _ClassVar[int]
    TRACING_MARK_WRITE_FIELD_NUMBER: _ClassVar[int]
    MDP_CMD_PINGPONG_DONE_FIELD_NUMBER: _ClassVar[int]
    MDP_COMPARE_BW_FIELD_NUMBER: _ClassVar[int]
    MDP_PERF_SET_PANIC_LUTS_FIELD_NUMBER: _ClassVar[int]
    MDP_SSPP_SET_FIELD_NUMBER: _ClassVar[int]
    MDP_CMD_READPTR_DONE_FIELD_NUMBER: _ClassVar[int]
    MDP_MISR_CRC_FIELD_NUMBER: _ClassVar[int]
    MDP_PERF_SET_QOS_LUTS_FIELD_NUMBER: _ClassVar[int]
    MDP_TRACE_COUNTER_FIELD_NUMBER: _ClassVar[int]
    MDP_CMD_RELEASE_BW_FIELD_NUMBER: _ClassVar[int]
    MDP_MIXER_UPDATE_FIELD_NUMBER: _ClassVar[int]
    MDP_PERF_SET_WM_LEVELS_FIELD_NUMBER: _ClassVar[int]
    MDP_VIDEO_UNDERRUN_DONE_FIELD_NUMBER: _ClassVar[int]
    MDP_CMD_WAIT_PINGPONG_FIELD_NUMBER: _ClassVar[int]
    MDP_PERF_PREFILL_CALC_FIELD_NUMBER: _ClassVar[int]
    MDP_PERF_UPDATE_BUS_FIELD_NUMBER: _ClassVar[int]
    ROTATOR_BW_AO_AS_CONTEXT_FIELD_NUMBER: _ClassVar[int]
    MM_FILEMAP_ADD_TO_PAGE_CACHE_FIELD_NUMBER: _ClassVar[int]
    MM_FILEMAP_DELETE_FROM_PAGE_CACHE_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_BEGIN_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_DEFER_COMPACTION_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_DEFERRED_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_DEFER_RESET_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_END_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_FINISHED_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_ISOLATE_FREEPAGES_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_ISOLATE_MIGRATEPAGES_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_KCOMPACTD_SLEEP_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_KCOMPACTD_WAKE_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_MIGRATEPAGES_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_SUITABLE_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_TRY_TO_COMPACT_PAGES_FIELD_NUMBER: _ClassVar[int]
    MM_COMPACTION_WAKEUP_KCOMPACTD_FIELD_NUMBER: _ClassVar[int]
    SUSPEND_RESUME_FIELD_NUMBER: _ClassVar[int]
    SCHED_WAKEUP_NEW_FIELD_NUMBER: _ClassVar[int]
    BLOCK_BIO_BACKMERGE_FIELD_NUMBER: _ClassVar[int]
    BLOCK_BIO_BOUNCE_FIELD_NUMBER: _ClassVar[int]
    BLOCK_BIO_COMPLETE_FIELD_NUMBER: _ClassVar[int]
    BLOCK_BIO_FRONTMERGE_FIELD_NUMBER: _ClassVar[int]
    BLOCK_BIO_QUEUE_FIELD_NUMBER: _ClassVar[int]
    BLOCK_BIO_REMAP_FIELD_NUMBER: _ClassVar[int]
    BLOCK_DIRTY_BUFFER_FIELD_NUMBER: _ClassVar[int]
    BLOCK_GETRQ_FIELD_NUMBER: _ClassVar[int]
    BLOCK_PLUG_FIELD_NUMBER: _ClassVar[int]
    BLOCK_RQ_ABORT_FIELD_NUMBER: _ClassVar[int]
    BLOCK_RQ_COMPLETE_FIELD_NUMBER: _ClassVar[int]
    BLOCK_RQ_INSERT_FIELD_NUMBER: _ClassVar[int]
    BLOCK_RQ_REMAP_FIELD_NUMBER: _ClassVar[int]
    BLOCK_RQ_REQUEUE_FIELD_NUMBER: _ClassVar[int]
    BLOCK_SLEEPRQ_FIELD_NUMBER: _ClassVar[int]
    BLOCK_SPLIT_FIELD_NUMBER: _ClassVar[int]
    BLOCK_TOUCH_BUFFER_FIELD_NUMBER: _ClassVar[int]
    BLOCK_UNPLUG_FIELD_NUMBER: _ClassVar[int]
    EXT4_ALLOC_DA_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    EXT4_ALLOCATE_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    EXT4_ALLOCATE_INODE_FIELD_NUMBER: _ClassVar[int]
    EXT4_BEGIN_ORDERED_TRUNCATE_FIELD_NUMBER: _ClassVar[int]
    EXT4_COLLAPSE_RANGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_DA_RELEASE_SPACE_FIELD_NUMBER: _ClassVar[int]
    EXT4_DA_RESERVE_SPACE_FIELD_NUMBER: _ClassVar[int]
    EXT4_DA_UPDATE_RESERVE_SPACE_FIELD_NUMBER: _ClassVar[int]
    EXT4_DA_WRITE_PAGES_FIELD_NUMBER: _ClassVar[int]
    EXT4_DA_WRITE_PAGES_EXTENT_FIELD_NUMBER: _ClassVar[int]
    EXT4_DIRECT_IO_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_DIRECT_IO_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_DISCARD_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    EXT4_DISCARD_PREALLOCATIONS_FIELD_NUMBER: _ClassVar[int]
    EXT4_DROP_INODE_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_CACHE_EXTENT_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_FIND_DELAYED_EXTENT_RANGE_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_FIND_DELAYED_EXTENT_RANGE_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_INSERT_EXTENT_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_LOOKUP_EXTENT_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_LOOKUP_EXTENT_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_REMOVE_EXTENT_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_SHRINK_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_SHRINK_COUNT_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_SHRINK_SCAN_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_ES_SHRINK_SCAN_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_EVICT_INODE_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_CONVERT_TO_INITIALIZED_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_CONVERT_TO_INITIALIZED_FASTPATH_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_HANDLE_UNWRITTEN_EXTENTS_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_IN_CACHE_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_LOAD_EXTENT_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_MAP_BLOCKS_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_MAP_BLOCKS_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_PUT_IN_CACHE_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_REMOVE_SPACE_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_REMOVE_SPACE_DONE_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_RM_IDX_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_RM_LEAF_FIELD_NUMBER: _ClassVar[int]
    EXT4_EXT_SHOW_EXTENT_FIELD_NUMBER: _ClassVar[int]
    EXT4_FALLOCATE_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_FALLOCATE_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_FIND_DELALLOC_RANGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_FORGET_FIELD_NUMBER: _ClassVar[int]
    EXT4_FREE_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    EXT4_FREE_INODE_FIELD_NUMBER: _ClassVar[int]
    EXT4_GET_IMPLIED_CLUSTER_ALLOC_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_GET_RESERVED_CLUSTER_ALLOC_FIELD_NUMBER: _ClassVar[int]
    EXT4_IND_MAP_BLOCKS_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_IND_MAP_BLOCKS_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_INSERT_RANGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_INVALIDATEPAGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_JOURNAL_START_FIELD_NUMBER: _ClassVar[int]
    EXT4_JOURNAL_START_RESERVED_FIELD_NUMBER: _ClassVar[int]
    EXT4_JOURNALLED_INVALIDATEPAGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_JOURNALLED_WRITE_END_FIELD_NUMBER: _ClassVar[int]
    EXT4_LOAD_INODE_FIELD_NUMBER: _ClassVar[int]
    EXT4_LOAD_INODE_BITMAP_FIELD_NUMBER: _ClassVar[int]
    EXT4_MARK_INODE_DIRTY_FIELD_NUMBER: _ClassVar[int]
    EXT4_MB_BITMAP_LOAD_FIELD_NUMBER: _ClassVar[int]
    EXT4_MB_BUDDY_BITMAP_LOAD_FIELD_NUMBER: _ClassVar[int]
    EXT4_MB_DISCARD_PREALLOCATIONS_FIELD_NUMBER: _ClassVar[int]
    EXT4_MB_NEW_GROUP_PA_FIELD_NUMBER: _ClassVar[int]
    EXT4_MB_NEW_INODE_PA_FIELD_NUMBER: _ClassVar[int]
    EXT4_MB_RELEASE_GROUP_PA_FIELD_NUMBER: _ClassVar[int]
    EXT4_MB_RELEASE_INODE_PA_FIELD_NUMBER: _ClassVar[int]
    EXT4_MBALLOC_ALLOC_FIELD_NUMBER: _ClassVar[int]
    EXT4_MBALLOC_DISCARD_FIELD_NUMBER: _ClassVar[int]
    EXT4_MBALLOC_FREE_FIELD_NUMBER: _ClassVar[int]
    EXT4_MBALLOC_PREALLOC_FIELD_NUMBER: _ClassVar[int]
    EXT4_OTHER_INODE_UPDATE_TIME_FIELD_NUMBER: _ClassVar[int]
    EXT4_PUNCH_HOLE_FIELD_NUMBER: _ClassVar[int]
    EXT4_READ_BLOCK_BITMAP_LOAD_FIELD_NUMBER: _ClassVar[int]
    EXT4_READPAGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_RELEASEPAGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_REMOVE_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    EXT4_REQUEST_BLOCKS_FIELD_NUMBER: _ClassVar[int]
    EXT4_REQUEST_INODE_FIELD_NUMBER: _ClassVar[int]
    EXT4_SYNC_FS_FIELD_NUMBER: _ClassVar[int]
    EXT4_TRIM_ALL_FREE_FIELD_NUMBER: _ClassVar[int]
    EXT4_TRIM_EXTENT_FIELD_NUMBER: _ClassVar[int]
    EXT4_TRUNCATE_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_TRUNCATE_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_UNLINK_ENTER_FIELD_NUMBER: _ClassVar[int]
    EXT4_UNLINK_EXIT_FIELD_NUMBER: _ClassVar[int]
    EXT4_WRITE_BEGIN_FIELD_NUMBER: _ClassVar[int]
    EXT4_WRITE_END_FIELD_NUMBER: _ClassVar[int]
    EXT4_WRITEPAGE_FIELD_NUMBER: _ClassVar[int]
    EXT4_WRITEPAGES_FIELD_NUMBER: _ClassVar[int]
    EXT4_WRITEPAGES_RESULT_FIELD_NUMBER: _ClassVar[int]
    EXT4_ZERO_RANGE_FIELD_NUMBER: _ClassVar[int]
    TASK_NEWTASK_FIELD_NUMBER: _ClassVar[int]
    TASK_RENAME_FIELD_NUMBER: _ClassVar[int]
    SCHED_PROCESS_EXEC_FIELD_NUMBER: _ClassVar[int]
    SCHED_PROCESS_EXIT_FIELD_NUMBER: _ClassVar[int]
    SCHED_PROCESS_FORK_FIELD_NUMBER: _ClassVar[int]
    SCHED_PROCESS_FREE_FIELD_NUMBER: _ClassVar[int]
    SCHED_PROCESS_HANG_FIELD_NUMBER: _ClassVar[int]
    SCHED_PROCESS_WAIT_FIELD_NUMBER: _ClassVar[int]
    F2FS_DO_SUBMIT_BIO_FIELD_NUMBER: _ClassVar[int]
    F2FS_EVICT_INODE_FIELD_NUMBER: _ClassVar[int]
    F2FS_FALLOCATE_FIELD_NUMBER: _ClassVar[int]
    F2FS_GET_DATA_BLOCK_FIELD_NUMBER: _ClassVar[int]
    F2FS_GET_VICTIM_FIELD_NUMBER: _ClassVar[int]
    F2FS_IGET_FIELD_NUMBER: _ClassVar[int]
    F2FS_IGET_EXIT_FIELD_NUMBER: _ClassVar[int]
    F2FS_NEW_INODE_FIELD_NUMBER: _ClassVar[int]
    F2FS_READPAGE_FIELD_NUMBER: _ClassVar[int]
    F2FS_RESERVE_NEW_BLOCK_FIELD_NUMBER: _ClassVar[int]
    F2FS_SET_PAGE_DIRTY_FIELD_NUMBER: _ClassVar[int]
    F2FS_SUBMIT_WRITE_PAGE_FIELD_NUMBER: _ClassVar[int]
    F2FS_SYNC_FILE_ENTER_FIELD_NUMBER: _ClassVar[int]
    F2FS_SYNC_FILE_EXIT_FIELD_NUMBER: _ClassVar[int]
    F2FS_SYNC_FS_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_BLOCKS_ENTER_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_BLOCKS_EXIT_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_DATA_BLOCKS_RANGE_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_INODE_BLOCKS_ENTER_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_INODE_BLOCKS_EXIT_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_NODE_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_NODES_ENTER_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_NODES_EXIT_FIELD_NUMBER: _ClassVar[int]
    F2FS_TRUNCATE_PARTIAL_NODES_FIELD_NUMBER: _ClassVar[int]
    F2FS_UNLINK_ENTER_FIELD_NUMBER: _ClassVar[int]
    F2FS_UNLINK_EXIT_FIELD_NUMBER: _ClassVar[int]
    F2FS_VM_PAGE_MKWRITE_FIELD_NUMBER: _ClassVar[int]
    F2FS_WRITE_BEGIN_FIELD_NUMBER: _ClassVar[int]
    F2FS_WRITE_CHECKPOINT_FIELD_NUMBER: _ClassVar[int]
    F2FS_WRITE_END_FIELD_NUMBER: _ClassVar[int]
    ALLOC_PAGES_IOMMU_END_FIELD_NUMBER: _ClassVar[int]
    ALLOC_PAGES_IOMMU_FAIL_FIELD_NUMBER: _ClassVar[int]
    ALLOC_PAGES_IOMMU_START_FIELD_NUMBER: _ClassVar[int]
    ALLOC_PAGES_SYS_END_FIELD_NUMBER: _ClassVar[int]
    ALLOC_PAGES_SYS_FAIL_FIELD_NUMBER: _ClassVar[int]
    ALLOC_PAGES_SYS_START_FIELD_NUMBER: _ClassVar[int]
    DMA_ALLOC_CONTIGUOUS_RETRY_FIELD_NUMBER: _ClassVar[int]
    IOMMU_MAP_RANGE_FIELD_NUMBER: _ClassVar[int]
    IOMMU_SEC_PTBL_MAP_RANGE_END_FIELD_NUMBER: _ClassVar[int]
    IOMMU_SEC_PTBL_MAP_RANGE_START_FIELD_NUMBER: _ClassVar[int]
    ION_ALLOC_BUFFER_END_FIELD_NUMBER: _ClassVar[int]
    ION_ALLOC_BUFFER_FAIL_FIELD_NUMBER: _ClassVar[int]
    ION_ALLOC_BUFFER_FALLBACK_FIELD_NUMBER: _ClassVar[int]
    ION_ALLOC_BUFFER_START_FIELD_NUMBER: _ClassVar[int]
    ION_CP_ALLOC_RETRY_FIELD_NUMBER: _ClassVar[int]
    ION_CP_SECURE_BUFFER_END_FIELD_NUMBER: _ClassVar[int]
    ION_CP_SECURE_BUFFER_START_FIELD_NUMBER: _ClassVar[int]
    ION_PREFETCHING_FIELD_NUMBER: _ClassVar[int]
    ION_SECURE_CMA_ADD_TO_POOL_END_FIELD_NUMBER: _ClassVar[int]
    ION_SECURE_CMA_ADD_TO_POOL_START_FIELD_NUMBER: _ClassVar[int]
    ION_SECURE_CMA_ALLOCATE_END_FIELD_NUMBER: _ClassVar[int]
    ION_SECURE_CMA_ALLOCATE_START_FIELD_NUMBER: _ClassVar[int]
    ION_SECURE_CMA_SHRINK_POOL_END_FIELD_NUMBER: _ClassVar[int]
    ION_SECURE_CMA_SHRINK_POOL_START_FIELD_NUMBER: _ClassVar[int]
    KFREE_FIELD_NUMBER: _ClassVar[int]
    KMALLOC_FIELD_NUMBER: _ClassVar[int]
    KMALLOC_NODE_FIELD_NUMBER: _ClassVar[int]
    KMEM_CACHE_ALLOC_FIELD_NUMBER: _ClassVar[int]
    KMEM_CACHE_ALLOC_NODE_FIELD_NUMBER: _ClassVar[int]
    KMEM_CACHE_FREE_FIELD_NUMBER: _ClassVar[int]
    MIGRATE_PAGES_END_FIELD_NUMBER: _ClassVar[int]
    MIGRATE_PAGES_START_FIELD_NUMBER: _ClassVar[int]
    MIGRATE_RETRY_FIELD_NUMBER: _ClassVar[int]
    MM_PAGE_ALLOC_FIELD_NUMBER: _ClassVar[int]
    MM_PAGE_ALLOC_EXTFRAG_FIELD_NUMBER: _ClassVar[int]
    MM_PAGE_ALLOC_ZONE_LOCKED_FIELD_NUMBER: _ClassVar[int]
    MM_PAGE_FREE_FIELD_NUMBER: _ClassVar[int]
    MM_PAGE_FREE_BATCHED_FIELD_NUMBER: _ClassVar[int]
    MM_PAGE_PCPU_DRAIN_FIELD_NUMBER: _ClassVar[int]
    RSS_STAT_FIELD_NUMBER: _ClassVar[int]
    ION_HEAP_SHRINK_FIELD_NUMBER: _ClassVar[int]
    ION_HEAP_GROW_FIELD_NUMBER: _ClassVar[int]
    FENCE_INIT_FIELD_NUMBER: _ClassVar[int]
    FENCE_DESTROY_FIELD_NUMBER: _ClassVar[int]
    FENCE_ENABLE_SIGNAL_FIELD_NUMBER: _ClassVar[int]
    FENCE_SIGNALED_FIELD_NUMBER: _ClassVar[int]
    CLK_ENABLE_FIELD_NUMBER: _ClassVar[int]
    CLK_DISABLE_FIELD_NUMBER: _ClassVar[int]
    CLK_SET_RATE_FIELD_NUMBER: _ClassVar[int]
    BINDER_TRANSACTION_ALLOC_BUF_FIELD_NUMBER: _ClassVar[int]
    SIGNAL_DELIVER_FIELD_NUMBER: _ClassVar[int]
    SIGNAL_GENERATE_FIELD_NUMBER: _ClassVar[int]
    OOM_SCORE_ADJ_UPDATE_FIELD_NUMBER: _ClassVar[int]
    GENERIC_FIELD_NUMBER: _ClassVar[int]
    MM_EVENT_RECORD_FIELD_NUMBER: _ClassVar[int]
    SYS_ENTER_FIELD_NUMBER: _ClassVar[int]
    SYS_EXIT_FIELD_NUMBER: _ClassVar[int]
    ZERO_FIELD_NUMBER: _ClassVar[int]
    GPU_FREQUENCY_FIELD_NUMBER: _ClassVar[int]
    SDE_TRACING_MARK_WRITE_FIELD_NUMBER: _ClassVar[int]
    MARK_VICTIM_FIELD_NUMBER: _ClassVar[int]
    ION_STAT_FIELD_NUMBER: _ClassVar[int]
    ION_BUFFER_CREATE_FIELD_NUMBER: _ClassVar[int]
    ION_BUFFER_DESTROY_FIELD_NUMBER: _ClassVar[int]
    SCM_CALL_START_FIELD_NUMBER: _ClassVar[int]
    SCM_CALL_END_FIELD_NUMBER: _ClassVar[int]
    GPU_MEM_TOTAL_FIELD_NUMBER: _ClassVar[int]
    THERMAL_TEMPERATURE_FIELD_NUMBER: _ClassVar[int]
    CDEV_UPDATE_FIELD_NUMBER: _ClassVar[int]
    CPUHP_EXIT_FIELD_NUMBER: _ClassVar[int]
    CPUHP_MULTI_ENTER_FIELD_NUMBER: _ClassVar[int]
    CPUHP_ENTER_FIELD_NUMBER: _ClassVar[int]
    CPUHP_LATENCY_FIELD_NUMBER: _ClassVar[int]
    FASTRPC_DMA_STAT_FIELD_NUMBER: _ClassVar[int]
    DPU_TRACING_MARK_WRITE_FIELD_NUMBER: _ClassVar[int]
    G2D_TRACING_MARK_WRITE_FIELD_NUMBER: _ClassVar[int]
    MALI_TRACING_MARK_WRITE_FIELD_NUMBER: _ClassVar[int]
    DMA_HEAP_STAT_FIELD_NUMBER: _ClassVar[int]
    CPUHP_PAUSE_FIELD_NUMBER: _ClassVar[int]
    SCHED_PI_SETPRIO_FIELD_NUMBER: _ClassVar[int]
    SDE_SDE_EVTLOG_FIELD_NUMBER: _ClassVar[int]
    SDE_SDE_PERF_CALC_CRTC_FIELD_NUMBER: _ClassVar[int]
    SDE_SDE_PERF_CRTC_UPDATE_FIELD_NUMBER: _ClassVar[int]
    SDE_SDE_PERF_SET_QOS_LUTS_FIELD_NUMBER: _ClassVar[int]
    SDE_SDE_PERF_UPDATE_BUS_FIELD_NUMBER: _ClassVar[int]
    RSS_STAT_THROTTLED_FIELD_NUMBER: _ClassVar[int]
    NETIF_RECEIVE_SKB_FIELD_NUMBER: _ClassVar[int]
    NET_DEV_XMIT_FIELD_NUMBER: _ClassVar[int]
    INET_SOCK_SET_STATE_FIELD_NUMBER: _ClassVar[int]
    TCP_RETRANSMIT_SKB_FIELD_NUMBER: _ClassVar[int]
    CROS_EC_SENSORHUB_DATA_FIELD_NUMBER: _ClassVar[int]
    NAPI_GRO_RECEIVE_ENTRY_FIELD_NUMBER: _ClassVar[int]
    NAPI_GRO_RECEIVE_EXIT_FIELD_NUMBER: _ClassVar[int]
    KFREE_SKB_FIELD_NUMBER: _ClassVar[int]
    KVM_ACCESS_FAULT_FIELD_NUMBER: _ClassVar[int]
    KVM_ACK_IRQ_FIELD_NUMBER: _ClassVar[int]
    KVM_AGE_HVA_FIELD_NUMBER: _ClassVar[int]
    KVM_AGE_PAGE_FIELD_NUMBER: _ClassVar[int]
    KVM_ARM_CLEAR_DEBUG_FIELD_NUMBER: _ClassVar[int]
    KVM_ARM_SET_DREG32_FIELD_NUMBER: _ClassVar[int]
    KVM_ARM_SET_REGSET_FIELD_NUMBER: _ClassVar[int]
    KVM_ARM_SETUP_DEBUG_FIELD_NUMBER: _ClassVar[int]
    KVM_ENTRY_FIELD_NUMBER: _ClassVar[int]
    KVM_EXIT_FIELD_NUMBER: _ClassVar[int]
    KVM_FPU_FIELD_NUMBER: _ClassVar[int]
    KVM_GET_TIMER_MAP_FIELD_NUMBER: _ClassVar[int]
    KVM_GUEST_FAULT_FIELD_NUMBER: _ClassVar[int]
    KVM_HANDLE_SYS_REG_FIELD_NUMBER: _ClassVar[int]
    KVM_HVC_ARM64_FIELD_NUMBER: _ClassVar[int]
    KVM_IRQ_LINE_FIELD_NUMBER: _ClassVar[int]
    KVM_MMIO_FIELD_NUMBER: _ClassVar[int]
    KVM_MMIO_EMULATE_FIELD_NUMBER: _ClassVar[int]
    KVM_SET_GUEST_DEBUG_FIELD_NUMBER: _ClassVar[int]
    KVM_SET_IRQ_FIELD_NUMBER: _ClassVar[int]
    KVM_SET_SPTE_HVA_FIELD_NUMBER: _ClassVar[int]
    KVM_SET_WAY_FLUSH_FIELD_NUMBER: _ClassVar[int]
    KVM_SYS_ACCESS_FIELD_NUMBER: _ClassVar[int]
    KVM_TEST_AGE_HVA_FIELD_NUMBER: _ClassVar[int]
    KVM_TIMER_EMULATE_FIELD_NUMBER: _ClassVar[int]
    KVM_TIMER_HRTIMER_EXPIRE_FIELD_NUMBER: _ClassVar[int]
    KVM_TIMER_RESTORE_STATE_FIELD_NUMBER: _ClassVar[int]
    KVM_TIMER_SAVE_STATE_FIELD_NUMBER: _ClassVar[int]
    KVM_TIMER_UPDATE_IRQ_FIELD_NUMBER: _ClassVar[int]
    KVM_TOGGLE_CACHE_FIELD_NUMBER: _ClassVar[int]
    KVM_UNMAP_HVA_RANGE_FIELD_NUMBER: _ClassVar[int]
    KVM_USERSPACE_EXIT_FIELD_NUMBER: _ClassVar[int]
    KVM_VCPU_WAKEUP_FIELD_NUMBER: _ClassVar[int]
    KVM_WFX_ARM64_FIELD_NUMBER: _ClassVar[int]
    TRAP_REG_FIELD_NUMBER: _ClassVar[int]
    VGIC_UPDATE_IRQ_PENDING_FIELD_NUMBER: _ClassVar[int]
    WAKEUP_SOURCE_ACTIVATE_FIELD_NUMBER: _ClassVar[int]
    WAKEUP_SOURCE_DEACTIVATE_FIELD_NUMBER: _ClassVar[int]
    UFSHCD_COMMAND_FIELD_NUMBER: _ClassVar[int]
    UFSHCD_CLK_GATING_FIELD_NUMBER: _ClassVar[int]
    CONSOLE_FIELD_NUMBER: _ClassVar[int]
    DRM_VBLANK_EVENT_FIELD_NUMBER: _ClassVar[int]
    DRM_VBLANK_EVENT_DELIVERED_FIELD_NUMBER: _ClassVar[int]
    DRM_SCHED_JOB_FIELD_NUMBER: _ClassVar[int]
    DRM_RUN_JOB_FIELD_NUMBER: _ClassVar[int]
    DRM_SCHED_PROCESS_JOB_FIELD_NUMBER: _ClassVar[int]
    DMA_FENCE_INIT_FIELD_NUMBER: _ClassVar[int]
    DMA_FENCE_EMIT_FIELD_NUMBER: _ClassVar[int]
    DMA_FENCE_SIGNALED_FIELD_NUMBER: _ClassVar[int]
    DMA_FENCE_WAIT_START_FIELD_NUMBER: _ClassVar[int]
    DMA_FENCE_WAIT_END_FIELD_NUMBER: _ClassVar[int]
    F2FS_IOSTAT_FIELD_NUMBER: _ClassVar[int]
    F2FS_IOSTAT_LATENCY_FIELD_NUMBER: _ClassVar[int]
    SCHED_CPU_UTIL_CFS_FIELD_NUMBER: _ClassVar[int]
    V4L2_QBUF_FIELD_NUMBER: _ClassVar[int]
    V4L2_DQBUF_FIELD_NUMBER: _ClassVar[int]
    VB2_V4L2_BUF_QUEUE_FIELD_NUMBER: _ClassVar[int]
    VB2_V4L2_BUF_DONE_FIELD_NUMBER: _ClassVar[int]
    VB2_V4L2_QBUF_FIELD_NUMBER: _ClassVar[int]
    VB2_V4L2_DQBUF_FIELD_NUMBER: _ClassVar[int]
    DSI_CMD_FIFO_STATUS_FIELD_NUMBER: _ClassVar[int]
    DSI_RX_FIELD_NUMBER: _ClassVar[int]
    DSI_TX_FIELD_NUMBER: _ClassVar[int]
    ANDROID_FS_DATAREAD_END_FIELD_NUMBER: _ClassVar[int]
    ANDROID_FS_DATAREAD_START_FIELD_NUMBER: _ClassVar[int]
    ANDROID_FS_DATAWRITE_END_FIELD_NUMBER: _ClassVar[int]
    ANDROID_FS_DATAWRITE_START_FIELD_NUMBER: _ClassVar[int]
    ANDROID_FS_FSYNC_END_FIELD_NUMBER: _ClassVar[int]
    ANDROID_FS_FSYNC_START_FIELD_NUMBER: _ClassVar[int]
    FUNCGRAPH_ENTRY_FIELD_NUMBER: _ClassVar[int]
    FUNCGRAPH_EXIT_FIELD_NUMBER: _ClassVar[int]
    VIRTIO_VIDEO_CMD_FIELD_NUMBER: _ClassVar[int]
    VIRTIO_VIDEO_CMD_DONE_FIELD_NUMBER: _ClassVar[int]
    VIRTIO_VIDEO_RESOURCE_QUEUE_FIELD_NUMBER: _ClassVar[int]
    VIRTIO_VIDEO_RESOURCE_QUEUE_DONE_FIELD_NUMBER: _ClassVar[int]
    MM_SHRINK_SLAB_START_FIELD_NUMBER: _ClassVar[int]
    MM_SHRINK_SLAB_END_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_SMC_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_SMC_DONE_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_STD_CALL32_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_STD_CALL32_DONE_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_SHARE_MEMORY_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_SHARE_MEMORY_DONE_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_RECLAIM_MEMORY_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_RECLAIM_MEMORY_DONE_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IRQ_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_HANDLE_EVENT_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_CONNECT_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_CONNECT_END_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_WRITE_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_POLL_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_READ_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_READ_END_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_IPC_RX_FIELD_NUMBER: _ClassVar[int]
    TRUSTY_ENQUEUE_NOP_FIELD_NUMBER: _ClassVar[int]
    CMA_ALLOC_START_FIELD_NUMBER: _ClassVar[int]
    CMA_ALLOC_INFO_FIELD_NUMBER: _ClassVar[int]
    LWIS_TRACING_MARK_WRITE_FIELD_NUMBER: _ClassVar[int]
    VIRTIO_GPU_CMD_QUEUE_FIELD_NUMBER: _ClassVar[int]
    VIRTIO_GPU_CMD_RESPONSE_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_KCPU_CQS_SET_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_KCPU_CQS_WAIT_START_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_KCPU_CQS_WAIT_END_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_KCPU_FENCE_SIGNAL_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_KCPU_FENCE_WAIT_START_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_KCPU_FENCE_WAIT_END_FIELD_NUMBER: _ClassVar[int]
    HYP_ENTER_FIELD_NUMBER: _ClassVar[int]
    HYP_EXIT_FIELD_NUMBER: _ClassVar[int]
    HOST_HCALL_FIELD_NUMBER: _ClassVar[int]
    HOST_SMC_FIELD_NUMBER: _ClassVar[int]
    HOST_MEM_ABORT_FIELD_NUMBER: _ClassVar[int]
    SUSPEND_RESUME_MINIMAL_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_CSF_INTERRUPT_START_FIELD_NUMBER: _ClassVar[int]
    MALI_MALI_CSF_INTERRUPT_END_FIELD_NUMBER: _ClassVar[int]
    SAMSUNG_TRACING_MARK_WRITE_FIELD_NUMBER: _ClassVar[int]
    BINDER_COMMAND_FIELD_NUMBER: _ClassVar[int]
    BINDER_RETURN_FIELD_NUMBER: _ClassVar[int]
    SCHED_SWITCH_WITH_CTRS_FIELD_NUMBER: _ClassVar[int]
    GPU_WORK_PERIOD_FIELD_NUMBER: _ClassVar[int]
    timestamp: int
    pid: int
    common_flags: int
    print: PrintFtraceEvent
    sched_switch: SchedSwitchFtraceEvent
    cpu_frequency: CpuFrequencyFtraceEvent
    cpu_frequency_limits: CpuFrequencyLimitsFtraceEvent
    cpu_idle: CpuIdleFtraceEvent
    clock_enable: ClockEnableFtraceEvent
    clock_disable: ClockDisableFtraceEvent
    clock_set_rate: ClockSetRateFtraceEvent
    sched_wakeup: SchedWakeupFtraceEvent
    sched_blocked_reason: SchedBlockedReasonFtraceEvent
    sched_cpu_hotplug: SchedCpuHotplugFtraceEvent
    sched_waking: SchedWakingFtraceEvent
    ipi_entry: IpiEntryFtraceEvent
    ipi_exit: IpiExitFtraceEvent
    ipi_raise: IpiRaiseFtraceEvent
    softirq_entry: SoftirqEntryFtraceEvent
    softirq_exit: SoftirqExitFtraceEvent
    softirq_raise: SoftirqRaiseFtraceEvent
    i2c_read: I2cReadFtraceEvent
    i2c_write: I2cWriteFtraceEvent
    i2c_result: I2cResultFtraceEvent
    i2c_reply: I2cReplyFtraceEvent
    smbus_read: SmbusReadFtraceEvent
    smbus_write: SmbusWriteFtraceEvent
    smbus_result: SmbusResultFtraceEvent
    smbus_reply: SmbusReplyFtraceEvent
    lowmemory_kill: LowmemoryKillFtraceEvent
    irq_handler_entry: IrqHandlerEntryFtraceEvent
    irq_handler_exit: IrqHandlerExitFtraceEvent
    sync_pt: SyncPtFtraceEvent
    sync_timeline: SyncTimelineFtraceEvent
    sync_wait: SyncWaitFtraceEvent
    ext4_da_write_begin: Ext4DaWriteBeginFtraceEvent
    ext4_da_write_end: Ext4DaWriteEndFtraceEvent
    ext4_sync_file_enter: Ext4SyncFileEnterFtraceEvent
    ext4_sync_file_exit: Ext4SyncFileExitFtraceEvent
    block_rq_issue: BlockRqIssueFtraceEvent
    mm_vmscan_direct_reclaim_begin: MmVmscanDirectReclaimBeginFtraceEvent
    mm_vmscan_direct_reclaim_end: MmVmscanDirectReclaimEndFtraceEvent
    mm_vmscan_kswapd_wake: MmVmscanKswapdWakeFtraceEvent
    mm_vmscan_kswapd_sleep: MmVmscanKswapdSleepFtraceEvent
    binder_transaction: BinderTransactionFtraceEvent
    binder_transaction_received: BinderTransactionReceivedFtraceEvent
    binder_set_priority: BinderSetPriorityFtraceEvent
    binder_lock: BinderLockFtraceEvent
    binder_locked: BinderLockedFtraceEvent
    binder_unlock: BinderUnlockFtraceEvent
    workqueue_activate_work: WorkqueueActivateWorkFtraceEvent
    workqueue_execute_end: WorkqueueExecuteEndFtraceEvent
    workqueue_execute_start: WorkqueueExecuteStartFtraceEvent
    workqueue_queue_work: WorkqueueQueueWorkFtraceEvent
    regulator_disable: RegulatorDisableFtraceEvent
    regulator_disable_complete: RegulatorDisableCompleteFtraceEvent
    regulator_enable: RegulatorEnableFtraceEvent
    regulator_enable_complete: RegulatorEnableCompleteFtraceEvent
    regulator_enable_delay: RegulatorEnableDelayFtraceEvent
    regulator_set_voltage: RegulatorSetVoltageFtraceEvent
    regulator_set_voltage_complete: RegulatorSetVoltageCompleteFtraceEvent
    cgroup_attach_task: CgroupAttachTaskFtraceEvent
    cgroup_mkdir: CgroupMkdirFtraceEvent
    cgroup_remount: CgroupRemountFtraceEvent
    cgroup_rmdir: CgroupRmdirFtraceEvent
    cgroup_transfer_tasks: CgroupTransferTasksFtraceEvent
    cgroup_destroy_root: CgroupDestroyRootFtraceEvent
    cgroup_release: CgroupReleaseFtraceEvent
    cgroup_rename: CgroupRenameFtraceEvent
    cgroup_setup_root: CgroupSetupRootFtraceEvent
    mdp_cmd_kickoff: MdpCmdKickoffFtraceEvent
    mdp_commit: MdpCommitFtraceEvent
    mdp_perf_set_ot: MdpPerfSetOtFtraceEvent
    mdp_sspp_change: MdpSsppChangeFtraceEvent
    tracing_mark_write: TracingMarkWriteFtraceEvent
    mdp_cmd_pingpong_done: MdpCmdPingpongDoneFtraceEvent
    mdp_compare_bw: MdpCompareBwFtraceEvent
    mdp_perf_set_panic_luts: MdpPerfSetPanicLutsFtraceEvent
    mdp_sspp_set: MdpSsppSetFtraceEvent
    mdp_cmd_readptr_done: MdpCmdReadptrDoneFtraceEvent
    mdp_misr_crc: MdpMisrCrcFtraceEvent
    mdp_perf_set_qos_luts: MdpPerfSetQosLutsFtraceEvent
    mdp_trace_counter: MdpTraceCounterFtraceEvent
    mdp_cmd_release_bw: MdpCmdReleaseBwFtraceEvent
    mdp_mixer_update: MdpMixerUpdateFtraceEvent
    mdp_perf_set_wm_levels: MdpPerfSetWmLevelsFtraceEvent
    mdp_video_underrun_done: MdpVideoUnderrunDoneFtraceEvent
    mdp_cmd_wait_pingpong: MdpCmdWaitPingpongFtraceEvent
    mdp_perf_prefill_calc: MdpPerfPrefillCalcFtraceEvent
    mdp_perf_update_bus: MdpPerfUpdateBusFtraceEvent
    rotator_bw_ao_as_context: RotatorBwAoAsContextFtraceEvent
    mm_filemap_add_to_page_cache: MmFilemapAddToPageCacheFtraceEvent
    mm_filemap_delete_from_page_cache: MmFilemapDeleteFromPageCacheFtraceEvent
    mm_compaction_begin: MmCompactionBeginFtraceEvent
    mm_compaction_defer_compaction: MmCompactionDeferCompactionFtraceEvent
    mm_compaction_deferred: MmCompactionDeferredFtraceEvent
    mm_compaction_defer_reset: MmCompactionDeferResetFtraceEvent
    mm_compaction_end: MmCompactionEndFtraceEvent
    mm_compaction_finished: MmCompactionFinishedFtraceEvent
    mm_compaction_isolate_freepages: MmCompactionIsolateFreepagesFtraceEvent
    mm_compaction_isolate_migratepages: MmCompactionIsolateMigratepagesFtraceEvent
    mm_compaction_kcompactd_sleep: MmCompactionKcompactdSleepFtraceEvent
    mm_compaction_kcompactd_wake: MmCompactionKcompactdWakeFtraceEvent
    mm_compaction_migratepages: MmCompactionMigratepagesFtraceEvent
    mm_compaction_suitable: MmCompactionSuitableFtraceEvent
    mm_compaction_try_to_compact_pages: MmCompactionTryToCompactPagesFtraceEvent
    mm_compaction_wakeup_kcompactd: MmCompactionWakeupKcompactdFtraceEvent
    suspend_resume: SuspendResumeFtraceEvent
    sched_wakeup_new: SchedWakeupNewFtraceEvent
    block_bio_backmerge: BlockBioBackmergeFtraceEvent
    block_bio_bounce: BlockBioBounceFtraceEvent
    block_bio_complete: BlockBioCompleteFtraceEvent
    block_bio_frontmerge: BlockBioFrontmergeFtraceEvent
    block_bio_queue: BlockBioQueueFtraceEvent
    block_bio_remap: BlockBioRemapFtraceEvent
    block_dirty_buffer: BlockDirtyBufferFtraceEvent
    block_getrq: BlockGetrqFtraceEvent
    block_plug: BlockPlugFtraceEvent
    block_rq_abort: BlockRqAbortFtraceEvent
    block_rq_complete: BlockRqCompleteFtraceEvent
    block_rq_insert: BlockRqInsertFtraceEvent
    block_rq_remap: BlockRqRemapFtraceEvent
    block_rq_requeue: BlockRqRequeueFtraceEvent
    block_sleeprq: BlockSleeprqFtraceEvent
    block_split: BlockSplitFtraceEvent
    block_touch_buffer: BlockTouchBufferFtraceEvent
    block_unplug: BlockUnplugFtraceEvent
    ext4_alloc_da_blocks: Ext4AllocDaBlocksFtraceEvent
    ext4_allocate_blocks: Ext4AllocateBlocksFtraceEvent
    ext4_allocate_inode: Ext4AllocateInodeFtraceEvent
    ext4_begin_ordered_truncate: Ext4BeginOrderedTruncateFtraceEvent
    ext4_collapse_range: Ext4CollapseRangeFtraceEvent
    ext4_da_release_space: Ext4DaReleaseSpaceFtraceEvent
    ext4_da_reserve_space: Ext4DaReserveSpaceFtraceEvent
    ext4_da_update_reserve_space: Ext4DaUpdateReserveSpaceFtraceEvent
    ext4_da_write_pages: Ext4DaWritePagesFtraceEvent
    ext4_da_write_pages_extent: Ext4DaWritePagesExtentFtraceEvent
    ext4_direct_IO_enter: Ext4DirectIOEnterFtraceEvent
    ext4_direct_IO_exit: Ext4DirectIOExitFtraceEvent
    ext4_discard_blocks: Ext4DiscardBlocksFtraceEvent
    ext4_discard_preallocations: Ext4DiscardPreallocationsFtraceEvent
    ext4_drop_inode: Ext4DropInodeFtraceEvent
    ext4_es_cache_extent: Ext4EsCacheExtentFtraceEvent
    ext4_es_find_delayed_extent_range_enter: Ext4EsFindDelayedExtentRangeEnterFtraceEvent
    ext4_es_find_delayed_extent_range_exit: Ext4EsFindDelayedExtentRangeExitFtraceEvent
    ext4_es_insert_extent: Ext4EsInsertExtentFtraceEvent
    ext4_es_lookup_extent_enter: Ext4EsLookupExtentEnterFtraceEvent
    ext4_es_lookup_extent_exit: Ext4EsLookupExtentExitFtraceEvent
    ext4_es_remove_extent: Ext4EsRemoveExtentFtraceEvent
    ext4_es_shrink: Ext4EsShrinkFtraceEvent
    ext4_es_shrink_count: Ext4EsShrinkCountFtraceEvent
    ext4_es_shrink_scan_enter: Ext4EsShrinkScanEnterFtraceEvent
    ext4_es_shrink_scan_exit: Ext4EsShrinkScanExitFtraceEvent
    ext4_evict_inode: Ext4EvictInodeFtraceEvent
    ext4_ext_convert_to_initialized_enter: Ext4ExtConvertToInitializedEnterFtraceEvent
    ext4_ext_convert_to_initialized_fastpath: Ext4ExtConvertToInitializedFastpathFtraceEvent
    ext4_ext_handle_unwritten_extents: Ext4ExtHandleUnwrittenExtentsFtraceEvent
    ext4_ext_in_cache: Ext4ExtInCacheFtraceEvent
    ext4_ext_load_extent: Ext4ExtLoadExtentFtraceEvent
    ext4_ext_map_blocks_enter: Ext4ExtMapBlocksEnterFtraceEvent
    ext4_ext_map_blocks_exit: Ext4ExtMapBlocksExitFtraceEvent
    ext4_ext_put_in_cache: Ext4ExtPutInCacheFtraceEvent
    ext4_ext_remove_space: Ext4ExtRemoveSpaceFtraceEvent
    ext4_ext_remove_space_done: Ext4ExtRemoveSpaceDoneFtraceEvent
    ext4_ext_rm_idx: Ext4ExtRmIdxFtraceEvent
    ext4_ext_rm_leaf: Ext4ExtRmLeafFtraceEvent
    ext4_ext_show_extent: Ext4ExtShowExtentFtraceEvent
    ext4_fallocate_enter: Ext4FallocateEnterFtraceEvent
    ext4_fallocate_exit: Ext4FallocateExitFtraceEvent
    ext4_find_delalloc_range: Ext4FindDelallocRangeFtraceEvent
    ext4_forget: Ext4ForgetFtraceEvent
    ext4_free_blocks: Ext4FreeBlocksFtraceEvent
    ext4_free_inode: Ext4FreeInodeFtraceEvent
    ext4_get_implied_cluster_alloc_exit: Ext4GetImpliedClusterAllocExitFtraceEvent
    ext4_get_reserved_cluster_alloc: Ext4GetReservedClusterAllocFtraceEvent
    ext4_ind_map_blocks_enter: Ext4IndMapBlocksEnterFtraceEvent
    ext4_ind_map_blocks_exit: Ext4IndMapBlocksExitFtraceEvent
    ext4_insert_range: Ext4InsertRangeFtraceEvent
    ext4_invalidatepage: Ext4InvalidatepageFtraceEvent
    ext4_journal_start: Ext4JournalStartFtraceEvent
    ext4_journal_start_reserved: Ext4JournalStartReservedFtraceEvent
    ext4_journalled_invalidatepage: Ext4JournalledInvalidatepageFtraceEvent
    ext4_journalled_write_end: Ext4JournalledWriteEndFtraceEvent
    ext4_load_inode: Ext4LoadInodeFtraceEvent
    ext4_load_inode_bitmap: Ext4LoadInodeBitmapFtraceEvent
    ext4_mark_inode_dirty: Ext4MarkInodeDirtyFtraceEvent
    ext4_mb_bitmap_load: Ext4MbBitmapLoadFtraceEvent
    ext4_mb_buddy_bitmap_load: Ext4MbBuddyBitmapLoadFtraceEvent
    ext4_mb_discard_preallocations: Ext4MbDiscardPreallocationsFtraceEvent
    ext4_mb_new_group_pa: Ext4MbNewGroupPaFtraceEvent
    ext4_mb_new_inode_pa: Ext4MbNewInodePaFtraceEvent
    ext4_mb_release_group_pa: Ext4MbReleaseGroupPaFtraceEvent
    ext4_mb_release_inode_pa: Ext4MbReleaseInodePaFtraceEvent
    ext4_mballoc_alloc: Ext4MballocAllocFtraceEvent
    ext4_mballoc_discard: Ext4MballocDiscardFtraceEvent
    ext4_mballoc_free: Ext4MballocFreeFtraceEvent
    ext4_mballoc_prealloc: Ext4MballocPreallocFtraceEvent
    ext4_other_inode_update_time: Ext4OtherInodeUpdateTimeFtraceEvent
    ext4_punch_hole: Ext4PunchHoleFtraceEvent
    ext4_read_block_bitmap_load: Ext4ReadBlockBitmapLoadFtraceEvent
    ext4_readpage: Ext4ReadpageFtraceEvent
    ext4_releasepage: Ext4ReleasepageFtraceEvent
    ext4_remove_blocks: Ext4RemoveBlocksFtraceEvent
    ext4_request_blocks: Ext4RequestBlocksFtraceEvent
    ext4_request_inode: Ext4RequestInodeFtraceEvent
    ext4_sync_fs: Ext4SyncFsFtraceEvent
    ext4_trim_all_free: Ext4TrimAllFreeFtraceEvent
    ext4_trim_extent: Ext4TrimExtentFtraceEvent
    ext4_truncate_enter: Ext4TruncateEnterFtraceEvent
    ext4_truncate_exit: Ext4TruncateExitFtraceEvent
    ext4_unlink_enter: Ext4UnlinkEnterFtraceEvent
    ext4_unlink_exit: Ext4UnlinkExitFtraceEvent
    ext4_write_begin: Ext4WriteBeginFtraceEvent
    ext4_write_end: Ext4WriteEndFtraceEvent
    ext4_writepage: Ext4WritepageFtraceEvent
    ext4_writepages: Ext4WritepagesFtraceEvent
    ext4_writepages_result: Ext4WritepagesResultFtraceEvent
    ext4_zero_range: Ext4ZeroRangeFtraceEvent
    task_newtask: TaskNewtaskFtraceEvent
    task_rename: TaskRenameFtraceEvent
    sched_process_exec: SchedProcessExecFtraceEvent
    sched_process_exit: SchedProcessExitFtraceEvent
    sched_process_fork: SchedProcessForkFtraceEvent
    sched_process_free: SchedProcessFreeFtraceEvent
    sched_process_hang: SchedProcessHangFtraceEvent
    sched_process_wait: SchedProcessWaitFtraceEvent
    f2fs_do_submit_bio: F2fsDoSubmitBioFtraceEvent
    f2fs_evict_inode: F2fsEvictInodeFtraceEvent
    f2fs_fallocate: F2fsFallocateFtraceEvent
    f2fs_get_data_block: F2fsGetDataBlockFtraceEvent
    f2fs_get_victim: F2fsGetVictimFtraceEvent
    f2fs_iget: F2fsIgetFtraceEvent
    f2fs_iget_exit: F2fsIgetExitFtraceEvent
    f2fs_new_inode: F2fsNewInodeFtraceEvent
    f2fs_readpage: F2fsReadpageFtraceEvent
    f2fs_reserve_new_block: F2fsReserveNewBlockFtraceEvent
    f2fs_set_page_dirty: F2fsSetPageDirtyFtraceEvent
    f2fs_submit_write_page: F2fsSubmitWritePageFtraceEvent
    f2fs_sync_file_enter: F2fsSyncFileEnterFtraceEvent
    f2fs_sync_file_exit: F2fsSyncFileExitFtraceEvent
    f2fs_sync_fs: F2fsSyncFsFtraceEvent
    f2fs_truncate: F2fsTruncateFtraceEvent
    f2fs_truncate_blocks_enter: F2fsTruncateBlocksEnterFtraceEvent
    f2fs_truncate_blocks_exit: F2fsTruncateBlocksExitFtraceEvent
    f2fs_truncate_data_blocks_range: F2fsTruncateDataBlocksRangeFtraceEvent
    f2fs_truncate_inode_blocks_enter: F2fsTruncateInodeBlocksEnterFtraceEvent
    f2fs_truncate_inode_blocks_exit: F2fsTruncateInodeBlocksExitFtraceEvent
    f2fs_truncate_node: F2fsTruncateNodeFtraceEvent
    f2fs_truncate_nodes_enter: F2fsTruncateNodesEnterFtraceEvent
    f2fs_truncate_nodes_exit: F2fsTruncateNodesExitFtraceEvent
    f2fs_truncate_partial_nodes: F2fsTruncatePartialNodesFtraceEvent
    f2fs_unlink_enter: F2fsUnlinkEnterFtraceEvent
    f2fs_unlink_exit: F2fsUnlinkExitFtraceEvent
    f2fs_vm_page_mkwrite: F2fsVmPageMkwriteFtraceEvent
    f2fs_write_begin: F2fsWriteBeginFtraceEvent
    f2fs_write_checkpoint: F2fsWriteCheckpointFtraceEvent
    f2fs_write_end: F2fsWriteEndFtraceEvent
    alloc_pages_iommu_end: AllocPagesIommuEndFtraceEvent
    alloc_pages_iommu_fail: AllocPagesIommuFailFtraceEvent
    alloc_pages_iommu_start: AllocPagesIommuStartFtraceEvent
    alloc_pages_sys_end: AllocPagesSysEndFtraceEvent
    alloc_pages_sys_fail: AllocPagesSysFailFtraceEvent
    alloc_pages_sys_start: AllocPagesSysStartFtraceEvent
    dma_alloc_contiguous_retry: DmaAllocContiguousRetryFtraceEvent
    iommu_map_range: IommuMapRangeFtraceEvent
    iommu_sec_ptbl_map_range_end: IommuSecPtblMapRangeEndFtraceEvent
    iommu_sec_ptbl_map_range_start: IommuSecPtblMapRangeStartFtraceEvent
    ion_alloc_buffer_end: IonAllocBufferEndFtraceEvent
    ion_alloc_buffer_fail: IonAllocBufferFailFtraceEvent
    ion_alloc_buffer_fallback: IonAllocBufferFallbackFtraceEvent
    ion_alloc_buffer_start: IonAllocBufferStartFtraceEvent
    ion_cp_alloc_retry: IonCpAllocRetryFtraceEvent
    ion_cp_secure_buffer_end: IonCpSecureBufferEndFtraceEvent
    ion_cp_secure_buffer_start: IonCpSecureBufferStartFtraceEvent
    ion_prefetching: IonPrefetchingFtraceEvent
    ion_secure_cma_add_to_pool_end: IonSecureCmaAddToPoolEndFtraceEvent
    ion_secure_cma_add_to_pool_start: IonSecureCmaAddToPoolStartFtraceEvent
    ion_secure_cma_allocate_end: IonSecureCmaAllocateEndFtraceEvent
    ion_secure_cma_allocate_start: IonSecureCmaAllocateStartFtraceEvent
    ion_secure_cma_shrink_pool_end: IonSecureCmaShrinkPoolEndFtraceEvent
    ion_secure_cma_shrink_pool_start: IonSecureCmaShrinkPoolStartFtraceEvent
    kfree: KfreeFtraceEvent
    kmalloc: KmallocFtraceEvent
    kmalloc_node: KmallocNodeFtraceEvent
    kmem_cache_alloc: KmemCacheAllocFtraceEvent
    kmem_cache_alloc_node: KmemCacheAllocNodeFtraceEvent
    kmem_cache_free: KmemCacheFreeFtraceEvent
    migrate_pages_end: MigratePagesEndFtraceEvent
    migrate_pages_start: MigratePagesStartFtraceEvent
    migrate_retry: MigrateRetryFtraceEvent
    mm_page_alloc: MmPageAllocFtraceEvent
    mm_page_alloc_extfrag: MmPageAllocExtfragFtraceEvent
    mm_page_alloc_zone_locked: MmPageAllocZoneLockedFtraceEvent
    mm_page_free: MmPageFreeFtraceEvent
    mm_page_free_batched: MmPageFreeBatchedFtraceEvent
    mm_page_pcpu_drain: MmPagePcpuDrainFtraceEvent
    rss_stat: RssStatFtraceEvent
    ion_heap_shrink: IonHeapShrinkFtraceEvent
    ion_heap_grow: IonHeapGrowFtraceEvent
    fence_init: FenceInitFtraceEvent
    fence_destroy: FenceDestroyFtraceEvent
    fence_enable_signal: FenceEnableSignalFtraceEvent
    fence_signaled: FenceSignaledFtraceEvent
    clk_enable: ClkEnableFtraceEvent
    clk_disable: ClkDisableFtraceEvent
    clk_set_rate: ClkSetRateFtraceEvent
    binder_transaction_alloc_buf: BinderTransactionAllocBufFtraceEvent
    signal_deliver: SignalDeliverFtraceEvent
    signal_generate: SignalGenerateFtraceEvent
    oom_score_adj_update: OomScoreAdjUpdateFtraceEvent
    generic: GenericFtraceEvent
    mm_event_record: MmEventRecordFtraceEvent
    sys_enter: SysEnterFtraceEvent
    sys_exit: SysExitFtraceEvent
    zero: ZeroFtraceEvent
    gpu_frequency: GpuFrequencyFtraceEvent
    sde_tracing_mark_write: SdeTracingMarkWriteFtraceEvent
    mark_victim: MarkVictimFtraceEvent
    ion_stat: IonStatFtraceEvent
    ion_buffer_create: IonBufferCreateFtraceEvent
    ion_buffer_destroy: IonBufferDestroyFtraceEvent
    scm_call_start: ScmCallStartFtraceEvent
    scm_call_end: ScmCallEndFtraceEvent
    gpu_mem_total: GpuMemTotalFtraceEvent
    thermal_temperature: ThermalTemperatureFtraceEvent
    cdev_update: CdevUpdateFtraceEvent
    cpuhp_exit: CpuhpExitFtraceEvent
    cpuhp_multi_enter: CpuhpMultiEnterFtraceEvent
    cpuhp_enter: CpuhpEnterFtraceEvent
    cpuhp_latency: CpuhpLatencyFtraceEvent
    fastrpc_dma_stat: FastrpcDmaStatFtraceEvent
    dpu_tracing_mark_write: DpuTracingMarkWriteFtraceEvent
    g2d_tracing_mark_write: G2dTracingMarkWriteFtraceEvent
    mali_tracing_mark_write: MaliTracingMarkWriteFtraceEvent
    dma_heap_stat: DmaHeapStatFtraceEvent
    cpuhp_pause: CpuhpPauseFtraceEvent
    sched_pi_setprio: SchedPiSetprioFtraceEvent
    sde_sde_evtlog: SdeSdeEvtlogFtraceEvent
    sde_sde_perf_calc_crtc: SdeSdePerfCalcCrtcFtraceEvent
    sde_sde_perf_crtc_update: SdeSdePerfCrtcUpdateFtraceEvent
    sde_sde_perf_set_qos_luts: SdeSdePerfSetQosLutsFtraceEvent
    sde_sde_perf_update_bus: SdeSdePerfUpdateBusFtraceEvent
    rss_stat_throttled: RssStatThrottledFtraceEvent
    netif_receive_skb: NetifReceiveSkbFtraceEvent
    net_dev_xmit: NetDevXmitFtraceEvent
    inet_sock_set_state: InetSockSetStateFtraceEvent
    tcp_retransmit_skb: TcpRetransmitSkbFtraceEvent
    cros_ec_sensorhub_data: CrosEcSensorhubDataFtraceEvent
    napi_gro_receive_entry: NapiGroReceiveEntryFtraceEvent
    napi_gro_receive_exit: NapiGroReceiveExitFtraceEvent
    kfree_skb: KfreeSkbFtraceEvent
    kvm_access_fault: KvmAccessFaultFtraceEvent
    kvm_ack_irq: KvmAckIrqFtraceEvent
    kvm_age_hva: KvmAgeHvaFtraceEvent
    kvm_age_page: KvmAgePageFtraceEvent
    kvm_arm_clear_debug: KvmArmClearDebugFtraceEvent
    kvm_arm_set_dreg32: KvmArmSetDreg32FtraceEvent
    kvm_arm_set_regset: KvmArmSetRegsetFtraceEvent
    kvm_arm_setup_debug: KvmArmSetupDebugFtraceEvent
    kvm_entry: KvmEntryFtraceEvent
    kvm_exit: KvmExitFtraceEvent
    kvm_fpu: KvmFpuFtraceEvent
    kvm_get_timer_map: KvmGetTimerMapFtraceEvent
    kvm_guest_fault: KvmGuestFaultFtraceEvent
    kvm_handle_sys_reg: KvmHandleSysRegFtraceEvent
    kvm_hvc_arm64: KvmHvcArm64FtraceEvent
    kvm_irq_line: KvmIrqLineFtraceEvent
    kvm_mmio: KvmMmioFtraceEvent
    kvm_mmio_emulate: KvmMmioEmulateFtraceEvent
    kvm_set_guest_debug: KvmSetGuestDebugFtraceEvent
    kvm_set_irq: KvmSetIrqFtraceEvent
    kvm_set_spte_hva: KvmSetSpteHvaFtraceEvent
    kvm_set_way_flush: KvmSetWayFlushFtraceEvent
    kvm_sys_access: KvmSysAccessFtraceEvent
    kvm_test_age_hva: KvmTestAgeHvaFtraceEvent
    kvm_timer_emulate: KvmTimerEmulateFtraceEvent
    kvm_timer_hrtimer_expire: KvmTimerHrtimerExpireFtraceEvent
    kvm_timer_restore_state: KvmTimerRestoreStateFtraceEvent
    kvm_timer_save_state: KvmTimerSaveStateFtraceEvent
    kvm_timer_update_irq: KvmTimerUpdateIrqFtraceEvent
    kvm_toggle_cache: KvmToggleCacheFtraceEvent
    kvm_unmap_hva_range: KvmUnmapHvaRangeFtraceEvent
    kvm_userspace_exit: KvmUserspaceExitFtraceEvent
    kvm_vcpu_wakeup: KvmVcpuWakeupFtraceEvent
    kvm_wfx_arm64: KvmWfxArm64FtraceEvent
    trap_reg: TrapRegFtraceEvent
    vgic_update_irq_pending: VgicUpdateIrqPendingFtraceEvent
    wakeup_source_activate: WakeupSourceActivateFtraceEvent
    wakeup_source_deactivate: WakeupSourceDeactivateFtraceEvent
    ufshcd_command: UfshcdCommandFtraceEvent
    ufshcd_clk_gating: UfshcdClkGatingFtraceEvent
    console: ConsoleFtraceEvent
    drm_vblank_event: DrmVblankEventFtraceEvent
    drm_vblank_event_delivered: DrmVblankEventDeliveredFtraceEvent
    drm_sched_job: DrmSchedJobFtraceEvent
    drm_run_job: DrmRunJobFtraceEvent
    drm_sched_process_job: DrmSchedProcessJobFtraceEvent
    dma_fence_init: DmaFenceInitFtraceEvent
    dma_fence_emit: DmaFenceEmitFtraceEvent
    dma_fence_signaled: DmaFenceSignaledFtraceEvent
    dma_fence_wait_start: DmaFenceWaitStartFtraceEvent
    dma_fence_wait_end: DmaFenceWaitEndFtraceEvent
    f2fs_iostat: F2fsIostatFtraceEvent
    f2fs_iostat_latency: F2fsIostatLatencyFtraceEvent
    sched_cpu_util_cfs: SchedCpuUtilCfsFtraceEvent
    v4l2_qbuf: V4l2QbufFtraceEvent
    v4l2_dqbuf: V4l2DqbufFtraceEvent
    vb2_v4l2_buf_queue: Vb2V4l2BufQueueFtraceEvent
    vb2_v4l2_buf_done: Vb2V4l2BufDoneFtraceEvent
    vb2_v4l2_qbuf: Vb2V4l2QbufFtraceEvent
    vb2_v4l2_dqbuf: Vb2V4l2DqbufFtraceEvent
    dsi_cmd_fifo_status: DsiCmdFifoStatusFtraceEvent
    dsi_rx: DsiRxFtraceEvent
    dsi_tx: DsiTxFtraceEvent
    android_fs_dataread_end: AndroidFsDatareadEndFtraceEvent
    android_fs_dataread_start: AndroidFsDatareadStartFtraceEvent
    android_fs_datawrite_end: AndroidFsDatawriteEndFtraceEvent
    android_fs_datawrite_start: AndroidFsDatawriteStartFtraceEvent
    android_fs_fsync_end: AndroidFsFsyncEndFtraceEvent
    android_fs_fsync_start: AndroidFsFsyncStartFtraceEvent
    funcgraph_entry: FuncgraphEntryFtraceEvent
    funcgraph_exit: FuncgraphExitFtraceEvent
    virtio_video_cmd: VirtioVideoCmdFtraceEvent
    virtio_video_cmd_done: VirtioVideoCmdDoneFtraceEvent
    virtio_video_resource_queue: VirtioVideoResourceQueueFtraceEvent
    virtio_video_resource_queue_done: VirtioVideoResourceQueueDoneFtraceEvent
    mm_shrink_slab_start: MmShrinkSlabStartFtraceEvent
    mm_shrink_slab_end: MmShrinkSlabEndFtraceEvent
    trusty_smc: TrustySmcFtraceEvent
    trusty_smc_done: TrustySmcDoneFtraceEvent
    trusty_std_call32: TrustyStdCall32FtraceEvent
    trusty_std_call32_done: TrustyStdCall32DoneFtraceEvent
    trusty_share_memory: TrustyShareMemoryFtraceEvent
    trusty_share_memory_done: TrustyShareMemoryDoneFtraceEvent
    trusty_reclaim_memory: TrustyReclaimMemoryFtraceEvent
    trusty_reclaim_memory_done: TrustyReclaimMemoryDoneFtraceEvent
    trusty_irq: TrustyIrqFtraceEvent
    trusty_ipc_handle_event: TrustyIpcHandleEventFtraceEvent
    trusty_ipc_connect: TrustyIpcConnectFtraceEvent
    trusty_ipc_connect_end: TrustyIpcConnectEndFtraceEvent
    trusty_ipc_write: TrustyIpcWriteFtraceEvent
    trusty_ipc_poll: TrustyIpcPollFtraceEvent
    trusty_ipc_read: TrustyIpcReadFtraceEvent
    trusty_ipc_read_end: TrustyIpcReadEndFtraceEvent
    trusty_ipc_rx: TrustyIpcRxFtraceEvent
    trusty_enqueue_nop: TrustyEnqueueNopFtraceEvent
    cma_alloc_start: CmaAllocStartFtraceEvent
    cma_alloc_info: CmaAllocInfoFtraceEvent
    lwis_tracing_mark_write: LwisTracingMarkWriteFtraceEvent
    virtio_gpu_cmd_queue: VirtioGpuCmdQueueFtraceEvent
    virtio_gpu_cmd_response: VirtioGpuCmdResponseFtraceEvent
    mali_mali_KCPU_CQS_SET: MaliMaliKCPUCQSSETFtraceEvent
    mali_mali_KCPU_CQS_WAIT_START: MaliMaliKCPUCQSWAITSTARTFtraceEvent
    mali_mali_KCPU_CQS_WAIT_END: MaliMaliKCPUCQSWAITENDFtraceEvent
    mali_mali_KCPU_FENCE_SIGNAL: MaliMaliKCPUFENCESIGNALFtraceEvent
    mali_mali_KCPU_FENCE_WAIT_START: MaliMaliKCPUFENCEWAITSTARTFtraceEvent
    mali_mali_KCPU_FENCE_WAIT_END: MaliMaliKCPUFENCEWAITENDFtraceEvent
    hyp_enter: HypEnterFtraceEvent
    hyp_exit: HypExitFtraceEvent
    host_hcall: HostHcallFtraceEvent
    host_smc: HostSmcFtraceEvent
    host_mem_abort: HostMemAbortFtraceEvent
    suspend_resume_minimal: SuspendResumeMinimalFtraceEvent
    mali_mali_CSF_INTERRUPT_START: MaliMaliCSFINTERRUPTSTARTFtraceEvent
    mali_mali_CSF_INTERRUPT_END: MaliMaliCSFINTERRUPTENDFtraceEvent
    samsung_tracing_mark_write: SamsungTracingMarkWriteFtraceEvent
    binder_command: BinderCommandFtraceEvent
    binder_return: BinderReturnFtraceEvent
    sched_switch_with_ctrs: SchedSwitchWithCtrsFtraceEvent
    gpu_work_period: GpuWorkPeriodFtraceEvent
    def __init__(
        self,
        timestamp: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        common_flags: _Optional[int] = ...,
        print: _Optional[_Union[PrintFtraceEvent, _Mapping]] = ...,
        sched_switch: _Optional[_Union[SchedSwitchFtraceEvent, _Mapping]] = ...,
        cpu_frequency: _Optional[_Union[CpuFrequencyFtraceEvent, _Mapping]] = ...,
        cpu_frequency_limits: _Optional[_Union[CpuFrequencyLimitsFtraceEvent, _Mapping]] = ...,
        cpu_idle: _Optional[_Union[CpuIdleFtraceEvent, _Mapping]] = ...,
        clock_enable: _Optional[_Union[ClockEnableFtraceEvent, _Mapping]] = ...,
        clock_disable: _Optional[_Union[ClockDisableFtraceEvent, _Mapping]] = ...,
        clock_set_rate: _Optional[_Union[ClockSetRateFtraceEvent, _Mapping]] = ...,
        sched_wakeup: _Optional[_Union[SchedWakeupFtraceEvent, _Mapping]] = ...,
        sched_blocked_reason: _Optional[_Union[SchedBlockedReasonFtraceEvent, _Mapping]] = ...,
        sched_cpu_hotplug: _Optional[_Union[SchedCpuHotplugFtraceEvent, _Mapping]] = ...,
        sched_waking: _Optional[_Union[SchedWakingFtraceEvent, _Mapping]] = ...,
        ipi_entry: _Optional[_Union[IpiEntryFtraceEvent, _Mapping]] = ...,
        ipi_exit: _Optional[_Union[IpiExitFtraceEvent, _Mapping]] = ...,
        ipi_raise: _Optional[_Union[IpiRaiseFtraceEvent, _Mapping]] = ...,
        softirq_entry: _Optional[_Union[SoftirqEntryFtraceEvent, _Mapping]] = ...,
        softirq_exit: _Optional[_Union[SoftirqExitFtraceEvent, _Mapping]] = ...,
        softirq_raise: _Optional[_Union[SoftirqRaiseFtraceEvent, _Mapping]] = ...,
        i2c_read: _Optional[_Union[I2cReadFtraceEvent, _Mapping]] = ...,
        i2c_write: _Optional[_Union[I2cWriteFtraceEvent, _Mapping]] = ...,
        i2c_result: _Optional[_Union[I2cResultFtraceEvent, _Mapping]] = ...,
        i2c_reply: _Optional[_Union[I2cReplyFtraceEvent, _Mapping]] = ...,
        smbus_read: _Optional[_Union[SmbusReadFtraceEvent, _Mapping]] = ...,
        smbus_write: _Optional[_Union[SmbusWriteFtraceEvent, _Mapping]] = ...,
        smbus_result: _Optional[_Union[SmbusResultFtraceEvent, _Mapping]] = ...,
        smbus_reply: _Optional[_Union[SmbusReplyFtraceEvent, _Mapping]] = ...,
        lowmemory_kill: _Optional[_Union[LowmemoryKillFtraceEvent, _Mapping]] = ...,
        irq_handler_entry: _Optional[_Union[IrqHandlerEntryFtraceEvent, _Mapping]] = ...,
        irq_handler_exit: _Optional[_Union[IrqHandlerExitFtraceEvent, _Mapping]] = ...,
        sync_pt: _Optional[_Union[SyncPtFtraceEvent, _Mapping]] = ...,
        sync_timeline: _Optional[_Union[SyncTimelineFtraceEvent, _Mapping]] = ...,
        sync_wait: _Optional[_Union[SyncWaitFtraceEvent, _Mapping]] = ...,
        ext4_da_write_begin: _Optional[_Union[Ext4DaWriteBeginFtraceEvent, _Mapping]] = ...,
        ext4_da_write_end: _Optional[_Union[Ext4DaWriteEndFtraceEvent, _Mapping]] = ...,
        ext4_sync_file_enter: _Optional[_Union[Ext4SyncFileEnterFtraceEvent, _Mapping]] = ...,
        ext4_sync_file_exit: _Optional[_Union[Ext4SyncFileExitFtraceEvent, _Mapping]] = ...,
        block_rq_issue: _Optional[_Union[BlockRqIssueFtraceEvent, _Mapping]] = ...,
        mm_vmscan_direct_reclaim_begin: _Optional[_Union[MmVmscanDirectReclaimBeginFtraceEvent, _Mapping]] = ...,
        mm_vmscan_direct_reclaim_end: _Optional[_Union[MmVmscanDirectReclaimEndFtraceEvent, _Mapping]] = ...,
        mm_vmscan_kswapd_wake: _Optional[_Union[MmVmscanKswapdWakeFtraceEvent, _Mapping]] = ...,
        mm_vmscan_kswapd_sleep: _Optional[_Union[MmVmscanKswapdSleepFtraceEvent, _Mapping]] = ...,
        binder_transaction: _Optional[_Union[BinderTransactionFtraceEvent, _Mapping]] = ...,
        binder_transaction_received: _Optional[_Union[BinderTransactionReceivedFtraceEvent, _Mapping]] = ...,
        binder_set_priority: _Optional[_Union[BinderSetPriorityFtraceEvent, _Mapping]] = ...,
        binder_lock: _Optional[_Union[BinderLockFtraceEvent, _Mapping]] = ...,
        binder_locked: _Optional[_Union[BinderLockedFtraceEvent, _Mapping]] = ...,
        binder_unlock: _Optional[_Union[BinderUnlockFtraceEvent, _Mapping]] = ...,
        workqueue_activate_work: _Optional[_Union[WorkqueueActivateWorkFtraceEvent, _Mapping]] = ...,
        workqueue_execute_end: _Optional[_Union[WorkqueueExecuteEndFtraceEvent, _Mapping]] = ...,
        workqueue_execute_start: _Optional[_Union[WorkqueueExecuteStartFtraceEvent, _Mapping]] = ...,
        workqueue_queue_work: _Optional[_Union[WorkqueueQueueWorkFtraceEvent, _Mapping]] = ...,
        regulator_disable: _Optional[_Union[RegulatorDisableFtraceEvent, _Mapping]] = ...,
        regulator_disable_complete: _Optional[_Union[RegulatorDisableCompleteFtraceEvent, _Mapping]] = ...,
        regulator_enable: _Optional[_Union[RegulatorEnableFtraceEvent, _Mapping]] = ...,
        regulator_enable_complete: _Optional[_Union[RegulatorEnableCompleteFtraceEvent, _Mapping]] = ...,
        regulator_enable_delay: _Optional[_Union[RegulatorEnableDelayFtraceEvent, _Mapping]] = ...,
        regulator_set_voltage: _Optional[_Union[RegulatorSetVoltageFtraceEvent, _Mapping]] = ...,
        regulator_set_voltage_complete: _Optional[_Union[RegulatorSetVoltageCompleteFtraceEvent, _Mapping]] = ...,
        cgroup_attach_task: _Optional[_Union[CgroupAttachTaskFtraceEvent, _Mapping]] = ...,
        cgroup_mkdir: _Optional[_Union[CgroupMkdirFtraceEvent, _Mapping]] = ...,
        cgroup_remount: _Optional[_Union[CgroupRemountFtraceEvent, _Mapping]] = ...,
        cgroup_rmdir: _Optional[_Union[CgroupRmdirFtraceEvent, _Mapping]] = ...,
        cgroup_transfer_tasks: _Optional[_Union[CgroupTransferTasksFtraceEvent, _Mapping]] = ...,
        cgroup_destroy_root: _Optional[_Union[CgroupDestroyRootFtraceEvent, _Mapping]] = ...,
        cgroup_release: _Optional[_Union[CgroupReleaseFtraceEvent, _Mapping]] = ...,
        cgroup_rename: _Optional[_Union[CgroupRenameFtraceEvent, _Mapping]] = ...,
        cgroup_setup_root: _Optional[_Union[CgroupSetupRootFtraceEvent, _Mapping]] = ...,
        mdp_cmd_kickoff: _Optional[_Union[MdpCmdKickoffFtraceEvent, _Mapping]] = ...,
        mdp_commit: _Optional[_Union[MdpCommitFtraceEvent, _Mapping]] = ...,
        mdp_perf_set_ot: _Optional[_Union[MdpPerfSetOtFtraceEvent, _Mapping]] = ...,
        mdp_sspp_change: _Optional[_Union[MdpSsppChangeFtraceEvent, _Mapping]] = ...,
        tracing_mark_write: _Optional[_Union[TracingMarkWriteFtraceEvent, _Mapping]] = ...,
        mdp_cmd_pingpong_done: _Optional[_Union[MdpCmdPingpongDoneFtraceEvent, _Mapping]] = ...,
        mdp_compare_bw: _Optional[_Union[MdpCompareBwFtraceEvent, _Mapping]] = ...,
        mdp_perf_set_panic_luts: _Optional[_Union[MdpPerfSetPanicLutsFtraceEvent, _Mapping]] = ...,
        mdp_sspp_set: _Optional[_Union[MdpSsppSetFtraceEvent, _Mapping]] = ...,
        mdp_cmd_readptr_done: _Optional[_Union[MdpCmdReadptrDoneFtraceEvent, _Mapping]] = ...,
        mdp_misr_crc: _Optional[_Union[MdpMisrCrcFtraceEvent, _Mapping]] = ...,
        mdp_perf_set_qos_luts: _Optional[_Union[MdpPerfSetQosLutsFtraceEvent, _Mapping]] = ...,
        mdp_trace_counter: _Optional[_Union[MdpTraceCounterFtraceEvent, _Mapping]] = ...,
        mdp_cmd_release_bw: _Optional[_Union[MdpCmdReleaseBwFtraceEvent, _Mapping]] = ...,
        mdp_mixer_update: _Optional[_Union[MdpMixerUpdateFtraceEvent, _Mapping]] = ...,
        mdp_perf_set_wm_levels: _Optional[_Union[MdpPerfSetWmLevelsFtraceEvent, _Mapping]] = ...,
        mdp_video_underrun_done: _Optional[_Union[MdpVideoUnderrunDoneFtraceEvent, _Mapping]] = ...,
        mdp_cmd_wait_pingpong: _Optional[_Union[MdpCmdWaitPingpongFtraceEvent, _Mapping]] = ...,
        mdp_perf_prefill_calc: _Optional[_Union[MdpPerfPrefillCalcFtraceEvent, _Mapping]] = ...,
        mdp_perf_update_bus: _Optional[_Union[MdpPerfUpdateBusFtraceEvent, _Mapping]] = ...,
        rotator_bw_ao_as_context: _Optional[_Union[RotatorBwAoAsContextFtraceEvent, _Mapping]] = ...,
        mm_filemap_add_to_page_cache: _Optional[_Union[MmFilemapAddToPageCacheFtraceEvent, _Mapping]] = ...,
        mm_filemap_delete_from_page_cache: _Optional[_Union[MmFilemapDeleteFromPageCacheFtraceEvent, _Mapping]] = ...,
        mm_compaction_begin: _Optional[_Union[MmCompactionBeginFtraceEvent, _Mapping]] = ...,
        mm_compaction_defer_compaction: _Optional[_Union[MmCompactionDeferCompactionFtraceEvent, _Mapping]] = ...,
        mm_compaction_deferred: _Optional[_Union[MmCompactionDeferredFtraceEvent, _Mapping]] = ...,
        mm_compaction_defer_reset: _Optional[_Union[MmCompactionDeferResetFtraceEvent, _Mapping]] = ...,
        mm_compaction_end: _Optional[_Union[MmCompactionEndFtraceEvent, _Mapping]] = ...,
        mm_compaction_finished: _Optional[_Union[MmCompactionFinishedFtraceEvent, _Mapping]] = ...,
        mm_compaction_isolate_freepages: _Optional[_Union[MmCompactionIsolateFreepagesFtraceEvent, _Mapping]] = ...,
        mm_compaction_isolate_migratepages: _Optional[
            _Union[MmCompactionIsolateMigratepagesFtraceEvent, _Mapping]
        ] = ...,
        mm_compaction_kcompactd_sleep: _Optional[_Union[MmCompactionKcompactdSleepFtraceEvent, _Mapping]] = ...,
        mm_compaction_kcompactd_wake: _Optional[_Union[MmCompactionKcompactdWakeFtraceEvent, _Mapping]] = ...,
        mm_compaction_migratepages: _Optional[_Union[MmCompactionMigratepagesFtraceEvent, _Mapping]] = ...,
        mm_compaction_suitable: _Optional[_Union[MmCompactionSuitableFtraceEvent, _Mapping]] = ...,
        mm_compaction_try_to_compact_pages: _Optional[_Union[MmCompactionTryToCompactPagesFtraceEvent, _Mapping]] = ...,
        mm_compaction_wakeup_kcompactd: _Optional[_Union[MmCompactionWakeupKcompactdFtraceEvent, _Mapping]] = ...,
        suspend_resume: _Optional[_Union[SuspendResumeFtraceEvent, _Mapping]] = ...,
        sched_wakeup_new: _Optional[_Union[SchedWakeupNewFtraceEvent, _Mapping]] = ...,
        block_bio_backmerge: _Optional[_Union[BlockBioBackmergeFtraceEvent, _Mapping]] = ...,
        block_bio_bounce: _Optional[_Union[BlockBioBounceFtraceEvent, _Mapping]] = ...,
        block_bio_complete: _Optional[_Union[BlockBioCompleteFtraceEvent, _Mapping]] = ...,
        block_bio_frontmerge: _Optional[_Union[BlockBioFrontmergeFtraceEvent, _Mapping]] = ...,
        block_bio_queue: _Optional[_Union[BlockBioQueueFtraceEvent, _Mapping]] = ...,
        block_bio_remap: _Optional[_Union[BlockBioRemapFtraceEvent, _Mapping]] = ...,
        block_dirty_buffer: _Optional[_Union[BlockDirtyBufferFtraceEvent, _Mapping]] = ...,
        block_getrq: _Optional[_Union[BlockGetrqFtraceEvent, _Mapping]] = ...,
        block_plug: _Optional[_Union[BlockPlugFtraceEvent, _Mapping]] = ...,
        block_rq_abort: _Optional[_Union[BlockRqAbortFtraceEvent, _Mapping]] = ...,
        block_rq_complete: _Optional[_Union[BlockRqCompleteFtraceEvent, _Mapping]] = ...,
        block_rq_insert: _Optional[_Union[BlockRqInsertFtraceEvent, _Mapping]] = ...,
        block_rq_remap: _Optional[_Union[BlockRqRemapFtraceEvent, _Mapping]] = ...,
        block_rq_requeue: _Optional[_Union[BlockRqRequeueFtraceEvent, _Mapping]] = ...,
        block_sleeprq: _Optional[_Union[BlockSleeprqFtraceEvent, _Mapping]] = ...,
        block_split: _Optional[_Union[BlockSplitFtraceEvent, _Mapping]] = ...,
        block_touch_buffer: _Optional[_Union[BlockTouchBufferFtraceEvent, _Mapping]] = ...,
        block_unplug: _Optional[_Union[BlockUnplugFtraceEvent, _Mapping]] = ...,
        ext4_alloc_da_blocks: _Optional[_Union[Ext4AllocDaBlocksFtraceEvent, _Mapping]] = ...,
        ext4_allocate_blocks: _Optional[_Union[Ext4AllocateBlocksFtraceEvent, _Mapping]] = ...,
        ext4_allocate_inode: _Optional[_Union[Ext4AllocateInodeFtraceEvent, _Mapping]] = ...,
        ext4_begin_ordered_truncate: _Optional[_Union[Ext4BeginOrderedTruncateFtraceEvent, _Mapping]] = ...,
        ext4_collapse_range: _Optional[_Union[Ext4CollapseRangeFtraceEvent, _Mapping]] = ...,
        ext4_da_release_space: _Optional[_Union[Ext4DaReleaseSpaceFtraceEvent, _Mapping]] = ...,
        ext4_da_reserve_space: _Optional[_Union[Ext4DaReserveSpaceFtraceEvent, _Mapping]] = ...,
        ext4_da_update_reserve_space: _Optional[_Union[Ext4DaUpdateReserveSpaceFtraceEvent, _Mapping]] = ...,
        ext4_da_write_pages: _Optional[_Union[Ext4DaWritePagesFtraceEvent, _Mapping]] = ...,
        ext4_da_write_pages_extent: _Optional[_Union[Ext4DaWritePagesExtentFtraceEvent, _Mapping]] = ...,
        ext4_direct_IO_enter: _Optional[_Union[Ext4DirectIOEnterFtraceEvent, _Mapping]] = ...,
        ext4_direct_IO_exit: _Optional[_Union[Ext4DirectIOExitFtraceEvent, _Mapping]] = ...,
        ext4_discard_blocks: _Optional[_Union[Ext4DiscardBlocksFtraceEvent, _Mapping]] = ...,
        ext4_discard_preallocations: _Optional[_Union[Ext4DiscardPreallocationsFtraceEvent, _Mapping]] = ...,
        ext4_drop_inode: _Optional[_Union[Ext4DropInodeFtraceEvent, _Mapping]] = ...,
        ext4_es_cache_extent: _Optional[_Union[Ext4EsCacheExtentFtraceEvent, _Mapping]] = ...,
        ext4_es_find_delayed_extent_range_enter: _Optional[
            _Union[Ext4EsFindDelayedExtentRangeEnterFtraceEvent, _Mapping]
        ] = ...,
        ext4_es_find_delayed_extent_range_exit: _Optional[
            _Union[Ext4EsFindDelayedExtentRangeExitFtraceEvent, _Mapping]
        ] = ...,
        ext4_es_insert_extent: _Optional[_Union[Ext4EsInsertExtentFtraceEvent, _Mapping]] = ...,
        ext4_es_lookup_extent_enter: _Optional[_Union[Ext4EsLookupExtentEnterFtraceEvent, _Mapping]] = ...,
        ext4_es_lookup_extent_exit: _Optional[_Union[Ext4EsLookupExtentExitFtraceEvent, _Mapping]] = ...,
        ext4_es_remove_extent: _Optional[_Union[Ext4EsRemoveExtentFtraceEvent, _Mapping]] = ...,
        ext4_es_shrink: _Optional[_Union[Ext4EsShrinkFtraceEvent, _Mapping]] = ...,
        ext4_es_shrink_count: _Optional[_Union[Ext4EsShrinkCountFtraceEvent, _Mapping]] = ...,
        ext4_es_shrink_scan_enter: _Optional[_Union[Ext4EsShrinkScanEnterFtraceEvent, _Mapping]] = ...,
        ext4_es_shrink_scan_exit: _Optional[_Union[Ext4EsShrinkScanExitFtraceEvent, _Mapping]] = ...,
        ext4_evict_inode: _Optional[_Union[Ext4EvictInodeFtraceEvent, _Mapping]] = ...,
        ext4_ext_convert_to_initialized_enter: _Optional[
            _Union[Ext4ExtConvertToInitializedEnterFtraceEvent, _Mapping]
        ] = ...,
        ext4_ext_convert_to_initialized_fastpath: _Optional[
            _Union[Ext4ExtConvertToInitializedFastpathFtraceEvent, _Mapping]
        ] = ...,
        ext4_ext_handle_unwritten_extents: _Optional[_Union[Ext4ExtHandleUnwrittenExtentsFtraceEvent, _Mapping]] = ...,
        ext4_ext_in_cache: _Optional[_Union[Ext4ExtInCacheFtraceEvent, _Mapping]] = ...,
        ext4_ext_load_extent: _Optional[_Union[Ext4ExtLoadExtentFtraceEvent, _Mapping]] = ...,
        ext4_ext_map_blocks_enter: _Optional[_Union[Ext4ExtMapBlocksEnterFtraceEvent, _Mapping]] = ...,
        ext4_ext_map_blocks_exit: _Optional[_Union[Ext4ExtMapBlocksExitFtraceEvent, _Mapping]] = ...,
        ext4_ext_put_in_cache: _Optional[_Union[Ext4ExtPutInCacheFtraceEvent, _Mapping]] = ...,
        ext4_ext_remove_space: _Optional[_Union[Ext4ExtRemoveSpaceFtraceEvent, _Mapping]] = ...,
        ext4_ext_remove_space_done: _Optional[_Union[Ext4ExtRemoveSpaceDoneFtraceEvent, _Mapping]] = ...,
        ext4_ext_rm_idx: _Optional[_Union[Ext4ExtRmIdxFtraceEvent, _Mapping]] = ...,
        ext4_ext_rm_leaf: _Optional[_Union[Ext4ExtRmLeafFtraceEvent, _Mapping]] = ...,
        ext4_ext_show_extent: _Optional[_Union[Ext4ExtShowExtentFtraceEvent, _Mapping]] = ...,
        ext4_fallocate_enter: _Optional[_Union[Ext4FallocateEnterFtraceEvent, _Mapping]] = ...,
        ext4_fallocate_exit: _Optional[_Union[Ext4FallocateExitFtraceEvent, _Mapping]] = ...,
        ext4_find_delalloc_range: _Optional[_Union[Ext4FindDelallocRangeFtraceEvent, _Mapping]] = ...,
        ext4_forget: _Optional[_Union[Ext4ForgetFtraceEvent, _Mapping]] = ...,
        ext4_free_blocks: _Optional[_Union[Ext4FreeBlocksFtraceEvent, _Mapping]] = ...,
        ext4_free_inode: _Optional[_Union[Ext4FreeInodeFtraceEvent, _Mapping]] = ...,
        ext4_get_implied_cluster_alloc_exit: _Optional[
            _Union[Ext4GetImpliedClusterAllocExitFtraceEvent, _Mapping]
        ] = ...,
        ext4_get_reserved_cluster_alloc: _Optional[_Union[Ext4GetReservedClusterAllocFtraceEvent, _Mapping]] = ...,
        ext4_ind_map_blocks_enter: _Optional[_Union[Ext4IndMapBlocksEnterFtraceEvent, _Mapping]] = ...,
        ext4_ind_map_blocks_exit: _Optional[_Union[Ext4IndMapBlocksExitFtraceEvent, _Mapping]] = ...,
        ext4_insert_range: _Optional[_Union[Ext4InsertRangeFtraceEvent, _Mapping]] = ...,
        ext4_invalidatepage: _Optional[_Union[Ext4InvalidatepageFtraceEvent, _Mapping]] = ...,
        ext4_journal_start: _Optional[_Union[Ext4JournalStartFtraceEvent, _Mapping]] = ...,
        ext4_journal_start_reserved: _Optional[_Union[Ext4JournalStartReservedFtraceEvent, _Mapping]] = ...,
        ext4_journalled_invalidatepage: _Optional[_Union[Ext4JournalledInvalidatepageFtraceEvent, _Mapping]] = ...,
        ext4_journalled_write_end: _Optional[_Union[Ext4JournalledWriteEndFtraceEvent, _Mapping]] = ...,
        ext4_load_inode: _Optional[_Union[Ext4LoadInodeFtraceEvent, _Mapping]] = ...,
        ext4_load_inode_bitmap: _Optional[_Union[Ext4LoadInodeBitmapFtraceEvent, _Mapping]] = ...,
        ext4_mark_inode_dirty: _Optional[_Union[Ext4MarkInodeDirtyFtraceEvent, _Mapping]] = ...,
        ext4_mb_bitmap_load: _Optional[_Union[Ext4MbBitmapLoadFtraceEvent, _Mapping]] = ...,
        ext4_mb_buddy_bitmap_load: _Optional[_Union[Ext4MbBuddyBitmapLoadFtraceEvent, _Mapping]] = ...,
        ext4_mb_discard_preallocations: _Optional[_Union[Ext4MbDiscardPreallocationsFtraceEvent, _Mapping]] = ...,
        ext4_mb_new_group_pa: _Optional[_Union[Ext4MbNewGroupPaFtraceEvent, _Mapping]] = ...,
        ext4_mb_new_inode_pa: _Optional[_Union[Ext4MbNewInodePaFtraceEvent, _Mapping]] = ...,
        ext4_mb_release_group_pa: _Optional[_Union[Ext4MbReleaseGroupPaFtraceEvent, _Mapping]] = ...,
        ext4_mb_release_inode_pa: _Optional[_Union[Ext4MbReleaseInodePaFtraceEvent, _Mapping]] = ...,
        ext4_mballoc_alloc: _Optional[_Union[Ext4MballocAllocFtraceEvent, _Mapping]] = ...,
        ext4_mballoc_discard: _Optional[_Union[Ext4MballocDiscardFtraceEvent, _Mapping]] = ...,
        ext4_mballoc_free: _Optional[_Union[Ext4MballocFreeFtraceEvent, _Mapping]] = ...,
        ext4_mballoc_prealloc: _Optional[_Union[Ext4MballocPreallocFtraceEvent, _Mapping]] = ...,
        ext4_other_inode_update_time: _Optional[_Union[Ext4OtherInodeUpdateTimeFtraceEvent, _Mapping]] = ...,
        ext4_punch_hole: _Optional[_Union[Ext4PunchHoleFtraceEvent, _Mapping]] = ...,
        ext4_read_block_bitmap_load: _Optional[_Union[Ext4ReadBlockBitmapLoadFtraceEvent, _Mapping]] = ...,
        ext4_readpage: _Optional[_Union[Ext4ReadpageFtraceEvent, _Mapping]] = ...,
        ext4_releasepage: _Optional[_Union[Ext4ReleasepageFtraceEvent, _Mapping]] = ...,
        ext4_remove_blocks: _Optional[_Union[Ext4RemoveBlocksFtraceEvent, _Mapping]] = ...,
        ext4_request_blocks: _Optional[_Union[Ext4RequestBlocksFtraceEvent, _Mapping]] = ...,
        ext4_request_inode: _Optional[_Union[Ext4RequestInodeFtraceEvent, _Mapping]] = ...,
        ext4_sync_fs: _Optional[_Union[Ext4SyncFsFtraceEvent, _Mapping]] = ...,
        ext4_trim_all_free: _Optional[_Union[Ext4TrimAllFreeFtraceEvent, _Mapping]] = ...,
        ext4_trim_extent: _Optional[_Union[Ext4TrimExtentFtraceEvent, _Mapping]] = ...,
        ext4_truncate_enter: _Optional[_Union[Ext4TruncateEnterFtraceEvent, _Mapping]] = ...,
        ext4_truncate_exit: _Optional[_Union[Ext4TruncateExitFtraceEvent, _Mapping]] = ...,
        ext4_unlink_enter: _Optional[_Union[Ext4UnlinkEnterFtraceEvent, _Mapping]] = ...,
        ext4_unlink_exit: _Optional[_Union[Ext4UnlinkExitFtraceEvent, _Mapping]] = ...,
        ext4_write_begin: _Optional[_Union[Ext4WriteBeginFtraceEvent, _Mapping]] = ...,
        ext4_write_end: _Optional[_Union[Ext4WriteEndFtraceEvent, _Mapping]] = ...,
        ext4_writepage: _Optional[_Union[Ext4WritepageFtraceEvent, _Mapping]] = ...,
        ext4_writepages: _Optional[_Union[Ext4WritepagesFtraceEvent, _Mapping]] = ...,
        ext4_writepages_result: _Optional[_Union[Ext4WritepagesResultFtraceEvent, _Mapping]] = ...,
        ext4_zero_range: _Optional[_Union[Ext4ZeroRangeFtraceEvent, _Mapping]] = ...,
        task_newtask: _Optional[_Union[TaskNewtaskFtraceEvent, _Mapping]] = ...,
        task_rename: _Optional[_Union[TaskRenameFtraceEvent, _Mapping]] = ...,
        sched_process_exec: _Optional[_Union[SchedProcessExecFtraceEvent, _Mapping]] = ...,
        sched_process_exit: _Optional[_Union[SchedProcessExitFtraceEvent, _Mapping]] = ...,
        sched_process_fork: _Optional[_Union[SchedProcessForkFtraceEvent, _Mapping]] = ...,
        sched_process_free: _Optional[_Union[SchedProcessFreeFtraceEvent, _Mapping]] = ...,
        sched_process_hang: _Optional[_Union[SchedProcessHangFtraceEvent, _Mapping]] = ...,
        sched_process_wait: _Optional[_Union[SchedProcessWaitFtraceEvent, _Mapping]] = ...,
        f2fs_do_submit_bio: _Optional[_Union[F2fsDoSubmitBioFtraceEvent, _Mapping]] = ...,
        f2fs_evict_inode: _Optional[_Union[F2fsEvictInodeFtraceEvent, _Mapping]] = ...,
        f2fs_fallocate: _Optional[_Union[F2fsFallocateFtraceEvent, _Mapping]] = ...,
        f2fs_get_data_block: _Optional[_Union[F2fsGetDataBlockFtraceEvent, _Mapping]] = ...,
        f2fs_get_victim: _Optional[_Union[F2fsGetVictimFtraceEvent, _Mapping]] = ...,
        f2fs_iget: _Optional[_Union[F2fsIgetFtraceEvent, _Mapping]] = ...,
        f2fs_iget_exit: _Optional[_Union[F2fsIgetExitFtraceEvent, _Mapping]] = ...,
        f2fs_new_inode: _Optional[_Union[F2fsNewInodeFtraceEvent, _Mapping]] = ...,
        f2fs_readpage: _Optional[_Union[F2fsReadpageFtraceEvent, _Mapping]] = ...,
        f2fs_reserve_new_block: _Optional[_Union[F2fsReserveNewBlockFtraceEvent, _Mapping]] = ...,
        f2fs_set_page_dirty: _Optional[_Union[F2fsSetPageDirtyFtraceEvent, _Mapping]] = ...,
        f2fs_submit_write_page: _Optional[_Union[F2fsSubmitWritePageFtraceEvent, _Mapping]] = ...,
        f2fs_sync_file_enter: _Optional[_Union[F2fsSyncFileEnterFtraceEvent, _Mapping]] = ...,
        f2fs_sync_file_exit: _Optional[_Union[F2fsSyncFileExitFtraceEvent, _Mapping]] = ...,
        f2fs_sync_fs: _Optional[_Union[F2fsSyncFsFtraceEvent, _Mapping]] = ...,
        f2fs_truncate: _Optional[_Union[F2fsTruncateFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_blocks_enter: _Optional[_Union[F2fsTruncateBlocksEnterFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_blocks_exit: _Optional[_Union[F2fsTruncateBlocksExitFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_data_blocks_range: _Optional[_Union[F2fsTruncateDataBlocksRangeFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_inode_blocks_enter: _Optional[_Union[F2fsTruncateInodeBlocksEnterFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_inode_blocks_exit: _Optional[_Union[F2fsTruncateInodeBlocksExitFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_node: _Optional[_Union[F2fsTruncateNodeFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_nodes_enter: _Optional[_Union[F2fsTruncateNodesEnterFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_nodes_exit: _Optional[_Union[F2fsTruncateNodesExitFtraceEvent, _Mapping]] = ...,
        f2fs_truncate_partial_nodes: _Optional[_Union[F2fsTruncatePartialNodesFtraceEvent, _Mapping]] = ...,
        f2fs_unlink_enter: _Optional[_Union[F2fsUnlinkEnterFtraceEvent, _Mapping]] = ...,
        f2fs_unlink_exit: _Optional[_Union[F2fsUnlinkExitFtraceEvent, _Mapping]] = ...,
        f2fs_vm_page_mkwrite: _Optional[_Union[F2fsVmPageMkwriteFtraceEvent, _Mapping]] = ...,
        f2fs_write_begin: _Optional[_Union[F2fsWriteBeginFtraceEvent, _Mapping]] = ...,
        f2fs_write_checkpoint: _Optional[_Union[F2fsWriteCheckpointFtraceEvent, _Mapping]] = ...,
        f2fs_write_end: _Optional[_Union[F2fsWriteEndFtraceEvent, _Mapping]] = ...,
        alloc_pages_iommu_end: _Optional[_Union[AllocPagesIommuEndFtraceEvent, _Mapping]] = ...,
        alloc_pages_iommu_fail: _Optional[_Union[AllocPagesIommuFailFtraceEvent, _Mapping]] = ...,
        alloc_pages_iommu_start: _Optional[_Union[AllocPagesIommuStartFtraceEvent, _Mapping]] = ...,
        alloc_pages_sys_end: _Optional[_Union[AllocPagesSysEndFtraceEvent, _Mapping]] = ...,
        alloc_pages_sys_fail: _Optional[_Union[AllocPagesSysFailFtraceEvent, _Mapping]] = ...,
        alloc_pages_sys_start: _Optional[_Union[AllocPagesSysStartFtraceEvent, _Mapping]] = ...,
        dma_alloc_contiguous_retry: _Optional[_Union[DmaAllocContiguousRetryFtraceEvent, _Mapping]] = ...,
        iommu_map_range: _Optional[_Union[IommuMapRangeFtraceEvent, _Mapping]] = ...,
        iommu_sec_ptbl_map_range_end: _Optional[_Union[IommuSecPtblMapRangeEndFtraceEvent, _Mapping]] = ...,
        iommu_sec_ptbl_map_range_start: _Optional[_Union[IommuSecPtblMapRangeStartFtraceEvent, _Mapping]] = ...,
        ion_alloc_buffer_end: _Optional[_Union[IonAllocBufferEndFtraceEvent, _Mapping]] = ...,
        ion_alloc_buffer_fail: _Optional[_Union[IonAllocBufferFailFtraceEvent, _Mapping]] = ...,
        ion_alloc_buffer_fallback: _Optional[_Union[IonAllocBufferFallbackFtraceEvent, _Mapping]] = ...,
        ion_alloc_buffer_start: _Optional[_Union[IonAllocBufferStartFtraceEvent, _Mapping]] = ...,
        ion_cp_alloc_retry: _Optional[_Union[IonCpAllocRetryFtraceEvent, _Mapping]] = ...,
        ion_cp_secure_buffer_end: _Optional[_Union[IonCpSecureBufferEndFtraceEvent, _Mapping]] = ...,
        ion_cp_secure_buffer_start: _Optional[_Union[IonCpSecureBufferStartFtraceEvent, _Mapping]] = ...,
        ion_prefetching: _Optional[_Union[IonPrefetchingFtraceEvent, _Mapping]] = ...,
        ion_secure_cma_add_to_pool_end: _Optional[_Union[IonSecureCmaAddToPoolEndFtraceEvent, _Mapping]] = ...,
        ion_secure_cma_add_to_pool_start: _Optional[_Union[IonSecureCmaAddToPoolStartFtraceEvent, _Mapping]] = ...,
        ion_secure_cma_allocate_end: _Optional[_Union[IonSecureCmaAllocateEndFtraceEvent, _Mapping]] = ...,
        ion_secure_cma_allocate_start: _Optional[_Union[IonSecureCmaAllocateStartFtraceEvent, _Mapping]] = ...,
        ion_secure_cma_shrink_pool_end: _Optional[_Union[IonSecureCmaShrinkPoolEndFtraceEvent, _Mapping]] = ...,
        ion_secure_cma_shrink_pool_start: _Optional[_Union[IonSecureCmaShrinkPoolStartFtraceEvent, _Mapping]] = ...,
        kfree: _Optional[_Union[KfreeFtraceEvent, _Mapping]] = ...,
        kmalloc: _Optional[_Union[KmallocFtraceEvent, _Mapping]] = ...,
        kmalloc_node: _Optional[_Union[KmallocNodeFtraceEvent, _Mapping]] = ...,
        kmem_cache_alloc: _Optional[_Union[KmemCacheAllocFtraceEvent, _Mapping]] = ...,
        kmem_cache_alloc_node: _Optional[_Union[KmemCacheAllocNodeFtraceEvent, _Mapping]] = ...,
        kmem_cache_free: _Optional[_Union[KmemCacheFreeFtraceEvent, _Mapping]] = ...,
        migrate_pages_end: _Optional[_Union[MigratePagesEndFtraceEvent, _Mapping]] = ...,
        migrate_pages_start: _Optional[_Union[MigratePagesStartFtraceEvent, _Mapping]] = ...,
        migrate_retry: _Optional[_Union[MigrateRetryFtraceEvent, _Mapping]] = ...,
        mm_page_alloc: _Optional[_Union[MmPageAllocFtraceEvent, _Mapping]] = ...,
        mm_page_alloc_extfrag: _Optional[_Union[MmPageAllocExtfragFtraceEvent, _Mapping]] = ...,
        mm_page_alloc_zone_locked: _Optional[_Union[MmPageAllocZoneLockedFtraceEvent, _Mapping]] = ...,
        mm_page_free: _Optional[_Union[MmPageFreeFtraceEvent, _Mapping]] = ...,
        mm_page_free_batched: _Optional[_Union[MmPageFreeBatchedFtraceEvent, _Mapping]] = ...,
        mm_page_pcpu_drain: _Optional[_Union[MmPagePcpuDrainFtraceEvent, _Mapping]] = ...,
        rss_stat: _Optional[_Union[RssStatFtraceEvent, _Mapping]] = ...,
        ion_heap_shrink: _Optional[_Union[IonHeapShrinkFtraceEvent, _Mapping]] = ...,
        ion_heap_grow: _Optional[_Union[IonHeapGrowFtraceEvent, _Mapping]] = ...,
        fence_init: _Optional[_Union[FenceInitFtraceEvent, _Mapping]] = ...,
        fence_destroy: _Optional[_Union[FenceDestroyFtraceEvent, _Mapping]] = ...,
        fence_enable_signal: _Optional[_Union[FenceEnableSignalFtraceEvent, _Mapping]] = ...,
        fence_signaled: _Optional[_Union[FenceSignaledFtraceEvent, _Mapping]] = ...,
        clk_enable: _Optional[_Union[ClkEnableFtraceEvent, _Mapping]] = ...,
        clk_disable: _Optional[_Union[ClkDisableFtraceEvent, _Mapping]] = ...,
        clk_set_rate: _Optional[_Union[ClkSetRateFtraceEvent, _Mapping]] = ...,
        binder_transaction_alloc_buf: _Optional[_Union[BinderTransactionAllocBufFtraceEvent, _Mapping]] = ...,
        signal_deliver: _Optional[_Union[SignalDeliverFtraceEvent, _Mapping]] = ...,
        signal_generate: _Optional[_Union[SignalGenerateFtraceEvent, _Mapping]] = ...,
        oom_score_adj_update: _Optional[_Union[OomScoreAdjUpdateFtraceEvent, _Mapping]] = ...,
        generic: _Optional[_Union[GenericFtraceEvent, _Mapping]] = ...,
        mm_event_record: _Optional[_Union[MmEventRecordFtraceEvent, _Mapping]] = ...,
        sys_enter: _Optional[_Union[SysEnterFtraceEvent, _Mapping]] = ...,
        sys_exit: _Optional[_Union[SysExitFtraceEvent, _Mapping]] = ...,
        zero: _Optional[_Union[ZeroFtraceEvent, _Mapping]] = ...,
        gpu_frequency: _Optional[_Union[GpuFrequencyFtraceEvent, _Mapping]] = ...,
        sde_tracing_mark_write: _Optional[_Union[SdeTracingMarkWriteFtraceEvent, _Mapping]] = ...,
        mark_victim: _Optional[_Union[MarkVictimFtraceEvent, _Mapping]] = ...,
        ion_stat: _Optional[_Union[IonStatFtraceEvent, _Mapping]] = ...,
        ion_buffer_create: _Optional[_Union[IonBufferCreateFtraceEvent, _Mapping]] = ...,
        ion_buffer_destroy: _Optional[_Union[IonBufferDestroyFtraceEvent, _Mapping]] = ...,
        scm_call_start: _Optional[_Union[ScmCallStartFtraceEvent, _Mapping]] = ...,
        scm_call_end: _Optional[_Union[ScmCallEndFtraceEvent, _Mapping]] = ...,
        gpu_mem_total: _Optional[_Union[GpuMemTotalFtraceEvent, _Mapping]] = ...,
        thermal_temperature: _Optional[_Union[ThermalTemperatureFtraceEvent, _Mapping]] = ...,
        cdev_update: _Optional[_Union[CdevUpdateFtraceEvent, _Mapping]] = ...,
        cpuhp_exit: _Optional[_Union[CpuhpExitFtraceEvent, _Mapping]] = ...,
        cpuhp_multi_enter: _Optional[_Union[CpuhpMultiEnterFtraceEvent, _Mapping]] = ...,
        cpuhp_enter: _Optional[_Union[CpuhpEnterFtraceEvent, _Mapping]] = ...,
        cpuhp_latency: _Optional[_Union[CpuhpLatencyFtraceEvent, _Mapping]] = ...,
        fastrpc_dma_stat: _Optional[_Union[FastrpcDmaStatFtraceEvent, _Mapping]] = ...,
        dpu_tracing_mark_write: _Optional[_Union[DpuTracingMarkWriteFtraceEvent, _Mapping]] = ...,
        g2d_tracing_mark_write: _Optional[_Union[G2dTracingMarkWriteFtraceEvent, _Mapping]] = ...,
        mali_tracing_mark_write: _Optional[_Union[MaliTracingMarkWriteFtraceEvent, _Mapping]] = ...,
        dma_heap_stat: _Optional[_Union[DmaHeapStatFtraceEvent, _Mapping]] = ...,
        cpuhp_pause: _Optional[_Union[CpuhpPauseFtraceEvent, _Mapping]] = ...,
        sched_pi_setprio: _Optional[_Union[SchedPiSetprioFtraceEvent, _Mapping]] = ...,
        sde_sde_evtlog: _Optional[_Union[SdeSdeEvtlogFtraceEvent, _Mapping]] = ...,
        sde_sde_perf_calc_crtc: _Optional[_Union[SdeSdePerfCalcCrtcFtraceEvent, _Mapping]] = ...,
        sde_sde_perf_crtc_update: _Optional[_Union[SdeSdePerfCrtcUpdateFtraceEvent, _Mapping]] = ...,
        sde_sde_perf_set_qos_luts: _Optional[_Union[SdeSdePerfSetQosLutsFtraceEvent, _Mapping]] = ...,
        sde_sde_perf_update_bus: _Optional[_Union[SdeSdePerfUpdateBusFtraceEvent, _Mapping]] = ...,
        rss_stat_throttled: _Optional[_Union[RssStatThrottledFtraceEvent, _Mapping]] = ...,
        netif_receive_skb: _Optional[_Union[NetifReceiveSkbFtraceEvent, _Mapping]] = ...,
        net_dev_xmit: _Optional[_Union[NetDevXmitFtraceEvent, _Mapping]] = ...,
        inet_sock_set_state: _Optional[_Union[InetSockSetStateFtraceEvent, _Mapping]] = ...,
        tcp_retransmit_skb: _Optional[_Union[TcpRetransmitSkbFtraceEvent, _Mapping]] = ...,
        cros_ec_sensorhub_data: _Optional[_Union[CrosEcSensorhubDataFtraceEvent, _Mapping]] = ...,
        napi_gro_receive_entry: _Optional[_Union[NapiGroReceiveEntryFtraceEvent, _Mapping]] = ...,
        napi_gro_receive_exit: _Optional[_Union[NapiGroReceiveExitFtraceEvent, _Mapping]] = ...,
        kfree_skb: _Optional[_Union[KfreeSkbFtraceEvent, _Mapping]] = ...,
        kvm_access_fault: _Optional[_Union[KvmAccessFaultFtraceEvent, _Mapping]] = ...,
        kvm_ack_irq: _Optional[_Union[KvmAckIrqFtraceEvent, _Mapping]] = ...,
        kvm_age_hva: _Optional[_Union[KvmAgeHvaFtraceEvent, _Mapping]] = ...,
        kvm_age_page: _Optional[_Union[KvmAgePageFtraceEvent, _Mapping]] = ...,
        kvm_arm_clear_debug: _Optional[_Union[KvmArmClearDebugFtraceEvent, _Mapping]] = ...,
        kvm_arm_set_dreg32: _Optional[_Union[KvmArmSetDreg32FtraceEvent, _Mapping]] = ...,
        kvm_arm_set_regset: _Optional[_Union[KvmArmSetRegsetFtraceEvent, _Mapping]] = ...,
        kvm_arm_setup_debug: _Optional[_Union[KvmArmSetupDebugFtraceEvent, _Mapping]] = ...,
        kvm_entry: _Optional[_Union[KvmEntryFtraceEvent, _Mapping]] = ...,
        kvm_exit: _Optional[_Union[KvmExitFtraceEvent, _Mapping]] = ...,
        kvm_fpu: _Optional[_Union[KvmFpuFtraceEvent, _Mapping]] = ...,
        kvm_get_timer_map: _Optional[_Union[KvmGetTimerMapFtraceEvent, _Mapping]] = ...,
        kvm_guest_fault: _Optional[_Union[KvmGuestFaultFtraceEvent, _Mapping]] = ...,
        kvm_handle_sys_reg: _Optional[_Union[KvmHandleSysRegFtraceEvent, _Mapping]] = ...,
        kvm_hvc_arm64: _Optional[_Union[KvmHvcArm64FtraceEvent, _Mapping]] = ...,
        kvm_irq_line: _Optional[_Union[KvmIrqLineFtraceEvent, _Mapping]] = ...,
        kvm_mmio: _Optional[_Union[KvmMmioFtraceEvent, _Mapping]] = ...,
        kvm_mmio_emulate: _Optional[_Union[KvmMmioEmulateFtraceEvent, _Mapping]] = ...,
        kvm_set_guest_debug: _Optional[_Union[KvmSetGuestDebugFtraceEvent, _Mapping]] = ...,
        kvm_set_irq: _Optional[_Union[KvmSetIrqFtraceEvent, _Mapping]] = ...,
        kvm_set_spte_hva: _Optional[_Union[KvmSetSpteHvaFtraceEvent, _Mapping]] = ...,
        kvm_set_way_flush: _Optional[_Union[KvmSetWayFlushFtraceEvent, _Mapping]] = ...,
        kvm_sys_access: _Optional[_Union[KvmSysAccessFtraceEvent, _Mapping]] = ...,
        kvm_test_age_hva: _Optional[_Union[KvmTestAgeHvaFtraceEvent, _Mapping]] = ...,
        kvm_timer_emulate: _Optional[_Union[KvmTimerEmulateFtraceEvent, _Mapping]] = ...,
        kvm_timer_hrtimer_expire: _Optional[_Union[KvmTimerHrtimerExpireFtraceEvent, _Mapping]] = ...,
        kvm_timer_restore_state: _Optional[_Union[KvmTimerRestoreStateFtraceEvent, _Mapping]] = ...,
        kvm_timer_save_state: _Optional[_Union[KvmTimerSaveStateFtraceEvent, _Mapping]] = ...,
        kvm_timer_update_irq: _Optional[_Union[KvmTimerUpdateIrqFtraceEvent, _Mapping]] = ...,
        kvm_toggle_cache: _Optional[_Union[KvmToggleCacheFtraceEvent, _Mapping]] = ...,
        kvm_unmap_hva_range: _Optional[_Union[KvmUnmapHvaRangeFtraceEvent, _Mapping]] = ...,
        kvm_userspace_exit: _Optional[_Union[KvmUserspaceExitFtraceEvent, _Mapping]] = ...,
        kvm_vcpu_wakeup: _Optional[_Union[KvmVcpuWakeupFtraceEvent, _Mapping]] = ...,
        kvm_wfx_arm64: _Optional[_Union[KvmWfxArm64FtraceEvent, _Mapping]] = ...,
        trap_reg: _Optional[_Union[TrapRegFtraceEvent, _Mapping]] = ...,
        vgic_update_irq_pending: _Optional[_Union[VgicUpdateIrqPendingFtraceEvent, _Mapping]] = ...,
        wakeup_source_activate: _Optional[_Union[WakeupSourceActivateFtraceEvent, _Mapping]] = ...,
        wakeup_source_deactivate: _Optional[_Union[WakeupSourceDeactivateFtraceEvent, _Mapping]] = ...,
        ufshcd_command: _Optional[_Union[UfshcdCommandFtraceEvent, _Mapping]] = ...,
        ufshcd_clk_gating: _Optional[_Union[UfshcdClkGatingFtraceEvent, _Mapping]] = ...,
        console: _Optional[_Union[ConsoleFtraceEvent, _Mapping]] = ...,
        drm_vblank_event: _Optional[_Union[DrmVblankEventFtraceEvent, _Mapping]] = ...,
        drm_vblank_event_delivered: _Optional[_Union[DrmVblankEventDeliveredFtraceEvent, _Mapping]] = ...,
        drm_sched_job: _Optional[_Union[DrmSchedJobFtraceEvent, _Mapping]] = ...,
        drm_run_job: _Optional[_Union[DrmRunJobFtraceEvent, _Mapping]] = ...,
        drm_sched_process_job: _Optional[_Union[DrmSchedProcessJobFtraceEvent, _Mapping]] = ...,
        dma_fence_init: _Optional[_Union[DmaFenceInitFtraceEvent, _Mapping]] = ...,
        dma_fence_emit: _Optional[_Union[DmaFenceEmitFtraceEvent, _Mapping]] = ...,
        dma_fence_signaled: _Optional[_Union[DmaFenceSignaledFtraceEvent, _Mapping]] = ...,
        dma_fence_wait_start: _Optional[_Union[DmaFenceWaitStartFtraceEvent, _Mapping]] = ...,
        dma_fence_wait_end: _Optional[_Union[DmaFenceWaitEndFtraceEvent, _Mapping]] = ...,
        f2fs_iostat: _Optional[_Union[F2fsIostatFtraceEvent, _Mapping]] = ...,
        f2fs_iostat_latency: _Optional[_Union[F2fsIostatLatencyFtraceEvent, _Mapping]] = ...,
        sched_cpu_util_cfs: _Optional[_Union[SchedCpuUtilCfsFtraceEvent, _Mapping]] = ...,
        v4l2_qbuf: _Optional[_Union[V4l2QbufFtraceEvent, _Mapping]] = ...,
        v4l2_dqbuf: _Optional[_Union[V4l2DqbufFtraceEvent, _Mapping]] = ...,
        vb2_v4l2_buf_queue: _Optional[_Union[Vb2V4l2BufQueueFtraceEvent, _Mapping]] = ...,
        vb2_v4l2_buf_done: _Optional[_Union[Vb2V4l2BufDoneFtraceEvent, _Mapping]] = ...,
        vb2_v4l2_qbuf: _Optional[_Union[Vb2V4l2QbufFtraceEvent, _Mapping]] = ...,
        vb2_v4l2_dqbuf: _Optional[_Union[Vb2V4l2DqbufFtraceEvent, _Mapping]] = ...,
        dsi_cmd_fifo_status: _Optional[_Union[DsiCmdFifoStatusFtraceEvent, _Mapping]] = ...,
        dsi_rx: _Optional[_Union[DsiRxFtraceEvent, _Mapping]] = ...,
        dsi_tx: _Optional[_Union[DsiTxFtraceEvent, _Mapping]] = ...,
        android_fs_dataread_end: _Optional[_Union[AndroidFsDatareadEndFtraceEvent, _Mapping]] = ...,
        android_fs_dataread_start: _Optional[_Union[AndroidFsDatareadStartFtraceEvent, _Mapping]] = ...,
        android_fs_datawrite_end: _Optional[_Union[AndroidFsDatawriteEndFtraceEvent, _Mapping]] = ...,
        android_fs_datawrite_start: _Optional[_Union[AndroidFsDatawriteStartFtraceEvent, _Mapping]] = ...,
        android_fs_fsync_end: _Optional[_Union[AndroidFsFsyncEndFtraceEvent, _Mapping]] = ...,
        android_fs_fsync_start: _Optional[_Union[AndroidFsFsyncStartFtraceEvent, _Mapping]] = ...,
        funcgraph_entry: _Optional[_Union[FuncgraphEntryFtraceEvent, _Mapping]] = ...,
        funcgraph_exit: _Optional[_Union[FuncgraphExitFtraceEvent, _Mapping]] = ...,
        virtio_video_cmd: _Optional[_Union[VirtioVideoCmdFtraceEvent, _Mapping]] = ...,
        virtio_video_cmd_done: _Optional[_Union[VirtioVideoCmdDoneFtraceEvent, _Mapping]] = ...,
        virtio_video_resource_queue: _Optional[_Union[VirtioVideoResourceQueueFtraceEvent, _Mapping]] = ...,
        virtio_video_resource_queue_done: _Optional[_Union[VirtioVideoResourceQueueDoneFtraceEvent, _Mapping]] = ...,
        mm_shrink_slab_start: _Optional[_Union[MmShrinkSlabStartFtraceEvent, _Mapping]] = ...,
        mm_shrink_slab_end: _Optional[_Union[MmShrinkSlabEndFtraceEvent, _Mapping]] = ...,
        trusty_smc: _Optional[_Union[TrustySmcFtraceEvent, _Mapping]] = ...,
        trusty_smc_done: _Optional[_Union[TrustySmcDoneFtraceEvent, _Mapping]] = ...,
        trusty_std_call32: _Optional[_Union[TrustyStdCall32FtraceEvent, _Mapping]] = ...,
        trusty_std_call32_done: _Optional[_Union[TrustyStdCall32DoneFtraceEvent, _Mapping]] = ...,
        trusty_share_memory: _Optional[_Union[TrustyShareMemoryFtraceEvent, _Mapping]] = ...,
        trusty_share_memory_done: _Optional[_Union[TrustyShareMemoryDoneFtraceEvent, _Mapping]] = ...,
        trusty_reclaim_memory: _Optional[_Union[TrustyReclaimMemoryFtraceEvent, _Mapping]] = ...,
        trusty_reclaim_memory_done: _Optional[_Union[TrustyReclaimMemoryDoneFtraceEvent, _Mapping]] = ...,
        trusty_irq: _Optional[_Union[TrustyIrqFtraceEvent, _Mapping]] = ...,
        trusty_ipc_handle_event: _Optional[_Union[TrustyIpcHandleEventFtraceEvent, _Mapping]] = ...,
        trusty_ipc_connect: _Optional[_Union[TrustyIpcConnectFtraceEvent, _Mapping]] = ...,
        trusty_ipc_connect_end: _Optional[_Union[TrustyIpcConnectEndFtraceEvent, _Mapping]] = ...,
        trusty_ipc_write: _Optional[_Union[TrustyIpcWriteFtraceEvent, _Mapping]] = ...,
        trusty_ipc_poll: _Optional[_Union[TrustyIpcPollFtraceEvent, _Mapping]] = ...,
        trusty_ipc_read: _Optional[_Union[TrustyIpcReadFtraceEvent, _Mapping]] = ...,
        trusty_ipc_read_end: _Optional[_Union[TrustyIpcReadEndFtraceEvent, _Mapping]] = ...,
        trusty_ipc_rx: _Optional[_Union[TrustyIpcRxFtraceEvent, _Mapping]] = ...,
        trusty_enqueue_nop: _Optional[_Union[TrustyEnqueueNopFtraceEvent, _Mapping]] = ...,
        cma_alloc_start: _Optional[_Union[CmaAllocStartFtraceEvent, _Mapping]] = ...,
        cma_alloc_info: _Optional[_Union[CmaAllocInfoFtraceEvent, _Mapping]] = ...,
        lwis_tracing_mark_write: _Optional[_Union[LwisTracingMarkWriteFtraceEvent, _Mapping]] = ...,
        virtio_gpu_cmd_queue: _Optional[_Union[VirtioGpuCmdQueueFtraceEvent, _Mapping]] = ...,
        virtio_gpu_cmd_response: _Optional[_Union[VirtioGpuCmdResponseFtraceEvent, _Mapping]] = ...,
        mali_mali_KCPU_CQS_SET: _Optional[_Union[MaliMaliKCPUCQSSETFtraceEvent, _Mapping]] = ...,
        mali_mali_KCPU_CQS_WAIT_START: _Optional[_Union[MaliMaliKCPUCQSWAITSTARTFtraceEvent, _Mapping]] = ...,
        mali_mali_KCPU_CQS_WAIT_END: _Optional[_Union[MaliMaliKCPUCQSWAITENDFtraceEvent, _Mapping]] = ...,
        mali_mali_KCPU_FENCE_SIGNAL: _Optional[_Union[MaliMaliKCPUFENCESIGNALFtraceEvent, _Mapping]] = ...,
        mali_mali_KCPU_FENCE_WAIT_START: _Optional[_Union[MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _Mapping]] = ...,
        mali_mali_KCPU_FENCE_WAIT_END: _Optional[_Union[MaliMaliKCPUFENCEWAITENDFtraceEvent, _Mapping]] = ...,
        hyp_enter: _Optional[_Union[HypEnterFtraceEvent, _Mapping]] = ...,
        hyp_exit: _Optional[_Union[HypExitFtraceEvent, _Mapping]] = ...,
        host_hcall: _Optional[_Union[HostHcallFtraceEvent, _Mapping]] = ...,
        host_smc: _Optional[_Union[HostSmcFtraceEvent, _Mapping]] = ...,
        host_mem_abort: _Optional[_Union[HostMemAbortFtraceEvent, _Mapping]] = ...,
        suspend_resume_minimal: _Optional[_Union[SuspendResumeMinimalFtraceEvent, _Mapping]] = ...,
        mali_mali_CSF_INTERRUPT_START: _Optional[_Union[MaliMaliCSFINTERRUPTSTARTFtraceEvent, _Mapping]] = ...,
        mali_mali_CSF_INTERRUPT_END: _Optional[_Union[MaliMaliCSFINTERRUPTENDFtraceEvent, _Mapping]] = ...,
        samsung_tracing_mark_write: _Optional[_Union[SamsungTracingMarkWriteFtraceEvent, _Mapping]] = ...,
        binder_command: _Optional[_Union[BinderCommandFtraceEvent, _Mapping]] = ...,
        binder_return: _Optional[_Union[BinderReturnFtraceEvent, _Mapping]] = ...,
        sched_switch_with_ctrs: _Optional[_Union[SchedSwitchWithCtrsFtraceEvent, _Mapping]] = ...,
        gpu_work_period: _Optional[_Union[GpuWorkPeriodFtraceEvent, _Mapping]] = ...,
    ) -> None: ...

class FtraceCpuStats(_message.Message):
    __slots__ = (
        "cpu",
        "entries",
        "overrun",
        "commit_overrun",
        "bytes_read",
        "oldest_event_ts",
        "now_ts",
        "dropped_events",
        "read_events",
    )
    CPU_FIELD_NUMBER: _ClassVar[int]
    ENTRIES_FIELD_NUMBER: _ClassVar[int]
    OVERRUN_FIELD_NUMBER: _ClassVar[int]
    COMMIT_OVERRUN_FIELD_NUMBER: _ClassVar[int]
    BYTES_READ_FIELD_NUMBER: _ClassVar[int]
    OLDEST_EVENT_TS_FIELD_NUMBER: _ClassVar[int]
    NOW_TS_FIELD_NUMBER: _ClassVar[int]
    DROPPED_EVENTS_FIELD_NUMBER: _ClassVar[int]
    READ_EVENTS_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    entries: int
    overrun: int
    commit_overrun: int
    bytes_read: int
    oldest_event_ts: float
    now_ts: float
    dropped_events: int
    read_events: int
    def __init__(
        self,
        cpu: _Optional[int] = ...,
        entries: _Optional[int] = ...,
        overrun: _Optional[int] = ...,
        commit_overrun: _Optional[int] = ...,
        bytes_read: _Optional[int] = ...,
        oldest_event_ts: _Optional[float] = ...,
        now_ts: _Optional[float] = ...,
        dropped_events: _Optional[int] = ...,
        read_events: _Optional[int] = ...,
    ) -> None: ...

class FtraceStats(_message.Message):
    __slots__ = (
        "phase",
        "cpu_stats",
        "kernel_symbols_parsed",
        "kernel_symbols_mem_kb",
        "atrace_errors",
        "unknown_ftrace_events",
        "failed_ftrace_events",
        "preserve_ftrace_buffer",
        "ftrace_parse_errors",
    )

    class Phase(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNSPECIFIED: _ClassVar[FtraceStats.Phase]
        START_OF_TRACE: _ClassVar[FtraceStats.Phase]
        END_OF_TRACE: _ClassVar[FtraceStats.Phase]

    UNSPECIFIED: FtraceStats.Phase
    START_OF_TRACE: FtraceStats.Phase
    END_OF_TRACE: FtraceStats.Phase
    PHASE_FIELD_NUMBER: _ClassVar[int]
    CPU_STATS_FIELD_NUMBER: _ClassVar[int]
    KERNEL_SYMBOLS_PARSED_FIELD_NUMBER: _ClassVar[int]
    KERNEL_SYMBOLS_MEM_KB_FIELD_NUMBER: _ClassVar[int]
    ATRACE_ERRORS_FIELD_NUMBER: _ClassVar[int]
    UNKNOWN_FTRACE_EVENTS_FIELD_NUMBER: _ClassVar[int]
    FAILED_FTRACE_EVENTS_FIELD_NUMBER: _ClassVar[int]
    PRESERVE_FTRACE_BUFFER_FIELD_NUMBER: _ClassVar[int]
    FTRACE_PARSE_ERRORS_FIELD_NUMBER: _ClassVar[int]
    phase: FtraceStats.Phase
    cpu_stats: _containers.RepeatedCompositeFieldContainer[FtraceCpuStats]
    kernel_symbols_parsed: int
    kernel_symbols_mem_kb: int
    atrace_errors: str
    unknown_ftrace_events: _containers.RepeatedScalarFieldContainer[str]
    failed_ftrace_events: _containers.RepeatedScalarFieldContainer[str]
    preserve_ftrace_buffer: bool
    ftrace_parse_errors: _containers.RepeatedScalarFieldContainer[FtraceParseStatus]
    def __init__(
        self,
        phase: _Optional[_Union[FtraceStats.Phase, str]] = ...,
        cpu_stats: _Optional[_Iterable[_Union[FtraceCpuStats, _Mapping]]] = ...,
        kernel_symbols_parsed: _Optional[int] = ...,
        kernel_symbols_mem_kb: _Optional[int] = ...,
        atrace_errors: _Optional[str] = ...,
        unknown_ftrace_events: _Optional[_Iterable[str]] = ...,
        failed_ftrace_events: _Optional[_Iterable[str]] = ...,
        preserve_ftrace_buffer: bool = ...,
        ftrace_parse_errors: _Optional[_Iterable[_Union[FtraceParseStatus, str]]] = ...,
    ) -> None: ...

class FtraceEventBundle(_message.Message):
    __slots__ = (
        "cpu",
        "event",
        "lost_events",
        "compact_sched",
        "ftrace_clock",
        "ftrace_timestamp",
        "boot_timestamp",
        "error",
    )

    class CompactSched(_message.Message):
        __slots__ = (
            "intern_table",
            "switch_timestamp",
            "switch_prev_state",
            "switch_next_pid",
            "switch_next_prio",
            "switch_next_comm_index",
            "waking_timestamp",
            "waking_pid",
            "waking_target_cpu",
            "waking_prio",
            "waking_comm_index",
            "waking_common_flags",
        )
        INTERN_TABLE_FIELD_NUMBER: _ClassVar[int]
        SWITCH_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
        SWITCH_PREV_STATE_FIELD_NUMBER: _ClassVar[int]
        SWITCH_NEXT_PID_FIELD_NUMBER: _ClassVar[int]
        SWITCH_NEXT_PRIO_FIELD_NUMBER: _ClassVar[int]
        SWITCH_NEXT_COMM_INDEX_FIELD_NUMBER: _ClassVar[int]
        WAKING_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
        WAKING_PID_FIELD_NUMBER: _ClassVar[int]
        WAKING_TARGET_CPU_FIELD_NUMBER: _ClassVar[int]
        WAKING_PRIO_FIELD_NUMBER: _ClassVar[int]
        WAKING_COMM_INDEX_FIELD_NUMBER: _ClassVar[int]
        WAKING_COMMON_FLAGS_FIELD_NUMBER: _ClassVar[int]
        intern_table: _containers.RepeatedScalarFieldContainer[str]
        switch_timestamp: _containers.RepeatedScalarFieldContainer[int]
        switch_prev_state: _containers.RepeatedScalarFieldContainer[int]
        switch_next_pid: _containers.RepeatedScalarFieldContainer[int]
        switch_next_prio: _containers.RepeatedScalarFieldContainer[int]
        switch_next_comm_index: _containers.RepeatedScalarFieldContainer[int]
        waking_timestamp: _containers.RepeatedScalarFieldContainer[int]
        waking_pid: _containers.RepeatedScalarFieldContainer[int]
        waking_target_cpu: _containers.RepeatedScalarFieldContainer[int]
        waking_prio: _containers.RepeatedScalarFieldContainer[int]
        waking_comm_index: _containers.RepeatedScalarFieldContainer[int]
        waking_common_flags: _containers.RepeatedScalarFieldContainer[int]
        def __init__(
            self,
            intern_table: _Optional[_Iterable[str]] = ...,
            switch_timestamp: _Optional[_Iterable[int]] = ...,
            switch_prev_state: _Optional[_Iterable[int]] = ...,
            switch_next_pid: _Optional[_Iterable[int]] = ...,
            switch_next_prio: _Optional[_Iterable[int]] = ...,
            switch_next_comm_index: _Optional[_Iterable[int]] = ...,
            waking_timestamp: _Optional[_Iterable[int]] = ...,
            waking_pid: _Optional[_Iterable[int]] = ...,
            waking_target_cpu: _Optional[_Iterable[int]] = ...,
            waking_prio: _Optional[_Iterable[int]] = ...,
            waking_comm_index: _Optional[_Iterable[int]] = ...,
            waking_common_flags: _Optional[_Iterable[int]] = ...,
        ) -> None: ...

    class FtraceError(_message.Message):
        __slots__ = ("timestamp", "status")
        TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
        STATUS_FIELD_NUMBER: _ClassVar[int]
        timestamp: int
        status: FtraceParseStatus
        def __init__(
            self, timestamp: _Optional[int] = ..., status: _Optional[_Union[FtraceParseStatus, str]] = ...
        ) -> None: ...

    CPU_FIELD_NUMBER: _ClassVar[int]
    EVENT_FIELD_NUMBER: _ClassVar[int]
    LOST_EVENTS_FIELD_NUMBER: _ClassVar[int]
    COMPACT_SCHED_FIELD_NUMBER: _ClassVar[int]
    FTRACE_CLOCK_FIELD_NUMBER: _ClassVar[int]
    FTRACE_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    BOOT_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    ERROR_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    event: _containers.RepeatedCompositeFieldContainer[FtraceEvent]
    lost_events: bool
    compact_sched: FtraceEventBundle.CompactSched
    ftrace_clock: FtraceClock
    ftrace_timestamp: int
    boot_timestamp: int
    error: _containers.RepeatedCompositeFieldContainer[FtraceEventBundle.FtraceError]
    def __init__(
        self,
        cpu: _Optional[int] = ...,
        event: _Optional[_Iterable[_Union[FtraceEvent, _Mapping]]] = ...,
        lost_events: bool = ...,
        compact_sched: _Optional[_Union[FtraceEventBundle.CompactSched, _Mapping]] = ...,
        ftrace_clock: _Optional[_Union[FtraceClock, str]] = ...,
        ftrace_timestamp: _Optional[int] = ...,
        boot_timestamp: _Optional[int] = ...,
        error: _Optional[_Iterable[_Union[FtraceEventBundle.FtraceError, _Mapping]]] = ...,
    ) -> None: ...

class GpuCounterEvent(_message.Message):
    __slots__ = ("counter_descriptor", "counters", "gpu_id")

    class GpuCounter(_message.Message):
        __slots__ = ("counter_id", "int_value", "double_value")
        COUNTER_ID_FIELD_NUMBER: _ClassVar[int]
        INT_VALUE_FIELD_NUMBER: _ClassVar[int]
        DOUBLE_VALUE_FIELD_NUMBER: _ClassVar[int]
        counter_id: int
        int_value: int
        double_value: float
        def __init__(
            self,
            counter_id: _Optional[int] = ...,
            int_value: _Optional[int] = ...,
            double_value: _Optional[float] = ...,
        ) -> None: ...

    COUNTER_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    COUNTERS_FIELD_NUMBER: _ClassVar[int]
    GPU_ID_FIELD_NUMBER: _ClassVar[int]
    counter_descriptor: GpuCounterDescriptor
    counters: _containers.RepeatedCompositeFieldContainer[GpuCounterEvent.GpuCounter]
    gpu_id: int
    def __init__(
        self,
        counter_descriptor: _Optional[_Union[GpuCounterDescriptor, _Mapping]] = ...,
        counters: _Optional[_Iterable[_Union[GpuCounterEvent.GpuCounter, _Mapping]]] = ...,
        gpu_id: _Optional[int] = ...,
    ) -> None: ...

class GpuLog(_message.Message):
    __slots__ = ("severity", "tag", "log_message")

    class Severity(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        LOG_SEVERITY_UNSPECIFIED: _ClassVar[GpuLog.Severity]
        LOG_SEVERITY_VERBOSE: _ClassVar[GpuLog.Severity]
        LOG_SEVERITY_DEBUG: _ClassVar[GpuLog.Severity]
        LOG_SEVERITY_INFO: _ClassVar[GpuLog.Severity]
        LOG_SEVERITY_WARNING: _ClassVar[GpuLog.Severity]
        LOG_SEVERITY_ERROR: _ClassVar[GpuLog.Severity]

    LOG_SEVERITY_UNSPECIFIED: GpuLog.Severity
    LOG_SEVERITY_VERBOSE: GpuLog.Severity
    LOG_SEVERITY_DEBUG: GpuLog.Severity
    LOG_SEVERITY_INFO: GpuLog.Severity
    LOG_SEVERITY_WARNING: GpuLog.Severity
    LOG_SEVERITY_ERROR: GpuLog.Severity
    SEVERITY_FIELD_NUMBER: _ClassVar[int]
    TAG_FIELD_NUMBER: _ClassVar[int]
    LOG_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    severity: GpuLog.Severity
    tag: str
    log_message: str
    def __init__(
        self,
        severity: _Optional[_Union[GpuLog.Severity, str]] = ...,
        tag: _Optional[str] = ...,
        log_message: _Optional[str] = ...,
    ) -> None: ...

class GpuRenderStageEvent(_message.Message):
    __slots__ = (
        "event_id",
        "duration",
        "hw_queue_iid",
        "stage_iid",
        "gpu_id",
        "context",
        "render_target_handle",
        "submission_id",
        "extra_data",
        "render_pass_handle",
        "render_subpass_index_mask",
        "command_buffer_handle",
        "specifications",
        "hw_queue_id",
        "stage_id",
    )
    Extensions: _python_message._ExtensionDict

    class ExtraData(_message.Message):
        __slots__ = ("name", "value")
        NAME_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        name: str
        value: str
        def __init__(self, name: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...

    class Specifications(_message.Message):
        __slots__ = ("context_spec", "hw_queue", "stage")

        class ContextSpec(_message.Message):
            __slots__ = ("context", "pid")
            CONTEXT_FIELD_NUMBER: _ClassVar[int]
            PID_FIELD_NUMBER: _ClassVar[int]
            context: int
            pid: int
            def __init__(self, context: _Optional[int] = ..., pid: _Optional[int] = ...) -> None: ...

        class Description(_message.Message):
            __slots__ = ("name", "description")
            NAME_FIELD_NUMBER: _ClassVar[int]
            DESCRIPTION_FIELD_NUMBER: _ClassVar[int]
            name: str
            description: str
            def __init__(self, name: _Optional[str] = ..., description: _Optional[str] = ...) -> None: ...

        CONTEXT_SPEC_FIELD_NUMBER: _ClassVar[int]
        HW_QUEUE_FIELD_NUMBER: _ClassVar[int]
        STAGE_FIELD_NUMBER: _ClassVar[int]
        context_spec: GpuRenderStageEvent.Specifications.ContextSpec
        hw_queue: _containers.RepeatedCompositeFieldContainer[GpuRenderStageEvent.Specifications.Description]
        stage: _containers.RepeatedCompositeFieldContainer[GpuRenderStageEvent.Specifications.Description]
        def __init__(
            self,
            context_spec: _Optional[_Union[GpuRenderStageEvent.Specifications.ContextSpec, _Mapping]] = ...,
            hw_queue: _Optional[_Iterable[_Union[GpuRenderStageEvent.Specifications.Description, _Mapping]]] = ...,
            stage: _Optional[_Iterable[_Union[GpuRenderStageEvent.Specifications.Description, _Mapping]]] = ...,
        ) -> None: ...

    EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    DURATION_FIELD_NUMBER: _ClassVar[int]
    HW_QUEUE_IID_FIELD_NUMBER: _ClassVar[int]
    STAGE_IID_FIELD_NUMBER: _ClassVar[int]
    GPU_ID_FIELD_NUMBER: _ClassVar[int]
    CONTEXT_FIELD_NUMBER: _ClassVar[int]
    RENDER_TARGET_HANDLE_FIELD_NUMBER: _ClassVar[int]
    SUBMISSION_ID_FIELD_NUMBER: _ClassVar[int]
    EXTRA_DATA_FIELD_NUMBER: _ClassVar[int]
    RENDER_PASS_HANDLE_FIELD_NUMBER: _ClassVar[int]
    RENDER_SUBPASS_INDEX_MASK_FIELD_NUMBER: _ClassVar[int]
    COMMAND_BUFFER_HANDLE_FIELD_NUMBER: _ClassVar[int]
    SPECIFICATIONS_FIELD_NUMBER: _ClassVar[int]
    HW_QUEUE_ID_FIELD_NUMBER: _ClassVar[int]
    STAGE_ID_FIELD_NUMBER: _ClassVar[int]
    event_id: int
    duration: int
    hw_queue_iid: int
    stage_iid: int
    gpu_id: int
    context: int
    render_target_handle: int
    submission_id: int
    extra_data: _containers.RepeatedCompositeFieldContainer[GpuRenderStageEvent.ExtraData]
    render_pass_handle: int
    render_subpass_index_mask: _containers.RepeatedScalarFieldContainer[int]
    command_buffer_handle: int
    specifications: GpuRenderStageEvent.Specifications
    hw_queue_id: int
    stage_id: int
    def __init__(
        self,
        event_id: _Optional[int] = ...,
        duration: _Optional[int] = ...,
        hw_queue_iid: _Optional[int] = ...,
        stage_iid: _Optional[int] = ...,
        gpu_id: _Optional[int] = ...,
        context: _Optional[int] = ...,
        render_target_handle: _Optional[int] = ...,
        submission_id: _Optional[int] = ...,
        extra_data: _Optional[_Iterable[_Union[GpuRenderStageEvent.ExtraData, _Mapping]]] = ...,
        render_pass_handle: _Optional[int] = ...,
        render_subpass_index_mask: _Optional[_Iterable[int]] = ...,
        command_buffer_handle: _Optional[int] = ...,
        specifications: _Optional[_Union[GpuRenderStageEvent.Specifications, _Mapping]] = ...,
        hw_queue_id: _Optional[int] = ...,
        stage_id: _Optional[int] = ...,
    ) -> None: ...

class InternedGraphicsContext(_message.Message):
    __slots__ = ("iid", "pid", "api")

    class Api(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNDEFINED: _ClassVar[InternedGraphicsContext.Api]
        OPEN_GL: _ClassVar[InternedGraphicsContext.Api]
        VULKAN: _ClassVar[InternedGraphicsContext.Api]
        OPEN_CL: _ClassVar[InternedGraphicsContext.Api]

    UNDEFINED: InternedGraphicsContext.Api
    OPEN_GL: InternedGraphicsContext.Api
    VULKAN: InternedGraphicsContext.Api
    OPEN_CL: InternedGraphicsContext.Api
    IID_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    API_FIELD_NUMBER: _ClassVar[int]
    iid: int
    pid: int
    api: InternedGraphicsContext.Api
    def __init__(
        self,
        iid: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        api: _Optional[_Union[InternedGraphicsContext.Api, str]] = ...,
    ) -> None: ...

class InternedGpuRenderStageSpecification(_message.Message):
    __slots__ = ("iid", "name", "description", "category")

    class RenderStageCategory(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        OTHER: _ClassVar[InternedGpuRenderStageSpecification.RenderStageCategory]
        GRAPHICS: _ClassVar[InternedGpuRenderStageSpecification.RenderStageCategory]
        COMPUTE: _ClassVar[InternedGpuRenderStageSpecification.RenderStageCategory]

    OTHER: InternedGpuRenderStageSpecification.RenderStageCategory
    GRAPHICS: InternedGpuRenderStageSpecification.RenderStageCategory
    COMPUTE: InternedGpuRenderStageSpecification.RenderStageCategory
    IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    DESCRIPTION_FIELD_NUMBER: _ClassVar[int]
    CATEGORY_FIELD_NUMBER: _ClassVar[int]
    iid: int
    name: str
    description: str
    category: InternedGpuRenderStageSpecification.RenderStageCategory
    def __init__(
        self,
        iid: _Optional[int] = ...,
        name: _Optional[str] = ...,
        description: _Optional[str] = ...,
        category: _Optional[_Union[InternedGpuRenderStageSpecification.RenderStageCategory, str]] = ...,
    ) -> None: ...

class VulkanApiEvent(_message.Message):
    __slots__ = ("vk_debug_utils_object_name", "vk_queue_submit")

    class VkDebugUtilsObjectName(_message.Message):
        __slots__ = ("pid", "vk_device", "object_type", "object", "object_name")
        PID_FIELD_NUMBER: _ClassVar[int]
        VK_DEVICE_FIELD_NUMBER: _ClassVar[int]
        OBJECT_TYPE_FIELD_NUMBER: _ClassVar[int]
        OBJECT_FIELD_NUMBER: _ClassVar[int]
        OBJECT_NAME_FIELD_NUMBER: _ClassVar[int]
        pid: int
        vk_device: int
        object_type: int
        object: int
        object_name: str
        def __init__(
            self,
            pid: _Optional[int] = ...,
            vk_device: _Optional[int] = ...,
            object_type: _Optional[int] = ...,
            object: _Optional[int] = ...,
            object_name: _Optional[str] = ...,
        ) -> None: ...

    class VkQueueSubmit(_message.Message):
        __slots__ = ("duration_ns", "pid", "tid", "vk_queue", "vk_command_buffers", "submission_id")
        DURATION_NS_FIELD_NUMBER: _ClassVar[int]
        PID_FIELD_NUMBER: _ClassVar[int]
        TID_FIELD_NUMBER: _ClassVar[int]
        VK_QUEUE_FIELD_NUMBER: _ClassVar[int]
        VK_COMMAND_BUFFERS_FIELD_NUMBER: _ClassVar[int]
        SUBMISSION_ID_FIELD_NUMBER: _ClassVar[int]
        duration_ns: int
        pid: int
        tid: int
        vk_queue: int
        vk_command_buffers: _containers.RepeatedScalarFieldContainer[int]
        submission_id: int
        def __init__(
            self,
            duration_ns: _Optional[int] = ...,
            pid: _Optional[int] = ...,
            tid: _Optional[int] = ...,
            vk_queue: _Optional[int] = ...,
            vk_command_buffers: _Optional[_Iterable[int]] = ...,
            submission_id: _Optional[int] = ...,
        ) -> None: ...

    VK_DEBUG_UTILS_OBJECT_NAME_FIELD_NUMBER: _ClassVar[int]
    VK_QUEUE_SUBMIT_FIELD_NUMBER: _ClassVar[int]
    vk_debug_utils_object_name: VulkanApiEvent.VkDebugUtilsObjectName
    vk_queue_submit: VulkanApiEvent.VkQueueSubmit
    def __init__(
        self,
        vk_debug_utils_object_name: _Optional[_Union[VulkanApiEvent.VkDebugUtilsObjectName, _Mapping]] = ...,
        vk_queue_submit: _Optional[_Union[VulkanApiEvent.VkQueueSubmit, _Mapping]] = ...,
    ) -> None: ...

class VulkanMemoryEventAnnotation(_message.Message):
    __slots__ = ("key_iid", "int_value", "double_value", "string_iid")
    KEY_IID_FIELD_NUMBER: _ClassVar[int]
    INT_VALUE_FIELD_NUMBER: _ClassVar[int]
    DOUBLE_VALUE_FIELD_NUMBER: _ClassVar[int]
    STRING_IID_FIELD_NUMBER: _ClassVar[int]
    key_iid: int
    int_value: int
    double_value: float
    string_iid: int
    def __init__(
        self,
        key_iid: _Optional[int] = ...,
        int_value: _Optional[int] = ...,
        double_value: _Optional[float] = ...,
        string_iid: _Optional[int] = ...,
    ) -> None: ...

class VulkanMemoryEvent(_message.Message):
    __slots__ = (
        "source",
        "operation",
        "timestamp",
        "pid",
        "memory_address",
        "memory_size",
        "caller_iid",
        "allocation_scope",
        "annotations",
        "device",
        "device_memory",
        "memory_type",
        "heap",
        "object_handle",
    )

    class Source(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        SOURCE_UNSPECIFIED: _ClassVar[VulkanMemoryEvent.Source]
        SOURCE_DRIVER: _ClassVar[VulkanMemoryEvent.Source]
        SOURCE_DEVICE: _ClassVar[VulkanMemoryEvent.Source]
        SOURCE_DEVICE_MEMORY: _ClassVar[VulkanMemoryEvent.Source]
        SOURCE_BUFFER: _ClassVar[VulkanMemoryEvent.Source]
        SOURCE_IMAGE: _ClassVar[VulkanMemoryEvent.Source]

    SOURCE_UNSPECIFIED: VulkanMemoryEvent.Source
    SOURCE_DRIVER: VulkanMemoryEvent.Source
    SOURCE_DEVICE: VulkanMemoryEvent.Source
    SOURCE_DEVICE_MEMORY: VulkanMemoryEvent.Source
    SOURCE_BUFFER: VulkanMemoryEvent.Source
    SOURCE_IMAGE: VulkanMemoryEvent.Source

    class Operation(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        OP_UNSPECIFIED: _ClassVar[VulkanMemoryEvent.Operation]
        OP_CREATE: _ClassVar[VulkanMemoryEvent.Operation]
        OP_DESTROY: _ClassVar[VulkanMemoryEvent.Operation]
        OP_BIND: _ClassVar[VulkanMemoryEvent.Operation]
        OP_DESTROY_BOUND: _ClassVar[VulkanMemoryEvent.Operation]
        OP_ANNOTATIONS: _ClassVar[VulkanMemoryEvent.Operation]

    OP_UNSPECIFIED: VulkanMemoryEvent.Operation
    OP_CREATE: VulkanMemoryEvent.Operation
    OP_DESTROY: VulkanMemoryEvent.Operation
    OP_BIND: VulkanMemoryEvent.Operation
    OP_DESTROY_BOUND: VulkanMemoryEvent.Operation
    OP_ANNOTATIONS: VulkanMemoryEvent.Operation

    class AllocationScope(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        SCOPE_UNSPECIFIED: _ClassVar[VulkanMemoryEvent.AllocationScope]
        SCOPE_COMMAND: _ClassVar[VulkanMemoryEvent.AllocationScope]
        SCOPE_OBJECT: _ClassVar[VulkanMemoryEvent.AllocationScope]
        SCOPE_CACHE: _ClassVar[VulkanMemoryEvent.AllocationScope]
        SCOPE_DEVICE: _ClassVar[VulkanMemoryEvent.AllocationScope]
        SCOPE_INSTANCE: _ClassVar[VulkanMemoryEvent.AllocationScope]

    SCOPE_UNSPECIFIED: VulkanMemoryEvent.AllocationScope
    SCOPE_COMMAND: VulkanMemoryEvent.AllocationScope
    SCOPE_OBJECT: VulkanMemoryEvent.AllocationScope
    SCOPE_CACHE: VulkanMemoryEvent.AllocationScope
    SCOPE_DEVICE: VulkanMemoryEvent.AllocationScope
    SCOPE_INSTANCE: VulkanMemoryEvent.AllocationScope
    SOURCE_FIELD_NUMBER: _ClassVar[int]
    OPERATION_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    MEMORY_ADDRESS_FIELD_NUMBER: _ClassVar[int]
    MEMORY_SIZE_FIELD_NUMBER: _ClassVar[int]
    CALLER_IID_FIELD_NUMBER: _ClassVar[int]
    ALLOCATION_SCOPE_FIELD_NUMBER: _ClassVar[int]
    ANNOTATIONS_FIELD_NUMBER: _ClassVar[int]
    DEVICE_FIELD_NUMBER: _ClassVar[int]
    DEVICE_MEMORY_FIELD_NUMBER: _ClassVar[int]
    MEMORY_TYPE_FIELD_NUMBER: _ClassVar[int]
    HEAP_FIELD_NUMBER: _ClassVar[int]
    OBJECT_HANDLE_FIELD_NUMBER: _ClassVar[int]
    source: VulkanMemoryEvent.Source
    operation: VulkanMemoryEvent.Operation
    timestamp: int
    pid: int
    memory_address: int
    memory_size: int
    caller_iid: int
    allocation_scope: VulkanMemoryEvent.AllocationScope
    annotations: _containers.RepeatedCompositeFieldContainer[VulkanMemoryEventAnnotation]
    device: int
    device_memory: int
    memory_type: int
    heap: int
    object_handle: int
    def __init__(
        self,
        source: _Optional[_Union[VulkanMemoryEvent.Source, str]] = ...,
        operation: _Optional[_Union[VulkanMemoryEvent.Operation, str]] = ...,
        timestamp: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        memory_address: _Optional[int] = ...,
        memory_size: _Optional[int] = ...,
        caller_iid: _Optional[int] = ...,
        allocation_scope: _Optional[_Union[VulkanMemoryEvent.AllocationScope, str]] = ...,
        annotations: _Optional[_Iterable[_Union[VulkanMemoryEventAnnotation, _Mapping]]] = ...,
        device: _Optional[int] = ...,
        device_memory: _Optional[int] = ...,
        memory_type: _Optional[int] = ...,
        heap: _Optional[int] = ...,
        object_handle: _Optional[int] = ...,
    ) -> None: ...

class InternedString(_message.Message):
    __slots__ = ("iid", "str")
    IID_FIELD_NUMBER: _ClassVar[int]
    STR_FIELD_NUMBER: _ClassVar[int]
    iid: int
    str: bytes
    def __init__(self, iid: _Optional[int] = ..., str: _Optional[bytes] = ...) -> None: ...

class ProfiledFrameSymbols(_message.Message):
    __slots__ = ("frame_iid", "function_name_id", "file_name_id", "line_number")
    FRAME_IID_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_NAME_ID_FIELD_NUMBER: _ClassVar[int]
    FILE_NAME_ID_FIELD_NUMBER: _ClassVar[int]
    LINE_NUMBER_FIELD_NUMBER: _ClassVar[int]
    frame_iid: int
    function_name_id: _containers.RepeatedScalarFieldContainer[int]
    file_name_id: _containers.RepeatedScalarFieldContainer[int]
    line_number: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self,
        frame_iid: _Optional[int] = ...,
        function_name_id: _Optional[_Iterable[int]] = ...,
        file_name_id: _Optional[_Iterable[int]] = ...,
        line_number: _Optional[_Iterable[int]] = ...,
    ) -> None: ...

class Line(_message.Message):
    __slots__ = ("function_name", "source_file_name", "line_number")
    FUNCTION_NAME_FIELD_NUMBER: _ClassVar[int]
    SOURCE_FILE_NAME_FIELD_NUMBER: _ClassVar[int]
    LINE_NUMBER_FIELD_NUMBER: _ClassVar[int]
    function_name: str
    source_file_name: str
    line_number: int
    def __init__(
        self,
        function_name: _Optional[str] = ...,
        source_file_name: _Optional[str] = ...,
        line_number: _Optional[int] = ...,
    ) -> None: ...

class AddressSymbols(_message.Message):
    __slots__ = ("address", "lines")
    ADDRESS_FIELD_NUMBER: _ClassVar[int]
    LINES_FIELD_NUMBER: _ClassVar[int]
    address: int
    lines: _containers.RepeatedCompositeFieldContainer[Line]
    def __init__(
        self, address: _Optional[int] = ..., lines: _Optional[_Iterable[_Union[Line, _Mapping]]] = ...
    ) -> None: ...

class ModuleSymbols(_message.Message):
    __slots__ = ("path", "build_id", "address_symbols")
    PATH_FIELD_NUMBER: _ClassVar[int]
    BUILD_ID_FIELD_NUMBER: _ClassVar[int]
    ADDRESS_SYMBOLS_FIELD_NUMBER: _ClassVar[int]
    path: str
    build_id: str
    address_symbols: _containers.RepeatedCompositeFieldContainer[AddressSymbols]
    def __init__(
        self,
        path: _Optional[str] = ...,
        build_id: _Optional[str] = ...,
        address_symbols: _Optional[_Iterable[_Union[AddressSymbols, _Mapping]]] = ...,
    ) -> None: ...

class Mapping(_message.Message):
    __slots__ = ("iid", "build_id", "exact_offset", "start_offset", "start", "end", "load_bias", "path_string_ids")
    IID_FIELD_NUMBER: _ClassVar[int]
    BUILD_ID_FIELD_NUMBER: _ClassVar[int]
    EXACT_OFFSET_FIELD_NUMBER: _ClassVar[int]
    START_OFFSET_FIELD_NUMBER: _ClassVar[int]
    START_FIELD_NUMBER: _ClassVar[int]
    END_FIELD_NUMBER: _ClassVar[int]
    LOAD_BIAS_FIELD_NUMBER: _ClassVar[int]
    PATH_STRING_IDS_FIELD_NUMBER: _ClassVar[int]
    iid: int
    build_id: int
    exact_offset: int
    start_offset: int
    start: int
    end: int
    load_bias: int
    path_string_ids: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self,
        iid: _Optional[int] = ...,
        build_id: _Optional[int] = ...,
        exact_offset: _Optional[int] = ...,
        start_offset: _Optional[int] = ...,
        start: _Optional[int] = ...,
        end: _Optional[int] = ...,
        load_bias: _Optional[int] = ...,
        path_string_ids: _Optional[_Iterable[int]] = ...,
    ) -> None: ...

class Frame(_message.Message):
    __slots__ = ("iid", "function_name_id", "mapping_id", "rel_pc")
    IID_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_NAME_ID_FIELD_NUMBER: _ClassVar[int]
    MAPPING_ID_FIELD_NUMBER: _ClassVar[int]
    REL_PC_FIELD_NUMBER: _ClassVar[int]
    iid: int
    function_name_id: int
    mapping_id: int
    rel_pc: int
    def __init__(
        self,
        iid: _Optional[int] = ...,
        function_name_id: _Optional[int] = ...,
        mapping_id: _Optional[int] = ...,
        rel_pc: _Optional[int] = ...,
    ) -> None: ...

class Callstack(_message.Message):
    __slots__ = ("iid", "frame_ids")
    IID_FIELD_NUMBER: _ClassVar[int]
    FRAME_IDS_FIELD_NUMBER: _ClassVar[int]
    iid: int
    frame_ids: _containers.RepeatedScalarFieldContainer[int]
    def __init__(self, iid: _Optional[int] = ..., frame_ids: _Optional[_Iterable[int]] = ...) -> None: ...

class HistogramName(_message.Message):
    __slots__ = ("iid", "name")
    IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    iid: int
    name: str
    def __init__(self, iid: _Optional[int] = ..., name: _Optional[str] = ...) -> None: ...

class ChromeHistogramSample(_message.Message):
    __slots__ = ("name_hash", "name", "sample", "name_iid")
    NAME_HASH_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    SAMPLE_FIELD_NUMBER: _ClassVar[int]
    NAME_IID_FIELD_NUMBER: _ClassVar[int]
    name_hash: int
    name: str
    sample: int
    name_iid: int
    def __init__(
        self,
        name_hash: _Optional[int] = ...,
        name: _Optional[str] = ...,
        sample: _Optional[int] = ...,
        name_iid: _Optional[int] = ...,
    ) -> None: ...

class DebugAnnotation(_message.Message):
    __slots__ = (
        "name_iid",
        "name",
        "bool_value",
        "uint_value",
        "int_value",
        "double_value",
        "pointer_value",
        "nested_value",
        "legacy_json_value",
        "string_value",
        "string_value_iid",
        "proto_type_name",
        "proto_type_name_iid",
        "proto_value",
        "dict_entries",
        "array_values",
    )

    class NestedValue(_message.Message):
        __slots__ = (
            "nested_type",
            "dict_keys",
            "dict_values",
            "array_values",
            "int_value",
            "double_value",
            "bool_value",
            "string_value",
        )

        class NestedType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            UNSPECIFIED: _ClassVar[DebugAnnotation.NestedValue.NestedType]
            DICT: _ClassVar[DebugAnnotation.NestedValue.NestedType]
            ARRAY: _ClassVar[DebugAnnotation.NestedValue.NestedType]

        UNSPECIFIED: DebugAnnotation.NestedValue.NestedType
        DICT: DebugAnnotation.NestedValue.NestedType
        ARRAY: DebugAnnotation.NestedValue.NestedType
        NESTED_TYPE_FIELD_NUMBER: _ClassVar[int]
        DICT_KEYS_FIELD_NUMBER: _ClassVar[int]
        DICT_VALUES_FIELD_NUMBER: _ClassVar[int]
        ARRAY_VALUES_FIELD_NUMBER: _ClassVar[int]
        INT_VALUE_FIELD_NUMBER: _ClassVar[int]
        DOUBLE_VALUE_FIELD_NUMBER: _ClassVar[int]
        BOOL_VALUE_FIELD_NUMBER: _ClassVar[int]
        STRING_VALUE_FIELD_NUMBER: _ClassVar[int]
        nested_type: DebugAnnotation.NestedValue.NestedType
        dict_keys: _containers.RepeatedScalarFieldContainer[str]
        dict_values: _containers.RepeatedCompositeFieldContainer[DebugAnnotation.NestedValue]
        array_values: _containers.RepeatedCompositeFieldContainer[DebugAnnotation.NestedValue]
        int_value: int
        double_value: float
        bool_value: bool
        string_value: str
        def __init__(
            self,
            nested_type: _Optional[_Union[DebugAnnotation.NestedValue.NestedType, str]] = ...,
            dict_keys: _Optional[_Iterable[str]] = ...,
            dict_values: _Optional[_Iterable[_Union[DebugAnnotation.NestedValue, _Mapping]]] = ...,
            array_values: _Optional[_Iterable[_Union[DebugAnnotation.NestedValue, _Mapping]]] = ...,
            int_value: _Optional[int] = ...,
            double_value: _Optional[float] = ...,
            bool_value: bool = ...,
            string_value: _Optional[str] = ...,
        ) -> None: ...

    NAME_IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    BOOL_VALUE_FIELD_NUMBER: _ClassVar[int]
    UINT_VALUE_FIELD_NUMBER: _ClassVar[int]
    INT_VALUE_FIELD_NUMBER: _ClassVar[int]
    DOUBLE_VALUE_FIELD_NUMBER: _ClassVar[int]
    POINTER_VALUE_FIELD_NUMBER: _ClassVar[int]
    NESTED_VALUE_FIELD_NUMBER: _ClassVar[int]
    LEGACY_JSON_VALUE_FIELD_NUMBER: _ClassVar[int]
    STRING_VALUE_FIELD_NUMBER: _ClassVar[int]
    STRING_VALUE_IID_FIELD_NUMBER: _ClassVar[int]
    PROTO_TYPE_NAME_FIELD_NUMBER: _ClassVar[int]
    PROTO_TYPE_NAME_IID_FIELD_NUMBER: _ClassVar[int]
    PROTO_VALUE_FIELD_NUMBER: _ClassVar[int]
    DICT_ENTRIES_FIELD_NUMBER: _ClassVar[int]
    ARRAY_VALUES_FIELD_NUMBER: _ClassVar[int]
    name_iid: int
    name: str
    bool_value: bool
    uint_value: int
    int_value: int
    double_value: float
    pointer_value: int
    nested_value: DebugAnnotation.NestedValue
    legacy_json_value: str
    string_value: str
    string_value_iid: int
    proto_type_name: str
    proto_type_name_iid: int
    proto_value: bytes
    dict_entries: _containers.RepeatedCompositeFieldContainer[DebugAnnotation]
    array_values: _containers.RepeatedCompositeFieldContainer[DebugAnnotation]
    def __init__(
        self,
        name_iid: _Optional[int] = ...,
        name: _Optional[str] = ...,
        bool_value: bool = ...,
        uint_value: _Optional[int] = ...,
        int_value: _Optional[int] = ...,
        double_value: _Optional[float] = ...,
        pointer_value: _Optional[int] = ...,
        nested_value: _Optional[_Union[DebugAnnotation.NestedValue, _Mapping]] = ...,
        legacy_json_value: _Optional[str] = ...,
        string_value: _Optional[str] = ...,
        string_value_iid: _Optional[int] = ...,
        proto_type_name: _Optional[str] = ...,
        proto_type_name_iid: _Optional[int] = ...,
        proto_value: _Optional[bytes] = ...,
        dict_entries: _Optional[_Iterable[_Union[DebugAnnotation, _Mapping]]] = ...,
        array_values: _Optional[_Iterable[_Union[DebugAnnotation, _Mapping]]] = ...,
    ) -> None: ...

class DebugAnnotationName(_message.Message):
    __slots__ = ("iid", "name")
    IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    iid: int
    name: str
    def __init__(self, iid: _Optional[int] = ..., name: _Optional[str] = ...) -> None: ...

class DebugAnnotationValueTypeName(_message.Message):
    __slots__ = ("iid", "name")
    IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    iid: int
    name: str
    def __init__(self, iid: _Optional[int] = ..., name: _Optional[str] = ...) -> None: ...

class LogMessage(_message.Message):
    __slots__ = ("source_location_iid", "body_iid", "prio")

    class Priority(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        PRIO_UNSPECIFIED: _ClassVar[LogMessage.Priority]
        PRIO_UNUSED: _ClassVar[LogMessage.Priority]
        PRIO_VERBOSE: _ClassVar[LogMessage.Priority]
        PRIO_DEBUG: _ClassVar[LogMessage.Priority]
        PRIO_INFO: _ClassVar[LogMessage.Priority]
        PRIO_WARN: _ClassVar[LogMessage.Priority]
        PRIO_ERROR: _ClassVar[LogMessage.Priority]
        PRIO_FATAL: _ClassVar[LogMessage.Priority]

    PRIO_UNSPECIFIED: LogMessage.Priority
    PRIO_UNUSED: LogMessage.Priority
    PRIO_VERBOSE: LogMessage.Priority
    PRIO_DEBUG: LogMessage.Priority
    PRIO_INFO: LogMessage.Priority
    PRIO_WARN: LogMessage.Priority
    PRIO_ERROR: LogMessage.Priority
    PRIO_FATAL: LogMessage.Priority
    SOURCE_LOCATION_IID_FIELD_NUMBER: _ClassVar[int]
    BODY_IID_FIELD_NUMBER: _ClassVar[int]
    PRIO_FIELD_NUMBER: _ClassVar[int]
    source_location_iid: int
    body_iid: int
    prio: LogMessage.Priority
    def __init__(
        self,
        source_location_iid: _Optional[int] = ...,
        body_iid: _Optional[int] = ...,
        prio: _Optional[_Union[LogMessage.Priority, str]] = ...,
    ) -> None: ...

class LogMessageBody(_message.Message):
    __slots__ = ("iid", "body")
    IID_FIELD_NUMBER: _ClassVar[int]
    BODY_FIELD_NUMBER: _ClassVar[int]
    iid: int
    body: str
    def __init__(self, iid: _Optional[int] = ..., body: _Optional[str] = ...) -> None: ...

class UnsymbolizedSourceLocation(_message.Message):
    __slots__ = ("iid", "mapping_id", "rel_pc")
    IID_FIELD_NUMBER: _ClassVar[int]
    MAPPING_ID_FIELD_NUMBER: _ClassVar[int]
    REL_PC_FIELD_NUMBER: _ClassVar[int]
    iid: int
    mapping_id: int
    rel_pc: int
    def __init__(
        self, iid: _Optional[int] = ..., mapping_id: _Optional[int] = ..., rel_pc: _Optional[int] = ...
    ) -> None: ...

class SourceLocation(_message.Message):
    __slots__ = ("iid", "file_name", "function_name", "line_number")
    IID_FIELD_NUMBER: _ClassVar[int]
    FILE_NAME_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_NAME_FIELD_NUMBER: _ClassVar[int]
    LINE_NUMBER_FIELD_NUMBER: _ClassVar[int]
    iid: int
    file_name: str
    function_name: str
    line_number: int
    def __init__(
        self,
        iid: _Optional[int] = ...,
        file_name: _Optional[str] = ...,
        function_name: _Optional[str] = ...,
        line_number: _Optional[int] = ...,
    ) -> None: ...

class ChromeActiveProcesses(_message.Message):
    __slots__ = ("pid",)
    PID_FIELD_NUMBER: _ClassVar[int]
    pid: _containers.RepeatedScalarFieldContainer[int]
    def __init__(self, pid: _Optional[_Iterable[int]] = ...) -> None: ...

class ChromeApplicationStateInfo(_message.Message):
    __slots__ = ("application_state",)

    class ChromeApplicationState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        APPLICATION_STATE_UNKNOWN: _ClassVar[ChromeApplicationStateInfo.ChromeApplicationState]
        APPLICATION_STATE_HAS_RUNNING_ACTIVITIES: _ClassVar[ChromeApplicationStateInfo.ChromeApplicationState]
        APPLICATION_STATE_HAS_PAUSED_ACTIVITIES: _ClassVar[ChromeApplicationStateInfo.ChromeApplicationState]
        APPLICATION_STATE_HAS_STOPPED_ACTIVITIES: _ClassVar[ChromeApplicationStateInfo.ChromeApplicationState]
        APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES: _ClassVar[ChromeApplicationStateInfo.ChromeApplicationState]

    APPLICATION_STATE_UNKNOWN: ChromeApplicationStateInfo.ChromeApplicationState
    APPLICATION_STATE_HAS_RUNNING_ACTIVITIES: ChromeApplicationStateInfo.ChromeApplicationState
    APPLICATION_STATE_HAS_PAUSED_ACTIVITIES: ChromeApplicationStateInfo.ChromeApplicationState
    APPLICATION_STATE_HAS_STOPPED_ACTIVITIES: ChromeApplicationStateInfo.ChromeApplicationState
    APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES: ChromeApplicationStateInfo.ChromeApplicationState
    APPLICATION_STATE_FIELD_NUMBER: _ClassVar[int]
    application_state: ChromeApplicationStateInfo.ChromeApplicationState
    def __init__(
        self, application_state: _Optional[_Union[ChromeApplicationStateInfo.ChromeApplicationState, str]] = ...
    ) -> None: ...

class ChromeCompositorSchedulerState(_message.Message):
    __slots__ = (
        "state_machine",
        "observing_begin_frame_source",
        "begin_impl_frame_deadline_task",
        "pending_begin_frame_task",
        "skipped_last_frame_missed_exceeded_deadline",
        "inside_action",
        "deadline_mode",
        "deadline_us",
        "deadline_scheduled_at_us",
        "now_us",
        "now_to_deadline_delta_us",
        "now_to_deadline_scheduled_at_delta_us",
        "begin_impl_frame_args",
        "begin_frame_observer_state",
        "begin_frame_source_state",
        "compositor_timing_history",
    )

    class BeginImplFrameDeadlineMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        DEADLINE_MODE_UNSPECIFIED: _ClassVar[ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode]
        DEADLINE_MODE_NONE: _ClassVar[ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode]
        DEADLINE_MODE_IMMEDIATE: _ClassVar[ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode]
        DEADLINE_MODE_REGULAR: _ClassVar[ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode]
        DEADLINE_MODE_LATE: _ClassVar[ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode]
        DEADLINE_MODE_BLOCKED: _ClassVar[ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode]

    DEADLINE_MODE_UNSPECIFIED: ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
    DEADLINE_MODE_NONE: ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
    DEADLINE_MODE_IMMEDIATE: ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
    DEADLINE_MODE_REGULAR: ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
    DEADLINE_MODE_LATE: ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
    DEADLINE_MODE_BLOCKED: ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
    STATE_MACHINE_FIELD_NUMBER: _ClassVar[int]
    OBSERVING_BEGIN_FRAME_SOURCE_FIELD_NUMBER: _ClassVar[int]
    BEGIN_IMPL_FRAME_DEADLINE_TASK_FIELD_NUMBER: _ClassVar[int]
    PENDING_BEGIN_FRAME_TASK_FIELD_NUMBER: _ClassVar[int]
    SKIPPED_LAST_FRAME_MISSED_EXCEEDED_DEADLINE_FIELD_NUMBER: _ClassVar[int]
    INSIDE_ACTION_FIELD_NUMBER: _ClassVar[int]
    DEADLINE_MODE_FIELD_NUMBER: _ClassVar[int]
    DEADLINE_US_FIELD_NUMBER: _ClassVar[int]
    DEADLINE_SCHEDULED_AT_US_FIELD_NUMBER: _ClassVar[int]
    NOW_US_FIELD_NUMBER: _ClassVar[int]
    NOW_TO_DEADLINE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    NOW_TO_DEADLINE_SCHEDULED_AT_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    BEGIN_IMPL_FRAME_ARGS_FIELD_NUMBER: _ClassVar[int]
    BEGIN_FRAME_OBSERVER_STATE_FIELD_NUMBER: _ClassVar[int]
    BEGIN_FRAME_SOURCE_STATE_FIELD_NUMBER: _ClassVar[int]
    COMPOSITOR_TIMING_HISTORY_FIELD_NUMBER: _ClassVar[int]
    state_machine: ChromeCompositorStateMachine
    observing_begin_frame_source: bool
    begin_impl_frame_deadline_task: bool
    pending_begin_frame_task: bool
    skipped_last_frame_missed_exceeded_deadline: bool
    inside_action: ChromeCompositorSchedulerAction
    deadline_mode: ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
    deadline_us: int
    deadline_scheduled_at_us: int
    now_us: int
    now_to_deadline_delta_us: int
    now_to_deadline_scheduled_at_delta_us: int
    begin_impl_frame_args: BeginImplFrameArgs
    begin_frame_observer_state: BeginFrameObserverState
    begin_frame_source_state: BeginFrameSourceState
    compositor_timing_history: CompositorTimingHistory
    def __init__(
        self,
        state_machine: _Optional[_Union[ChromeCompositorStateMachine, _Mapping]] = ...,
        observing_begin_frame_source: bool = ...,
        begin_impl_frame_deadline_task: bool = ...,
        pending_begin_frame_task: bool = ...,
        skipped_last_frame_missed_exceeded_deadline: bool = ...,
        inside_action: _Optional[_Union[ChromeCompositorSchedulerAction, str]] = ...,
        deadline_mode: _Optional[_Union[ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode, str]] = ...,
        deadline_us: _Optional[int] = ...,
        deadline_scheduled_at_us: _Optional[int] = ...,
        now_us: _Optional[int] = ...,
        now_to_deadline_delta_us: _Optional[int] = ...,
        now_to_deadline_scheduled_at_delta_us: _Optional[int] = ...,
        begin_impl_frame_args: _Optional[_Union[BeginImplFrameArgs, _Mapping]] = ...,
        begin_frame_observer_state: _Optional[_Union[BeginFrameObserverState, _Mapping]] = ...,
        begin_frame_source_state: _Optional[_Union[BeginFrameSourceState, _Mapping]] = ...,
        compositor_timing_history: _Optional[_Union[CompositorTimingHistory, _Mapping]] = ...,
    ) -> None: ...

class ChromeCompositorStateMachine(_message.Message):
    __slots__ = ("major_state", "minor_state")

    class MajorState(_message.Message):
        __slots__ = (
            "next_action",
            "begin_impl_frame_state",
            "begin_main_frame_state",
            "layer_tree_frame_sink_state",
            "forced_redraw_state",
        )

        class BeginImplFrameState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            BEGIN_IMPL_FRAME_UNSPECIFIED: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginImplFrameState]
            BEGIN_IMPL_FRAME_IDLE: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginImplFrameState]
            BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginImplFrameState]
            BEGIN_IMPL_FRAME_INSIDE_DEADLINE: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginImplFrameState]

        BEGIN_IMPL_FRAME_UNSPECIFIED: ChromeCompositorStateMachine.MajorState.BeginImplFrameState
        BEGIN_IMPL_FRAME_IDLE: ChromeCompositorStateMachine.MajorState.BeginImplFrameState
        BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME: ChromeCompositorStateMachine.MajorState.BeginImplFrameState
        BEGIN_IMPL_FRAME_INSIDE_DEADLINE: ChromeCompositorStateMachine.MajorState.BeginImplFrameState

        class BeginMainFrameState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            BEGIN_MAIN_FRAME_UNSPECIFIED: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginMainFrameState]
            BEGIN_MAIN_FRAME_IDLE: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginMainFrameState]
            BEGIN_MAIN_FRAME_SENT: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginMainFrameState]
            BEGIN_MAIN_FRAME_READY_TO_COMMIT: _ClassVar[ChromeCompositorStateMachine.MajorState.BeginMainFrameState]

        BEGIN_MAIN_FRAME_UNSPECIFIED: ChromeCompositorStateMachine.MajorState.BeginMainFrameState
        BEGIN_MAIN_FRAME_IDLE: ChromeCompositorStateMachine.MajorState.BeginMainFrameState
        BEGIN_MAIN_FRAME_SENT: ChromeCompositorStateMachine.MajorState.BeginMainFrameState
        BEGIN_MAIN_FRAME_READY_TO_COMMIT: ChromeCompositorStateMachine.MajorState.BeginMainFrameState

        class LayerTreeFrameSinkState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            LAYER_TREE_FRAME_UNSPECIFIED: _ClassVar[ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState]
            LAYER_TREE_FRAME_NONE: _ClassVar[ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState]
            LAYER_TREE_FRAME_ACTIVE: _ClassVar[ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState]
            LAYER_TREE_FRAME_CREATING: _ClassVar[ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState]
            LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT: _ClassVar[
                ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
            ]
            LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION: _ClassVar[
                ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
            ]

        LAYER_TREE_FRAME_UNSPECIFIED: ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
        LAYER_TREE_FRAME_NONE: ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
        LAYER_TREE_FRAME_ACTIVE: ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
        LAYER_TREE_FRAME_CREATING: ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
        LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT: ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
        LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION: ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState

        class ForcedRedrawOnTimeoutState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            FORCED_REDRAW_UNSPECIFIED: _ClassVar[ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState]
            FORCED_REDRAW_IDLE: _ClassVar[ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState]
            FORCED_REDRAW_WAITING_FOR_COMMIT: _ClassVar[
                ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
            ]
            FORCED_REDRAW_WAITING_FOR_ACTIVATION: _ClassVar[
                ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
            ]
            FORCED_REDRAW_WAITING_FOR_DRAW: _ClassVar[
                ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
            ]

        FORCED_REDRAW_UNSPECIFIED: ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
        FORCED_REDRAW_IDLE: ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
        FORCED_REDRAW_WAITING_FOR_COMMIT: ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
        FORCED_REDRAW_WAITING_FOR_ACTIVATION: ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
        FORCED_REDRAW_WAITING_FOR_DRAW: ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
        NEXT_ACTION_FIELD_NUMBER: _ClassVar[int]
        BEGIN_IMPL_FRAME_STATE_FIELD_NUMBER: _ClassVar[int]
        BEGIN_MAIN_FRAME_STATE_FIELD_NUMBER: _ClassVar[int]
        LAYER_TREE_FRAME_SINK_STATE_FIELD_NUMBER: _ClassVar[int]
        FORCED_REDRAW_STATE_FIELD_NUMBER: _ClassVar[int]
        next_action: ChromeCompositorSchedulerAction
        begin_impl_frame_state: ChromeCompositorStateMachine.MajorState.BeginImplFrameState
        begin_main_frame_state: ChromeCompositorStateMachine.MajorState.BeginMainFrameState
        layer_tree_frame_sink_state: ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
        forced_redraw_state: ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
        def __init__(
            self,
            next_action: _Optional[_Union[ChromeCompositorSchedulerAction, str]] = ...,
            begin_impl_frame_state: _Optional[
                _Union[ChromeCompositorStateMachine.MajorState.BeginImplFrameState, str]
            ] = ...,
            begin_main_frame_state: _Optional[
                _Union[ChromeCompositorStateMachine.MajorState.BeginMainFrameState, str]
            ] = ...,
            layer_tree_frame_sink_state: _Optional[
                _Union[ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState, str]
            ] = ...,
            forced_redraw_state: _Optional[
                _Union[ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState, str]
            ] = ...,
        ) -> None: ...

    class MinorState(_message.Message):
        __slots__ = (
            "commit_count",
            "current_frame_number",
            "last_frame_number_submit_performed",
            "last_frame_number_draw_performed",
            "last_frame_number_begin_main_frame_sent",
            "did_draw",
            "did_send_begin_main_frame_for_current_frame",
            "did_notify_begin_main_frame_not_expected_until",
            "did_notify_begin_main_frame_not_expected_soon",
            "wants_begin_main_frame_not_expected",
            "did_commit_during_frame",
            "did_invalidate_layer_tree_frame_sink",
            "did_perform_impl_side_invalidaion",
            "did_prepare_tiles",
            "consecutive_checkerboard_animations",
            "pending_submit_frames",
            "submit_frames_with_current_layer_tree_frame_sink",
            "needs_redraw",
            "needs_prepare_tiles",
            "needs_begin_main_frame",
            "needs_one_begin_impl_frame",
            "visible",
            "begin_frame_source_paused",
            "can_draw",
            "resourceless_draw",
            "has_pending_tree",
            "pending_tree_is_ready_for_activation",
            "active_tree_needs_first_draw",
            "active_tree_is_ready_to_draw",
            "did_create_and_initialize_first_layer_tree_frame_sink",
            "tree_priority",
            "scroll_handler_state",
            "critical_begin_main_frame_to_activate_is_fast",
            "main_thread_missed_last_deadline",
            "video_needs_begin_frames",
            "defer_begin_main_frame",
            "last_commit_had_no_updates",
            "did_draw_in_last_frame",
            "did_submit_in_last_frame",
            "needs_impl_side_invalidation",
            "current_pending_tree_is_impl_side",
            "previous_pending_tree_was_impl_side",
            "processing_animation_worklets_for_active_tree",
            "processing_animation_worklets_for_pending_tree",
            "processing_paint_worklets_for_pending_tree",
        )

        class TreePriority(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            TREE_PRIORITY_UNSPECIFIED: _ClassVar[ChromeCompositorStateMachine.MinorState.TreePriority]
            TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES: _ClassVar[ChromeCompositorStateMachine.MinorState.TreePriority]
            TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY: _ClassVar[ChromeCompositorStateMachine.MinorState.TreePriority]
            TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY: _ClassVar[ChromeCompositorStateMachine.MinorState.TreePriority]

        TREE_PRIORITY_UNSPECIFIED: ChromeCompositorStateMachine.MinorState.TreePriority
        TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES: ChromeCompositorStateMachine.MinorState.TreePriority
        TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY: ChromeCompositorStateMachine.MinorState.TreePriority
        TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY: ChromeCompositorStateMachine.MinorState.TreePriority

        class ScrollHandlerState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            SCROLL_HANDLER_UNSPECIFIED: _ClassVar[ChromeCompositorStateMachine.MinorState.ScrollHandlerState]
            SCROLL_AFFECTS_SCROLL_HANDLER: _ClassVar[ChromeCompositorStateMachine.MinorState.ScrollHandlerState]
            SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER: _ClassVar[ChromeCompositorStateMachine.MinorState.ScrollHandlerState]

        SCROLL_HANDLER_UNSPECIFIED: ChromeCompositorStateMachine.MinorState.ScrollHandlerState
        SCROLL_AFFECTS_SCROLL_HANDLER: ChromeCompositorStateMachine.MinorState.ScrollHandlerState
        SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER: ChromeCompositorStateMachine.MinorState.ScrollHandlerState
        COMMIT_COUNT_FIELD_NUMBER: _ClassVar[int]
        CURRENT_FRAME_NUMBER_FIELD_NUMBER: _ClassVar[int]
        LAST_FRAME_NUMBER_SUBMIT_PERFORMED_FIELD_NUMBER: _ClassVar[int]
        LAST_FRAME_NUMBER_DRAW_PERFORMED_FIELD_NUMBER: _ClassVar[int]
        LAST_FRAME_NUMBER_BEGIN_MAIN_FRAME_SENT_FIELD_NUMBER: _ClassVar[int]
        DID_DRAW_FIELD_NUMBER: _ClassVar[int]
        DID_SEND_BEGIN_MAIN_FRAME_FOR_CURRENT_FRAME_FIELD_NUMBER: _ClassVar[int]
        DID_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL_FIELD_NUMBER: _ClassVar[int]
        DID_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON_FIELD_NUMBER: _ClassVar[int]
        WANTS_BEGIN_MAIN_FRAME_NOT_EXPECTED_FIELD_NUMBER: _ClassVar[int]
        DID_COMMIT_DURING_FRAME_FIELD_NUMBER: _ClassVar[int]
        DID_INVALIDATE_LAYER_TREE_FRAME_SINK_FIELD_NUMBER: _ClassVar[int]
        DID_PERFORM_IMPL_SIDE_INVALIDAION_FIELD_NUMBER: _ClassVar[int]
        DID_PREPARE_TILES_FIELD_NUMBER: _ClassVar[int]
        CONSECUTIVE_CHECKERBOARD_ANIMATIONS_FIELD_NUMBER: _ClassVar[int]
        PENDING_SUBMIT_FRAMES_FIELD_NUMBER: _ClassVar[int]
        SUBMIT_FRAMES_WITH_CURRENT_LAYER_TREE_FRAME_SINK_FIELD_NUMBER: _ClassVar[int]
        NEEDS_REDRAW_FIELD_NUMBER: _ClassVar[int]
        NEEDS_PREPARE_TILES_FIELD_NUMBER: _ClassVar[int]
        NEEDS_BEGIN_MAIN_FRAME_FIELD_NUMBER: _ClassVar[int]
        NEEDS_ONE_BEGIN_IMPL_FRAME_FIELD_NUMBER: _ClassVar[int]
        VISIBLE_FIELD_NUMBER: _ClassVar[int]
        BEGIN_FRAME_SOURCE_PAUSED_FIELD_NUMBER: _ClassVar[int]
        CAN_DRAW_FIELD_NUMBER: _ClassVar[int]
        RESOURCELESS_DRAW_FIELD_NUMBER: _ClassVar[int]
        HAS_PENDING_TREE_FIELD_NUMBER: _ClassVar[int]
        PENDING_TREE_IS_READY_FOR_ACTIVATION_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_TREE_NEEDS_FIRST_DRAW_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_TREE_IS_READY_TO_DRAW_FIELD_NUMBER: _ClassVar[int]
        DID_CREATE_AND_INITIALIZE_FIRST_LAYER_TREE_FRAME_SINK_FIELD_NUMBER: _ClassVar[int]
        TREE_PRIORITY_FIELD_NUMBER: _ClassVar[int]
        SCROLL_HANDLER_STATE_FIELD_NUMBER: _ClassVar[int]
        CRITICAL_BEGIN_MAIN_FRAME_TO_ACTIVATE_IS_FAST_FIELD_NUMBER: _ClassVar[int]
        MAIN_THREAD_MISSED_LAST_DEADLINE_FIELD_NUMBER: _ClassVar[int]
        VIDEO_NEEDS_BEGIN_FRAMES_FIELD_NUMBER: _ClassVar[int]
        DEFER_BEGIN_MAIN_FRAME_FIELD_NUMBER: _ClassVar[int]
        LAST_COMMIT_HAD_NO_UPDATES_FIELD_NUMBER: _ClassVar[int]
        DID_DRAW_IN_LAST_FRAME_FIELD_NUMBER: _ClassVar[int]
        DID_SUBMIT_IN_LAST_FRAME_FIELD_NUMBER: _ClassVar[int]
        NEEDS_IMPL_SIDE_INVALIDATION_FIELD_NUMBER: _ClassVar[int]
        CURRENT_PENDING_TREE_IS_IMPL_SIDE_FIELD_NUMBER: _ClassVar[int]
        PREVIOUS_PENDING_TREE_WAS_IMPL_SIDE_FIELD_NUMBER: _ClassVar[int]
        PROCESSING_ANIMATION_WORKLETS_FOR_ACTIVE_TREE_FIELD_NUMBER: _ClassVar[int]
        PROCESSING_ANIMATION_WORKLETS_FOR_PENDING_TREE_FIELD_NUMBER: _ClassVar[int]
        PROCESSING_PAINT_WORKLETS_FOR_PENDING_TREE_FIELD_NUMBER: _ClassVar[int]
        commit_count: int
        current_frame_number: int
        last_frame_number_submit_performed: int
        last_frame_number_draw_performed: int
        last_frame_number_begin_main_frame_sent: int
        did_draw: bool
        did_send_begin_main_frame_for_current_frame: bool
        did_notify_begin_main_frame_not_expected_until: bool
        did_notify_begin_main_frame_not_expected_soon: bool
        wants_begin_main_frame_not_expected: bool
        did_commit_during_frame: bool
        did_invalidate_layer_tree_frame_sink: bool
        did_perform_impl_side_invalidaion: bool
        did_prepare_tiles: bool
        consecutive_checkerboard_animations: int
        pending_submit_frames: int
        submit_frames_with_current_layer_tree_frame_sink: int
        needs_redraw: bool
        needs_prepare_tiles: bool
        needs_begin_main_frame: bool
        needs_one_begin_impl_frame: bool
        visible: bool
        begin_frame_source_paused: bool
        can_draw: bool
        resourceless_draw: bool
        has_pending_tree: bool
        pending_tree_is_ready_for_activation: bool
        active_tree_needs_first_draw: bool
        active_tree_is_ready_to_draw: bool
        did_create_and_initialize_first_layer_tree_frame_sink: bool
        tree_priority: ChromeCompositorStateMachine.MinorState.TreePriority
        scroll_handler_state: ChromeCompositorStateMachine.MinorState.ScrollHandlerState
        critical_begin_main_frame_to_activate_is_fast: bool
        main_thread_missed_last_deadline: bool
        video_needs_begin_frames: bool
        defer_begin_main_frame: bool
        last_commit_had_no_updates: bool
        did_draw_in_last_frame: bool
        did_submit_in_last_frame: bool
        needs_impl_side_invalidation: bool
        current_pending_tree_is_impl_side: bool
        previous_pending_tree_was_impl_side: bool
        processing_animation_worklets_for_active_tree: bool
        processing_animation_worklets_for_pending_tree: bool
        processing_paint_worklets_for_pending_tree: bool
        def __init__(
            self,
            commit_count: _Optional[int] = ...,
            current_frame_number: _Optional[int] = ...,
            last_frame_number_submit_performed: _Optional[int] = ...,
            last_frame_number_draw_performed: _Optional[int] = ...,
            last_frame_number_begin_main_frame_sent: _Optional[int] = ...,
            did_draw: bool = ...,
            did_send_begin_main_frame_for_current_frame: bool = ...,
            did_notify_begin_main_frame_not_expected_until: bool = ...,
            did_notify_begin_main_frame_not_expected_soon: bool = ...,
            wants_begin_main_frame_not_expected: bool = ...,
            did_commit_during_frame: bool = ...,
            did_invalidate_layer_tree_frame_sink: bool = ...,
            did_perform_impl_side_invalidaion: bool = ...,
            did_prepare_tiles: bool = ...,
            consecutive_checkerboard_animations: _Optional[int] = ...,
            pending_submit_frames: _Optional[int] = ...,
            submit_frames_with_current_layer_tree_frame_sink: _Optional[int] = ...,
            needs_redraw: bool = ...,
            needs_prepare_tiles: bool = ...,
            needs_begin_main_frame: bool = ...,
            needs_one_begin_impl_frame: bool = ...,
            visible: bool = ...,
            begin_frame_source_paused: bool = ...,
            can_draw: bool = ...,
            resourceless_draw: bool = ...,
            has_pending_tree: bool = ...,
            pending_tree_is_ready_for_activation: bool = ...,
            active_tree_needs_first_draw: bool = ...,
            active_tree_is_ready_to_draw: bool = ...,
            did_create_and_initialize_first_layer_tree_frame_sink: bool = ...,
            tree_priority: _Optional[_Union[ChromeCompositorStateMachine.MinorState.TreePriority, str]] = ...,
            scroll_handler_state: _Optional[
                _Union[ChromeCompositorStateMachine.MinorState.ScrollHandlerState, str]
            ] = ...,
            critical_begin_main_frame_to_activate_is_fast: bool = ...,
            main_thread_missed_last_deadline: bool = ...,
            video_needs_begin_frames: bool = ...,
            defer_begin_main_frame: bool = ...,
            last_commit_had_no_updates: bool = ...,
            did_draw_in_last_frame: bool = ...,
            did_submit_in_last_frame: bool = ...,
            needs_impl_side_invalidation: bool = ...,
            current_pending_tree_is_impl_side: bool = ...,
            previous_pending_tree_was_impl_side: bool = ...,
            processing_animation_worklets_for_active_tree: bool = ...,
            processing_animation_worklets_for_pending_tree: bool = ...,
            processing_paint_worklets_for_pending_tree: bool = ...,
        ) -> None: ...

    MAJOR_STATE_FIELD_NUMBER: _ClassVar[int]
    MINOR_STATE_FIELD_NUMBER: _ClassVar[int]
    major_state: ChromeCompositorStateMachine.MajorState
    minor_state: ChromeCompositorStateMachine.MinorState
    def __init__(
        self,
        major_state: _Optional[_Union[ChromeCompositorStateMachine.MajorState, _Mapping]] = ...,
        minor_state: _Optional[_Union[ChromeCompositorStateMachine.MinorState, _Mapping]] = ...,
    ) -> None: ...

class BeginFrameArgs(_message.Message):
    __slots__ = (
        "type",
        "source_id",
        "sequence_number",
        "frame_time_us",
        "deadline_us",
        "interval_delta_us",
        "on_critical_path",
        "animate_only",
        "source_location_iid",
        "source_location",
        "frames_throttled_since_last",
    )

    class BeginFrameArgsType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED: _ClassVar[BeginFrameArgs.BeginFrameArgsType]
        BEGIN_FRAME_ARGS_TYPE_INVALID: _ClassVar[BeginFrameArgs.BeginFrameArgsType]
        BEGIN_FRAME_ARGS_TYPE_NORMAL: _ClassVar[BeginFrameArgs.BeginFrameArgsType]
        BEGIN_FRAME_ARGS_TYPE_MISSED: _ClassVar[BeginFrameArgs.BeginFrameArgsType]

    BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED: BeginFrameArgs.BeginFrameArgsType
    BEGIN_FRAME_ARGS_TYPE_INVALID: BeginFrameArgs.BeginFrameArgsType
    BEGIN_FRAME_ARGS_TYPE_NORMAL: BeginFrameArgs.BeginFrameArgsType
    BEGIN_FRAME_ARGS_TYPE_MISSED: BeginFrameArgs.BeginFrameArgsType
    TYPE_FIELD_NUMBER: _ClassVar[int]
    SOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_NUMBER_FIELD_NUMBER: _ClassVar[int]
    FRAME_TIME_US_FIELD_NUMBER: _ClassVar[int]
    DEADLINE_US_FIELD_NUMBER: _ClassVar[int]
    INTERVAL_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    ON_CRITICAL_PATH_FIELD_NUMBER: _ClassVar[int]
    ANIMATE_ONLY_FIELD_NUMBER: _ClassVar[int]
    SOURCE_LOCATION_IID_FIELD_NUMBER: _ClassVar[int]
    SOURCE_LOCATION_FIELD_NUMBER: _ClassVar[int]
    FRAMES_THROTTLED_SINCE_LAST_FIELD_NUMBER: _ClassVar[int]
    type: BeginFrameArgs.BeginFrameArgsType
    source_id: int
    sequence_number: int
    frame_time_us: int
    deadline_us: int
    interval_delta_us: int
    on_critical_path: bool
    animate_only: bool
    source_location_iid: int
    source_location: SourceLocation
    frames_throttled_since_last: int
    def __init__(
        self,
        type: _Optional[_Union[BeginFrameArgs.BeginFrameArgsType, str]] = ...,
        source_id: _Optional[int] = ...,
        sequence_number: _Optional[int] = ...,
        frame_time_us: _Optional[int] = ...,
        deadline_us: _Optional[int] = ...,
        interval_delta_us: _Optional[int] = ...,
        on_critical_path: bool = ...,
        animate_only: bool = ...,
        source_location_iid: _Optional[int] = ...,
        source_location: _Optional[_Union[SourceLocation, _Mapping]] = ...,
        frames_throttled_since_last: _Optional[int] = ...,
    ) -> None: ...

class BeginImplFrameArgs(_message.Message):
    __slots__ = ("updated_at_us", "finished_at_us", "state", "current_args", "last_args", "timestamps_in_us")

    class State(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        BEGIN_FRAME_FINISHED: _ClassVar[BeginImplFrameArgs.State]
        BEGIN_FRAME_USING: _ClassVar[BeginImplFrameArgs.State]

    BEGIN_FRAME_FINISHED: BeginImplFrameArgs.State
    BEGIN_FRAME_USING: BeginImplFrameArgs.State

    class TimestampsInUs(_message.Message):
        __slots__ = (
            "interval_delta",
            "now_to_deadline_delta",
            "frame_time_to_now_delta",
            "frame_time_to_deadline_delta",
            "now",
            "frame_time",
            "deadline",
        )
        INTERVAL_DELTA_FIELD_NUMBER: _ClassVar[int]
        NOW_TO_DEADLINE_DELTA_FIELD_NUMBER: _ClassVar[int]
        FRAME_TIME_TO_NOW_DELTA_FIELD_NUMBER: _ClassVar[int]
        FRAME_TIME_TO_DEADLINE_DELTA_FIELD_NUMBER: _ClassVar[int]
        NOW_FIELD_NUMBER: _ClassVar[int]
        FRAME_TIME_FIELD_NUMBER: _ClassVar[int]
        DEADLINE_FIELD_NUMBER: _ClassVar[int]
        interval_delta: int
        now_to_deadline_delta: int
        frame_time_to_now_delta: int
        frame_time_to_deadline_delta: int
        now: int
        frame_time: int
        deadline: int
        def __init__(
            self,
            interval_delta: _Optional[int] = ...,
            now_to_deadline_delta: _Optional[int] = ...,
            frame_time_to_now_delta: _Optional[int] = ...,
            frame_time_to_deadline_delta: _Optional[int] = ...,
            now: _Optional[int] = ...,
            frame_time: _Optional[int] = ...,
            deadline: _Optional[int] = ...,
        ) -> None: ...

    UPDATED_AT_US_FIELD_NUMBER: _ClassVar[int]
    FINISHED_AT_US_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    CURRENT_ARGS_FIELD_NUMBER: _ClassVar[int]
    LAST_ARGS_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMPS_IN_US_FIELD_NUMBER: _ClassVar[int]
    updated_at_us: int
    finished_at_us: int
    state: BeginImplFrameArgs.State
    current_args: BeginFrameArgs
    last_args: BeginFrameArgs
    timestamps_in_us: BeginImplFrameArgs.TimestampsInUs
    def __init__(
        self,
        updated_at_us: _Optional[int] = ...,
        finished_at_us: _Optional[int] = ...,
        state: _Optional[_Union[BeginImplFrameArgs.State, str]] = ...,
        current_args: _Optional[_Union[BeginFrameArgs, _Mapping]] = ...,
        last_args: _Optional[_Union[BeginFrameArgs, _Mapping]] = ...,
        timestamps_in_us: _Optional[_Union[BeginImplFrameArgs.TimestampsInUs, _Mapping]] = ...,
    ) -> None: ...

class BeginFrameObserverState(_message.Message):
    __slots__ = ("dropped_begin_frame_args", "last_begin_frame_args")
    DROPPED_BEGIN_FRAME_ARGS_FIELD_NUMBER: _ClassVar[int]
    LAST_BEGIN_FRAME_ARGS_FIELD_NUMBER: _ClassVar[int]
    dropped_begin_frame_args: int
    last_begin_frame_args: BeginFrameArgs
    def __init__(
        self,
        dropped_begin_frame_args: _Optional[int] = ...,
        last_begin_frame_args: _Optional[_Union[BeginFrameArgs, _Mapping]] = ...,
    ) -> None: ...

class BeginFrameSourceState(_message.Message):
    __slots__ = ("source_id", "paused", "num_observers", "last_begin_frame_args")
    SOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    PAUSED_FIELD_NUMBER: _ClassVar[int]
    NUM_OBSERVERS_FIELD_NUMBER: _ClassVar[int]
    LAST_BEGIN_FRAME_ARGS_FIELD_NUMBER: _ClassVar[int]
    source_id: int
    paused: bool
    num_observers: int
    last_begin_frame_args: BeginFrameArgs
    def __init__(
        self,
        source_id: _Optional[int] = ...,
        paused: bool = ...,
        num_observers: _Optional[int] = ...,
        last_begin_frame_args: _Optional[_Union[BeginFrameArgs, _Mapping]] = ...,
    ) -> None: ...

class CompositorTimingHistory(_message.Message):
    __slots__ = (
        "begin_main_frame_queue_critical_estimate_delta_us",
        "begin_main_frame_queue_not_critical_estimate_delta_us",
        "begin_main_frame_start_to_ready_to_commit_estimate_delta_us",
        "commit_to_ready_to_activate_estimate_delta_us",
        "prepare_tiles_estimate_delta_us",
        "activate_estimate_delta_us",
        "draw_estimate_delta_us",
    )
    BEGIN_MAIN_FRAME_QUEUE_CRITICAL_ESTIMATE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    BEGIN_MAIN_FRAME_QUEUE_NOT_CRITICAL_ESTIMATE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    BEGIN_MAIN_FRAME_START_TO_READY_TO_COMMIT_ESTIMATE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    COMMIT_TO_READY_TO_ACTIVATE_ESTIMATE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    PREPARE_TILES_ESTIMATE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    ACTIVATE_ESTIMATE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    DRAW_ESTIMATE_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    begin_main_frame_queue_critical_estimate_delta_us: int
    begin_main_frame_queue_not_critical_estimate_delta_us: int
    begin_main_frame_start_to_ready_to_commit_estimate_delta_us: int
    commit_to_ready_to_activate_estimate_delta_us: int
    prepare_tiles_estimate_delta_us: int
    activate_estimate_delta_us: int
    draw_estimate_delta_us: int
    def __init__(
        self,
        begin_main_frame_queue_critical_estimate_delta_us: _Optional[int] = ...,
        begin_main_frame_queue_not_critical_estimate_delta_us: _Optional[int] = ...,
        begin_main_frame_start_to_ready_to_commit_estimate_delta_us: _Optional[int] = ...,
        commit_to_ready_to_activate_estimate_delta_us: _Optional[int] = ...,
        prepare_tiles_estimate_delta_us: _Optional[int] = ...,
        activate_estimate_delta_us: _Optional[int] = ...,
        draw_estimate_delta_us: _Optional[int] = ...,
    ) -> None: ...

class ChromeContentSettingsEventInfo(_message.Message):
    __slots__ = ("number_of_exceptions",)
    NUMBER_OF_EXCEPTIONS_FIELD_NUMBER: _ClassVar[int]
    number_of_exceptions: int
    def __init__(self, number_of_exceptions: _Optional[int] = ...) -> None: ...

class ChromeFrameReporter(_message.Message):
    __slots__ = (
        "state",
        "reason",
        "frame_source",
        "frame_sequence",
        "affects_smoothness",
        "scroll_state",
        "has_main_animation",
        "has_compositor_animation",
        "has_smooth_input_main",
        "has_missing_content",
        "layer_tree_host_id",
        "has_high_latency",
        "frame_type",
        "high_latency_contribution_stage",
    )

    class State(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        STATE_NO_UPDATE_DESIRED: _ClassVar[ChromeFrameReporter.State]
        STATE_PRESENTED_ALL: _ClassVar[ChromeFrameReporter.State]
        STATE_PRESENTED_PARTIAL: _ClassVar[ChromeFrameReporter.State]
        STATE_DROPPED: _ClassVar[ChromeFrameReporter.State]

    STATE_NO_UPDATE_DESIRED: ChromeFrameReporter.State
    STATE_PRESENTED_ALL: ChromeFrameReporter.State
    STATE_PRESENTED_PARTIAL: ChromeFrameReporter.State
    STATE_DROPPED: ChromeFrameReporter.State

    class FrameDropReason(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        REASON_UNSPECIFIED: _ClassVar[ChromeFrameReporter.FrameDropReason]
        REASON_DISPLAY_COMPOSITOR: _ClassVar[ChromeFrameReporter.FrameDropReason]
        REASON_MAIN_THREAD: _ClassVar[ChromeFrameReporter.FrameDropReason]
        REASON_CLIENT_COMPOSITOR: _ClassVar[ChromeFrameReporter.FrameDropReason]

    REASON_UNSPECIFIED: ChromeFrameReporter.FrameDropReason
    REASON_DISPLAY_COMPOSITOR: ChromeFrameReporter.FrameDropReason
    REASON_MAIN_THREAD: ChromeFrameReporter.FrameDropReason
    REASON_CLIENT_COMPOSITOR: ChromeFrameReporter.FrameDropReason

    class ScrollState(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        SCROLL_NONE: _ClassVar[ChromeFrameReporter.ScrollState]
        SCROLL_MAIN_THREAD: _ClassVar[ChromeFrameReporter.ScrollState]
        SCROLL_COMPOSITOR_THREAD: _ClassVar[ChromeFrameReporter.ScrollState]
        SCROLL_UNKNOWN: _ClassVar[ChromeFrameReporter.ScrollState]

    SCROLL_NONE: ChromeFrameReporter.ScrollState
    SCROLL_MAIN_THREAD: ChromeFrameReporter.ScrollState
    SCROLL_COMPOSITOR_THREAD: ChromeFrameReporter.ScrollState
    SCROLL_UNKNOWN: ChromeFrameReporter.ScrollState

    class FrameType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        FORKED: _ClassVar[ChromeFrameReporter.FrameType]
        BACKFILL: _ClassVar[ChromeFrameReporter.FrameType]

    FORKED: ChromeFrameReporter.FrameType
    BACKFILL: ChromeFrameReporter.FrameType
    STATE_FIELD_NUMBER: _ClassVar[int]
    REASON_FIELD_NUMBER: _ClassVar[int]
    FRAME_SOURCE_FIELD_NUMBER: _ClassVar[int]
    FRAME_SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    AFFECTS_SMOOTHNESS_FIELD_NUMBER: _ClassVar[int]
    SCROLL_STATE_FIELD_NUMBER: _ClassVar[int]
    HAS_MAIN_ANIMATION_FIELD_NUMBER: _ClassVar[int]
    HAS_COMPOSITOR_ANIMATION_FIELD_NUMBER: _ClassVar[int]
    HAS_SMOOTH_INPUT_MAIN_FIELD_NUMBER: _ClassVar[int]
    HAS_MISSING_CONTENT_FIELD_NUMBER: _ClassVar[int]
    LAYER_TREE_HOST_ID_FIELD_NUMBER: _ClassVar[int]
    HAS_HIGH_LATENCY_FIELD_NUMBER: _ClassVar[int]
    FRAME_TYPE_FIELD_NUMBER: _ClassVar[int]
    HIGH_LATENCY_CONTRIBUTION_STAGE_FIELD_NUMBER: _ClassVar[int]
    state: ChromeFrameReporter.State
    reason: ChromeFrameReporter.FrameDropReason
    frame_source: int
    frame_sequence: int
    affects_smoothness: bool
    scroll_state: ChromeFrameReporter.ScrollState
    has_main_animation: bool
    has_compositor_animation: bool
    has_smooth_input_main: bool
    has_missing_content: bool
    layer_tree_host_id: int
    has_high_latency: bool
    frame_type: ChromeFrameReporter.FrameType
    high_latency_contribution_stage: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        state: _Optional[_Union[ChromeFrameReporter.State, str]] = ...,
        reason: _Optional[_Union[ChromeFrameReporter.FrameDropReason, str]] = ...,
        frame_source: _Optional[int] = ...,
        frame_sequence: _Optional[int] = ...,
        affects_smoothness: bool = ...,
        scroll_state: _Optional[_Union[ChromeFrameReporter.ScrollState, str]] = ...,
        has_main_animation: bool = ...,
        has_compositor_animation: bool = ...,
        has_smooth_input_main: bool = ...,
        has_missing_content: bool = ...,
        layer_tree_host_id: _Optional[int] = ...,
        has_high_latency: bool = ...,
        frame_type: _Optional[_Union[ChromeFrameReporter.FrameType, str]] = ...,
        high_latency_contribution_stage: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class ChromeKeyedService(_message.Message):
    __slots__ = ("name",)
    NAME_FIELD_NUMBER: _ClassVar[int]
    name: str
    def __init__(self, name: _Optional[str] = ...) -> None: ...

class ChromeLatencyInfo(_message.Message):
    __slots__ = (
        "trace_id",
        "step",
        "frame_tree_node_id",
        "component_info",
        "is_coalesced",
        "gesture_scroll_id",
        "touch_id",
    )

    class Step(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        STEP_UNSPECIFIED: _ClassVar[ChromeLatencyInfo.Step]
        STEP_SEND_INPUT_EVENT_UI: _ClassVar[ChromeLatencyInfo.Step]
        STEP_HANDLE_INPUT_EVENT_IMPL: _ClassVar[ChromeLatencyInfo.Step]
        STEP_DID_HANDLE_INPUT_AND_OVERSCROLL: _ClassVar[ChromeLatencyInfo.Step]
        STEP_HANDLE_INPUT_EVENT_MAIN: _ClassVar[ChromeLatencyInfo.Step]
        STEP_MAIN_THREAD_SCROLL_UPDATE: _ClassVar[ChromeLatencyInfo.Step]
        STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT: _ClassVar[ChromeLatencyInfo.Step]
        STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL: _ClassVar[ChromeLatencyInfo.Step]
        STEP_HANDLED_INPUT_EVENT_IMPL: _ClassVar[ChromeLatencyInfo.Step]
        STEP_SWAP_BUFFERS: _ClassVar[ChromeLatencyInfo.Step]
        STEP_DRAW_AND_SWAP: _ClassVar[ChromeLatencyInfo.Step]
        STEP_FINISHED_SWAP_BUFFERS: _ClassVar[ChromeLatencyInfo.Step]

    STEP_UNSPECIFIED: ChromeLatencyInfo.Step
    STEP_SEND_INPUT_EVENT_UI: ChromeLatencyInfo.Step
    STEP_HANDLE_INPUT_EVENT_IMPL: ChromeLatencyInfo.Step
    STEP_DID_HANDLE_INPUT_AND_OVERSCROLL: ChromeLatencyInfo.Step
    STEP_HANDLE_INPUT_EVENT_MAIN: ChromeLatencyInfo.Step
    STEP_MAIN_THREAD_SCROLL_UPDATE: ChromeLatencyInfo.Step
    STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT: ChromeLatencyInfo.Step
    STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL: ChromeLatencyInfo.Step
    STEP_HANDLED_INPUT_EVENT_IMPL: ChromeLatencyInfo.Step
    STEP_SWAP_BUFFERS: ChromeLatencyInfo.Step
    STEP_DRAW_AND_SWAP: ChromeLatencyInfo.Step
    STEP_FINISHED_SWAP_BUFFERS: ChromeLatencyInfo.Step

    class LatencyComponentType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        COMPONENT_UNSPECIFIED: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_UI: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER: _ClassVar[ChromeLatencyInfo.LatencyComponentType]
        COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP: _ClassVar[ChromeLatencyInfo.LatencyComponentType]

    COMPONENT_UNSPECIFIED: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_UI: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER: ChromeLatencyInfo.LatencyComponentType
    COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP: ChromeLatencyInfo.LatencyComponentType

    class ComponentInfo(_message.Message):
        __slots__ = ("component_type", "time_us")
        COMPONENT_TYPE_FIELD_NUMBER: _ClassVar[int]
        TIME_US_FIELD_NUMBER: _ClassVar[int]
        component_type: ChromeLatencyInfo.LatencyComponentType
        time_us: int
        def __init__(
            self,
            component_type: _Optional[_Union[ChromeLatencyInfo.LatencyComponentType, str]] = ...,
            time_us: _Optional[int] = ...,
        ) -> None: ...

    TRACE_ID_FIELD_NUMBER: _ClassVar[int]
    STEP_FIELD_NUMBER: _ClassVar[int]
    FRAME_TREE_NODE_ID_FIELD_NUMBER: _ClassVar[int]
    COMPONENT_INFO_FIELD_NUMBER: _ClassVar[int]
    IS_COALESCED_FIELD_NUMBER: _ClassVar[int]
    GESTURE_SCROLL_ID_FIELD_NUMBER: _ClassVar[int]
    TOUCH_ID_FIELD_NUMBER: _ClassVar[int]
    trace_id: int
    step: ChromeLatencyInfo.Step
    frame_tree_node_id: int
    component_info: _containers.RepeatedCompositeFieldContainer[ChromeLatencyInfo.ComponentInfo]
    is_coalesced: bool
    gesture_scroll_id: int
    touch_id: int
    def __init__(
        self,
        trace_id: _Optional[int] = ...,
        step: _Optional[_Union[ChromeLatencyInfo.Step, str]] = ...,
        frame_tree_node_id: _Optional[int] = ...,
        component_info: _Optional[_Iterable[_Union[ChromeLatencyInfo.ComponentInfo, _Mapping]]] = ...,
        is_coalesced: bool = ...,
        gesture_scroll_id: _Optional[int] = ...,
        touch_id: _Optional[int] = ...,
    ) -> None: ...

class ChromeLegacyIpc(_message.Message):
    __slots__ = ("message_class", "message_line")

    class MessageClass(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        CLASS_UNSPECIFIED: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_AUTOMATION: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_FRAME: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_PAGE: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_VIEW: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_WIDGET: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_INPUT: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_TEST: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_WORKER: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_NACL: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_GPU_CHANNEL: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_MEDIA: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_PPAPI: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_CHROME: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_DRAG: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_PRINT: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_EXTENSION: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_TEXT_INPUT_CLIENT: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_BLINK_TEST: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_ACCESSIBILITY: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_PRERENDER: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_CHROMOTING: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_BROWSER_PLUGIN: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_ANDROID_WEB_VIEW: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_NACL_HOST: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_ENCRYPTED_MEDIA: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_CAST: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_GIN_JAVA_BRIDGE: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_CHROME_UTILITY_PRINTING: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_OZONE_GPU: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_WEB_TEST: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_NETWORK_HINTS: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_EXTENSIONS_GUEST_VIEW: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_GUEST_VIEW: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_MEDIA_PLAYER_DELEGATE: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_EXTENSION_WORKER: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_SUBRESOURCE_FILTER: _ClassVar[ChromeLegacyIpc.MessageClass]
        CLASS_UNFREEZABLE_FRAME: _ClassVar[ChromeLegacyIpc.MessageClass]

    CLASS_UNSPECIFIED: ChromeLegacyIpc.MessageClass
    CLASS_AUTOMATION: ChromeLegacyIpc.MessageClass
    CLASS_FRAME: ChromeLegacyIpc.MessageClass
    CLASS_PAGE: ChromeLegacyIpc.MessageClass
    CLASS_VIEW: ChromeLegacyIpc.MessageClass
    CLASS_WIDGET: ChromeLegacyIpc.MessageClass
    CLASS_INPUT: ChromeLegacyIpc.MessageClass
    CLASS_TEST: ChromeLegacyIpc.MessageClass
    CLASS_WORKER: ChromeLegacyIpc.MessageClass
    CLASS_NACL: ChromeLegacyIpc.MessageClass
    CLASS_GPU_CHANNEL: ChromeLegacyIpc.MessageClass
    CLASS_MEDIA: ChromeLegacyIpc.MessageClass
    CLASS_PPAPI: ChromeLegacyIpc.MessageClass
    CLASS_CHROME: ChromeLegacyIpc.MessageClass
    CLASS_DRAG: ChromeLegacyIpc.MessageClass
    CLASS_PRINT: ChromeLegacyIpc.MessageClass
    CLASS_EXTENSION: ChromeLegacyIpc.MessageClass
    CLASS_TEXT_INPUT_CLIENT: ChromeLegacyIpc.MessageClass
    CLASS_BLINK_TEST: ChromeLegacyIpc.MessageClass
    CLASS_ACCESSIBILITY: ChromeLegacyIpc.MessageClass
    CLASS_PRERENDER: ChromeLegacyIpc.MessageClass
    CLASS_CHROMOTING: ChromeLegacyIpc.MessageClass
    CLASS_BROWSER_PLUGIN: ChromeLegacyIpc.MessageClass
    CLASS_ANDROID_WEB_VIEW: ChromeLegacyIpc.MessageClass
    CLASS_NACL_HOST: ChromeLegacyIpc.MessageClass
    CLASS_ENCRYPTED_MEDIA: ChromeLegacyIpc.MessageClass
    CLASS_CAST: ChromeLegacyIpc.MessageClass
    CLASS_GIN_JAVA_BRIDGE: ChromeLegacyIpc.MessageClass
    CLASS_CHROME_UTILITY_PRINTING: ChromeLegacyIpc.MessageClass
    CLASS_OZONE_GPU: ChromeLegacyIpc.MessageClass
    CLASS_WEB_TEST: ChromeLegacyIpc.MessageClass
    CLASS_NETWORK_HINTS: ChromeLegacyIpc.MessageClass
    CLASS_EXTENSIONS_GUEST_VIEW: ChromeLegacyIpc.MessageClass
    CLASS_GUEST_VIEW: ChromeLegacyIpc.MessageClass
    CLASS_MEDIA_PLAYER_DELEGATE: ChromeLegacyIpc.MessageClass
    CLASS_EXTENSION_WORKER: ChromeLegacyIpc.MessageClass
    CLASS_SUBRESOURCE_FILTER: ChromeLegacyIpc.MessageClass
    CLASS_UNFREEZABLE_FRAME: ChromeLegacyIpc.MessageClass
    MESSAGE_CLASS_FIELD_NUMBER: _ClassVar[int]
    MESSAGE_LINE_FIELD_NUMBER: _ClassVar[int]
    message_class: ChromeLegacyIpc.MessageClass
    message_line: int
    def __init__(
        self,
        message_class: _Optional[_Union[ChromeLegacyIpc.MessageClass, str]] = ...,
        message_line: _Optional[int] = ...,
    ) -> None: ...

class ChromeMessagePump(_message.Message):
    __slots__ = ("sent_messages_in_queue", "io_handler_location_iid")
    SENT_MESSAGES_IN_QUEUE_FIELD_NUMBER: _ClassVar[int]
    IO_HANDLER_LOCATION_IID_FIELD_NUMBER: _ClassVar[int]
    sent_messages_in_queue: bool
    io_handler_location_iid: int
    def __init__(self, sent_messages_in_queue: bool = ..., io_handler_location_iid: _Optional[int] = ...) -> None: ...

class ChromeMojoEventInfo(_message.Message):
    __slots__ = (
        "watcher_notify_interface_tag",
        "ipc_hash",
        "mojo_interface_tag",
        "mojo_interface_method_iid",
        "is_reply",
        "payload_size",
        "data_num_bytes",
    )
    WATCHER_NOTIFY_INTERFACE_TAG_FIELD_NUMBER: _ClassVar[int]
    IPC_HASH_FIELD_NUMBER: _ClassVar[int]
    MOJO_INTERFACE_TAG_FIELD_NUMBER: _ClassVar[int]
    MOJO_INTERFACE_METHOD_IID_FIELD_NUMBER: _ClassVar[int]
    IS_REPLY_FIELD_NUMBER: _ClassVar[int]
    PAYLOAD_SIZE_FIELD_NUMBER: _ClassVar[int]
    DATA_NUM_BYTES_FIELD_NUMBER: _ClassVar[int]
    watcher_notify_interface_tag: str
    ipc_hash: int
    mojo_interface_tag: str
    mojo_interface_method_iid: int
    is_reply: bool
    payload_size: int
    data_num_bytes: int
    def __init__(
        self,
        watcher_notify_interface_tag: _Optional[str] = ...,
        ipc_hash: _Optional[int] = ...,
        mojo_interface_tag: _Optional[str] = ...,
        mojo_interface_method_iid: _Optional[int] = ...,
        is_reply: bool = ...,
        payload_size: _Optional[int] = ...,
        data_num_bytes: _Optional[int] = ...,
    ) -> None: ...

class ChromeRendererSchedulerState(_message.Message):
    __slots__ = ("rail_mode", "is_backgrounded", "is_hidden")
    RAIL_MODE_FIELD_NUMBER: _ClassVar[int]
    IS_BACKGROUNDED_FIELD_NUMBER: _ClassVar[int]
    IS_HIDDEN_FIELD_NUMBER: _ClassVar[int]
    rail_mode: ChromeRAILMode
    is_backgrounded: bool
    is_hidden: bool
    def __init__(
        self,
        rail_mode: _Optional[_Union[ChromeRAILMode, str]] = ...,
        is_backgrounded: bool = ...,
        is_hidden: bool = ...,
    ) -> None: ...

class ChromeUserEvent(_message.Message):
    __slots__ = ("action", "action_hash")
    ACTION_FIELD_NUMBER: _ClassVar[int]
    ACTION_HASH_FIELD_NUMBER: _ClassVar[int]
    action: str
    action_hash: int
    def __init__(self, action: _Optional[str] = ..., action_hash: _Optional[int] = ...) -> None: ...

class ChromeWindowHandleEventInfo(_message.Message):
    __slots__ = ("dpi", "message_id", "hwnd_ptr")
    DPI_FIELD_NUMBER: _ClassVar[int]
    MESSAGE_ID_FIELD_NUMBER: _ClassVar[int]
    HWND_PTR_FIELD_NUMBER: _ClassVar[int]
    dpi: int
    message_id: int
    hwnd_ptr: int
    def __init__(
        self, dpi: _Optional[int] = ..., message_id: _Optional[int] = ..., hwnd_ptr: _Optional[int] = ...
    ) -> None: ...

class Screenshot(_message.Message):
    __slots__ = ("jpg_image",)
    JPG_IMAGE_FIELD_NUMBER: _ClassVar[int]
    jpg_image: bytes
    def __init__(self, jpg_image: _Optional[bytes] = ...) -> None: ...

class TaskExecution(_message.Message):
    __slots__ = ("posted_from_iid",)
    POSTED_FROM_IID_FIELD_NUMBER: _ClassVar[int]
    posted_from_iid: int
    def __init__(self, posted_from_iid: _Optional[int] = ...) -> None: ...

class TrackEvent(_message.Message):
    __slots__ = (
        "category_iids",
        "categories",
        "name_iid",
        "name",
        "type",
        "track_uuid",
        "counter_value",
        "double_counter_value",
        "extra_counter_track_uuids",
        "extra_counter_values",
        "extra_double_counter_track_uuids",
        "extra_double_counter_values",
        "flow_ids_old",
        "flow_ids",
        "terminating_flow_ids_old",
        "terminating_flow_ids",
        "debug_annotations",
        "task_execution",
        "log_message",
        "cc_scheduler_state",
        "chrome_user_event",
        "chrome_keyed_service",
        "chrome_legacy_ipc",
        "chrome_histogram_sample",
        "chrome_latency_info",
        "chrome_frame_reporter",
        "chrome_application_state_info",
        "chrome_renderer_scheduler_state",
        "chrome_window_handle_event_info",
        "chrome_content_settings_event_info",
        "chrome_active_processes",
        "screenshot",
        "source_location",
        "source_location_iid",
        "chrome_message_pump",
        "chrome_mojo_event_info",
        "timestamp_delta_us",
        "timestamp_absolute_us",
        "thread_time_delta_us",
        "thread_time_absolute_us",
        "thread_instruction_count_delta",
        "thread_instruction_count_absolute",
        "legacy_event",
    )
    Extensions: _python_message._ExtensionDict

    class Type(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        TYPE_UNSPECIFIED: _ClassVar[TrackEvent.Type]
        TYPE_SLICE_BEGIN: _ClassVar[TrackEvent.Type]
        TYPE_SLICE_END: _ClassVar[TrackEvent.Type]
        TYPE_INSTANT: _ClassVar[TrackEvent.Type]
        TYPE_COUNTER: _ClassVar[TrackEvent.Type]

    TYPE_UNSPECIFIED: TrackEvent.Type
    TYPE_SLICE_BEGIN: TrackEvent.Type
    TYPE_SLICE_END: TrackEvent.Type
    TYPE_INSTANT: TrackEvent.Type
    TYPE_COUNTER: TrackEvent.Type

    class LegacyEvent(_message.Message):
        __slots__ = (
            "name_iid",
            "phase",
            "duration_us",
            "thread_duration_us",
            "thread_instruction_delta",
            "unscoped_id",
            "local_id",
            "global_id",
            "id_scope",
            "use_async_tts",
            "bind_id",
            "bind_to_enclosing",
            "flow_direction",
            "instant_event_scope",
            "pid_override",
            "tid_override",
        )

        class FlowDirection(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            FLOW_UNSPECIFIED: _ClassVar[TrackEvent.LegacyEvent.FlowDirection]
            FLOW_IN: _ClassVar[TrackEvent.LegacyEvent.FlowDirection]
            FLOW_OUT: _ClassVar[TrackEvent.LegacyEvent.FlowDirection]
            FLOW_INOUT: _ClassVar[TrackEvent.LegacyEvent.FlowDirection]

        FLOW_UNSPECIFIED: TrackEvent.LegacyEvent.FlowDirection
        FLOW_IN: TrackEvent.LegacyEvent.FlowDirection
        FLOW_OUT: TrackEvent.LegacyEvent.FlowDirection
        FLOW_INOUT: TrackEvent.LegacyEvent.FlowDirection

        class InstantEventScope(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            SCOPE_UNSPECIFIED: _ClassVar[TrackEvent.LegacyEvent.InstantEventScope]
            SCOPE_GLOBAL: _ClassVar[TrackEvent.LegacyEvent.InstantEventScope]
            SCOPE_PROCESS: _ClassVar[TrackEvent.LegacyEvent.InstantEventScope]
            SCOPE_THREAD: _ClassVar[TrackEvent.LegacyEvent.InstantEventScope]

        SCOPE_UNSPECIFIED: TrackEvent.LegacyEvent.InstantEventScope
        SCOPE_GLOBAL: TrackEvent.LegacyEvent.InstantEventScope
        SCOPE_PROCESS: TrackEvent.LegacyEvent.InstantEventScope
        SCOPE_THREAD: TrackEvent.LegacyEvent.InstantEventScope
        NAME_IID_FIELD_NUMBER: _ClassVar[int]
        PHASE_FIELD_NUMBER: _ClassVar[int]
        DURATION_US_FIELD_NUMBER: _ClassVar[int]
        THREAD_DURATION_US_FIELD_NUMBER: _ClassVar[int]
        THREAD_INSTRUCTION_DELTA_FIELD_NUMBER: _ClassVar[int]
        UNSCOPED_ID_FIELD_NUMBER: _ClassVar[int]
        LOCAL_ID_FIELD_NUMBER: _ClassVar[int]
        GLOBAL_ID_FIELD_NUMBER: _ClassVar[int]
        ID_SCOPE_FIELD_NUMBER: _ClassVar[int]
        USE_ASYNC_TTS_FIELD_NUMBER: _ClassVar[int]
        BIND_ID_FIELD_NUMBER: _ClassVar[int]
        BIND_TO_ENCLOSING_FIELD_NUMBER: _ClassVar[int]
        FLOW_DIRECTION_FIELD_NUMBER: _ClassVar[int]
        INSTANT_EVENT_SCOPE_FIELD_NUMBER: _ClassVar[int]
        PID_OVERRIDE_FIELD_NUMBER: _ClassVar[int]
        TID_OVERRIDE_FIELD_NUMBER: _ClassVar[int]
        name_iid: int
        phase: int
        duration_us: int
        thread_duration_us: int
        thread_instruction_delta: int
        unscoped_id: int
        local_id: int
        global_id: int
        id_scope: str
        use_async_tts: bool
        bind_id: int
        bind_to_enclosing: bool
        flow_direction: TrackEvent.LegacyEvent.FlowDirection
        instant_event_scope: TrackEvent.LegacyEvent.InstantEventScope
        pid_override: int
        tid_override: int
        def __init__(
            self,
            name_iid: _Optional[int] = ...,
            phase: _Optional[int] = ...,
            duration_us: _Optional[int] = ...,
            thread_duration_us: _Optional[int] = ...,
            thread_instruction_delta: _Optional[int] = ...,
            unscoped_id: _Optional[int] = ...,
            local_id: _Optional[int] = ...,
            global_id: _Optional[int] = ...,
            id_scope: _Optional[str] = ...,
            use_async_tts: bool = ...,
            bind_id: _Optional[int] = ...,
            bind_to_enclosing: bool = ...,
            flow_direction: _Optional[_Union[TrackEvent.LegacyEvent.FlowDirection, str]] = ...,
            instant_event_scope: _Optional[_Union[TrackEvent.LegacyEvent.InstantEventScope, str]] = ...,
            pid_override: _Optional[int] = ...,
            tid_override: _Optional[int] = ...,
        ) -> None: ...

    CATEGORY_IIDS_FIELD_NUMBER: _ClassVar[int]
    CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    NAME_IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    TRACK_UUID_FIELD_NUMBER: _ClassVar[int]
    COUNTER_VALUE_FIELD_NUMBER: _ClassVar[int]
    DOUBLE_COUNTER_VALUE_FIELD_NUMBER: _ClassVar[int]
    EXTRA_COUNTER_TRACK_UUIDS_FIELD_NUMBER: _ClassVar[int]
    EXTRA_COUNTER_VALUES_FIELD_NUMBER: _ClassVar[int]
    EXTRA_DOUBLE_COUNTER_TRACK_UUIDS_FIELD_NUMBER: _ClassVar[int]
    EXTRA_DOUBLE_COUNTER_VALUES_FIELD_NUMBER: _ClassVar[int]
    FLOW_IDS_OLD_FIELD_NUMBER: _ClassVar[int]
    FLOW_IDS_FIELD_NUMBER: _ClassVar[int]
    TERMINATING_FLOW_IDS_OLD_FIELD_NUMBER: _ClassVar[int]
    TERMINATING_FLOW_IDS_FIELD_NUMBER: _ClassVar[int]
    DEBUG_ANNOTATIONS_FIELD_NUMBER: _ClassVar[int]
    TASK_EXECUTION_FIELD_NUMBER: _ClassVar[int]
    LOG_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    CC_SCHEDULER_STATE_FIELD_NUMBER: _ClassVar[int]
    CHROME_USER_EVENT_FIELD_NUMBER: _ClassVar[int]
    CHROME_KEYED_SERVICE_FIELD_NUMBER: _ClassVar[int]
    CHROME_LEGACY_IPC_FIELD_NUMBER: _ClassVar[int]
    CHROME_HISTOGRAM_SAMPLE_FIELD_NUMBER: _ClassVar[int]
    CHROME_LATENCY_INFO_FIELD_NUMBER: _ClassVar[int]
    CHROME_FRAME_REPORTER_FIELD_NUMBER: _ClassVar[int]
    CHROME_APPLICATION_STATE_INFO_FIELD_NUMBER: _ClassVar[int]
    CHROME_RENDERER_SCHEDULER_STATE_FIELD_NUMBER: _ClassVar[int]
    CHROME_WINDOW_HANDLE_EVENT_INFO_FIELD_NUMBER: _ClassVar[int]
    CHROME_CONTENT_SETTINGS_EVENT_INFO_FIELD_NUMBER: _ClassVar[int]
    CHROME_ACTIVE_PROCESSES_FIELD_NUMBER: _ClassVar[int]
    SCREENSHOT_FIELD_NUMBER: _ClassVar[int]
    SOURCE_LOCATION_FIELD_NUMBER: _ClassVar[int]
    SOURCE_LOCATION_IID_FIELD_NUMBER: _ClassVar[int]
    CHROME_MESSAGE_PUMP_FIELD_NUMBER: _ClassVar[int]
    CHROME_MOJO_EVENT_INFO_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_ABSOLUTE_US_FIELD_NUMBER: _ClassVar[int]
    THREAD_TIME_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    THREAD_TIME_ABSOLUTE_US_FIELD_NUMBER: _ClassVar[int]
    THREAD_INSTRUCTION_COUNT_DELTA_FIELD_NUMBER: _ClassVar[int]
    THREAD_INSTRUCTION_COUNT_ABSOLUTE_FIELD_NUMBER: _ClassVar[int]
    LEGACY_EVENT_FIELD_NUMBER: _ClassVar[int]
    category_iids: _containers.RepeatedScalarFieldContainer[int]
    categories: _containers.RepeatedScalarFieldContainer[str]
    name_iid: int
    name: str
    type: TrackEvent.Type
    track_uuid: int
    counter_value: int
    double_counter_value: float
    extra_counter_track_uuids: _containers.RepeatedScalarFieldContainer[int]
    extra_counter_values: _containers.RepeatedScalarFieldContainer[int]
    extra_double_counter_track_uuids: _containers.RepeatedScalarFieldContainer[int]
    extra_double_counter_values: _containers.RepeatedScalarFieldContainer[float]
    flow_ids_old: _containers.RepeatedScalarFieldContainer[int]
    flow_ids: _containers.RepeatedScalarFieldContainer[int]
    terminating_flow_ids_old: _containers.RepeatedScalarFieldContainer[int]
    terminating_flow_ids: _containers.RepeatedScalarFieldContainer[int]
    debug_annotations: _containers.RepeatedCompositeFieldContainer[DebugAnnotation]
    task_execution: TaskExecution
    log_message: LogMessage
    cc_scheduler_state: ChromeCompositorSchedulerState
    chrome_user_event: ChromeUserEvent
    chrome_keyed_service: ChromeKeyedService
    chrome_legacy_ipc: ChromeLegacyIpc
    chrome_histogram_sample: ChromeHistogramSample
    chrome_latency_info: ChromeLatencyInfo
    chrome_frame_reporter: ChromeFrameReporter
    chrome_application_state_info: ChromeApplicationStateInfo
    chrome_renderer_scheduler_state: ChromeRendererSchedulerState
    chrome_window_handle_event_info: ChromeWindowHandleEventInfo
    chrome_content_settings_event_info: ChromeContentSettingsEventInfo
    chrome_active_processes: ChromeActiveProcesses
    screenshot: Screenshot
    source_location: SourceLocation
    source_location_iid: int
    chrome_message_pump: ChromeMessagePump
    chrome_mojo_event_info: ChromeMojoEventInfo
    timestamp_delta_us: int
    timestamp_absolute_us: int
    thread_time_delta_us: int
    thread_time_absolute_us: int
    thread_instruction_count_delta: int
    thread_instruction_count_absolute: int
    legacy_event: TrackEvent.LegacyEvent
    def __init__(
        self,
        category_iids: _Optional[_Iterable[int]] = ...,
        categories: _Optional[_Iterable[str]] = ...,
        name_iid: _Optional[int] = ...,
        name: _Optional[str] = ...,
        type: _Optional[_Union[TrackEvent.Type, str]] = ...,
        track_uuid: _Optional[int] = ...,
        counter_value: _Optional[int] = ...,
        double_counter_value: _Optional[float] = ...,
        extra_counter_track_uuids: _Optional[_Iterable[int]] = ...,
        extra_counter_values: _Optional[_Iterable[int]] = ...,
        extra_double_counter_track_uuids: _Optional[_Iterable[int]] = ...,
        extra_double_counter_values: _Optional[_Iterable[float]] = ...,
        flow_ids_old: _Optional[_Iterable[int]] = ...,
        flow_ids: _Optional[_Iterable[int]] = ...,
        terminating_flow_ids_old: _Optional[_Iterable[int]] = ...,
        terminating_flow_ids: _Optional[_Iterable[int]] = ...,
        debug_annotations: _Optional[_Iterable[_Union[DebugAnnotation, _Mapping]]] = ...,
        task_execution: _Optional[_Union[TaskExecution, _Mapping]] = ...,
        log_message: _Optional[_Union[LogMessage, _Mapping]] = ...,
        cc_scheduler_state: _Optional[_Union[ChromeCompositorSchedulerState, _Mapping]] = ...,
        chrome_user_event: _Optional[_Union[ChromeUserEvent, _Mapping]] = ...,
        chrome_keyed_service: _Optional[_Union[ChromeKeyedService, _Mapping]] = ...,
        chrome_legacy_ipc: _Optional[_Union[ChromeLegacyIpc, _Mapping]] = ...,
        chrome_histogram_sample: _Optional[_Union[ChromeHistogramSample, _Mapping]] = ...,
        chrome_latency_info: _Optional[_Union[ChromeLatencyInfo, _Mapping]] = ...,
        chrome_frame_reporter: _Optional[_Union[ChromeFrameReporter, _Mapping]] = ...,
        chrome_application_state_info: _Optional[_Union[ChromeApplicationStateInfo, _Mapping]] = ...,
        chrome_renderer_scheduler_state: _Optional[_Union[ChromeRendererSchedulerState, _Mapping]] = ...,
        chrome_window_handle_event_info: _Optional[_Union[ChromeWindowHandleEventInfo, _Mapping]] = ...,
        chrome_content_settings_event_info: _Optional[_Union[ChromeContentSettingsEventInfo, _Mapping]] = ...,
        chrome_active_processes: _Optional[_Union[ChromeActiveProcesses, _Mapping]] = ...,
        screenshot: _Optional[_Union[Screenshot, _Mapping]] = ...,
        source_location: _Optional[_Union[SourceLocation, _Mapping]] = ...,
        source_location_iid: _Optional[int] = ...,
        chrome_message_pump: _Optional[_Union[ChromeMessagePump, _Mapping]] = ...,
        chrome_mojo_event_info: _Optional[_Union[ChromeMojoEventInfo, _Mapping]] = ...,
        timestamp_delta_us: _Optional[int] = ...,
        timestamp_absolute_us: _Optional[int] = ...,
        thread_time_delta_us: _Optional[int] = ...,
        thread_time_absolute_us: _Optional[int] = ...,
        thread_instruction_count_delta: _Optional[int] = ...,
        thread_instruction_count_absolute: _Optional[int] = ...,
        legacy_event: _Optional[_Union[TrackEvent.LegacyEvent, _Mapping]] = ...,
    ) -> None: ...

class TrackEventDefaults(_message.Message):
    __slots__ = ("track_uuid", "extra_counter_track_uuids", "extra_double_counter_track_uuids")
    TRACK_UUID_FIELD_NUMBER: _ClassVar[int]
    EXTRA_COUNTER_TRACK_UUIDS_FIELD_NUMBER: _ClassVar[int]
    EXTRA_DOUBLE_COUNTER_TRACK_UUIDS_FIELD_NUMBER: _ClassVar[int]
    track_uuid: int
    extra_counter_track_uuids: _containers.RepeatedScalarFieldContainer[int]
    extra_double_counter_track_uuids: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self,
        track_uuid: _Optional[int] = ...,
        extra_counter_track_uuids: _Optional[_Iterable[int]] = ...,
        extra_double_counter_track_uuids: _Optional[_Iterable[int]] = ...,
    ) -> None: ...

class EventCategory(_message.Message):
    __slots__ = ("iid", "name")
    IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    iid: int
    name: str
    def __init__(self, iid: _Optional[int] = ..., name: _Optional[str] = ...) -> None: ...

class EventName(_message.Message):
    __slots__ = ("iid", "name")
    IID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    iid: int
    name: str
    def __init__(self, iid: _Optional[int] = ..., name: _Optional[str] = ...) -> None: ...

class InternedData(_message.Message):
    __slots__ = (
        "event_categories",
        "event_names",
        "debug_annotation_names",
        "debug_annotation_value_type_names",
        "source_locations",
        "unsymbolized_source_locations",
        "log_message_body",
        "histogram_names",
        "build_ids",
        "mapping_paths",
        "source_paths",
        "function_names",
        "profiled_frame_symbols",
        "mappings",
        "frames",
        "callstacks",
        "vulkan_memory_keys",
        "graphics_contexts",
        "gpu_specifications",
        "kernel_symbols",
        "debug_annotation_string_values",
        "packet_context",
        "v8_js_function_name",
        "v8_js_function",
        "v8_js_script",
        "v8_wasm_script",
        "v8_isolate",
        "protolog_string_args",
    )
    EVENT_CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    EVENT_NAMES_FIELD_NUMBER: _ClassVar[int]
    DEBUG_ANNOTATION_NAMES_FIELD_NUMBER: _ClassVar[int]
    DEBUG_ANNOTATION_VALUE_TYPE_NAMES_FIELD_NUMBER: _ClassVar[int]
    SOURCE_LOCATIONS_FIELD_NUMBER: _ClassVar[int]
    UNSYMBOLIZED_SOURCE_LOCATIONS_FIELD_NUMBER: _ClassVar[int]
    LOG_MESSAGE_BODY_FIELD_NUMBER: _ClassVar[int]
    HISTOGRAM_NAMES_FIELD_NUMBER: _ClassVar[int]
    BUILD_IDS_FIELD_NUMBER: _ClassVar[int]
    MAPPING_PATHS_FIELD_NUMBER: _ClassVar[int]
    SOURCE_PATHS_FIELD_NUMBER: _ClassVar[int]
    FUNCTION_NAMES_FIELD_NUMBER: _ClassVar[int]
    PROFILED_FRAME_SYMBOLS_FIELD_NUMBER: _ClassVar[int]
    MAPPINGS_FIELD_NUMBER: _ClassVar[int]
    FRAMES_FIELD_NUMBER: _ClassVar[int]
    CALLSTACKS_FIELD_NUMBER: _ClassVar[int]
    VULKAN_MEMORY_KEYS_FIELD_NUMBER: _ClassVar[int]
    GRAPHICS_CONTEXTS_FIELD_NUMBER: _ClassVar[int]
    GPU_SPECIFICATIONS_FIELD_NUMBER: _ClassVar[int]
    KERNEL_SYMBOLS_FIELD_NUMBER: _ClassVar[int]
    DEBUG_ANNOTATION_STRING_VALUES_FIELD_NUMBER: _ClassVar[int]
    PACKET_CONTEXT_FIELD_NUMBER: _ClassVar[int]
    V8_JS_FUNCTION_NAME_FIELD_NUMBER: _ClassVar[int]
    V8_JS_FUNCTION_FIELD_NUMBER: _ClassVar[int]
    V8_JS_SCRIPT_FIELD_NUMBER: _ClassVar[int]
    V8_WASM_SCRIPT_FIELD_NUMBER: _ClassVar[int]
    V8_ISOLATE_FIELD_NUMBER: _ClassVar[int]
    PROTOLOG_STRING_ARGS_FIELD_NUMBER: _ClassVar[int]
    event_categories: _containers.RepeatedCompositeFieldContainer[EventCategory]
    event_names: _containers.RepeatedCompositeFieldContainer[EventName]
    debug_annotation_names: _containers.RepeatedCompositeFieldContainer[DebugAnnotationName]
    debug_annotation_value_type_names: _containers.RepeatedCompositeFieldContainer[DebugAnnotationValueTypeName]
    source_locations: _containers.RepeatedCompositeFieldContainer[SourceLocation]
    unsymbolized_source_locations: _containers.RepeatedCompositeFieldContainer[UnsymbolizedSourceLocation]
    log_message_body: _containers.RepeatedCompositeFieldContainer[LogMessageBody]
    histogram_names: _containers.RepeatedCompositeFieldContainer[HistogramName]
    build_ids: _containers.RepeatedCompositeFieldContainer[InternedString]
    mapping_paths: _containers.RepeatedCompositeFieldContainer[InternedString]
    source_paths: _containers.RepeatedCompositeFieldContainer[InternedString]
    function_names: _containers.RepeatedCompositeFieldContainer[InternedString]
    profiled_frame_symbols: _containers.RepeatedCompositeFieldContainer[ProfiledFrameSymbols]
    mappings: _containers.RepeatedCompositeFieldContainer[Mapping]
    frames: _containers.RepeatedCompositeFieldContainer[Frame]
    callstacks: _containers.RepeatedCompositeFieldContainer[Callstack]
    vulkan_memory_keys: _containers.RepeatedCompositeFieldContainer[InternedString]
    graphics_contexts: _containers.RepeatedCompositeFieldContainer[InternedGraphicsContext]
    gpu_specifications: _containers.RepeatedCompositeFieldContainer[InternedGpuRenderStageSpecification]
    kernel_symbols: _containers.RepeatedCompositeFieldContainer[InternedString]
    debug_annotation_string_values: _containers.RepeatedCompositeFieldContainer[InternedString]
    packet_context: _containers.RepeatedCompositeFieldContainer[NetworkPacketContext]
    v8_js_function_name: _containers.RepeatedCompositeFieldContainer[InternedV8String]
    v8_js_function: _containers.RepeatedCompositeFieldContainer[InternedV8JsFunction]
    v8_js_script: _containers.RepeatedCompositeFieldContainer[InternedV8JsScript]
    v8_wasm_script: _containers.RepeatedCompositeFieldContainer[InternedV8WasmScript]
    v8_isolate: _containers.RepeatedCompositeFieldContainer[InternedV8Isolate]
    protolog_string_args: _containers.RepeatedCompositeFieldContainer[InternedString]
    def __init__(
        self,
        event_categories: _Optional[_Iterable[_Union[EventCategory, _Mapping]]] = ...,
        event_names: _Optional[_Iterable[_Union[EventName, _Mapping]]] = ...,
        debug_annotation_names: _Optional[_Iterable[_Union[DebugAnnotationName, _Mapping]]] = ...,
        debug_annotation_value_type_names: _Optional[_Iterable[_Union[DebugAnnotationValueTypeName, _Mapping]]] = ...,
        source_locations: _Optional[_Iterable[_Union[SourceLocation, _Mapping]]] = ...,
        unsymbolized_source_locations: _Optional[_Iterable[_Union[UnsymbolizedSourceLocation, _Mapping]]] = ...,
        log_message_body: _Optional[_Iterable[_Union[LogMessageBody, _Mapping]]] = ...,
        histogram_names: _Optional[_Iterable[_Union[HistogramName, _Mapping]]] = ...,
        build_ids: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        mapping_paths: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        source_paths: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        function_names: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        profiled_frame_symbols: _Optional[_Iterable[_Union[ProfiledFrameSymbols, _Mapping]]] = ...,
        mappings: _Optional[_Iterable[_Union[Mapping, _Mapping]]] = ...,
        frames: _Optional[_Iterable[_Union[Frame, _Mapping]]] = ...,
        callstacks: _Optional[_Iterable[_Union[Callstack, _Mapping]]] = ...,
        vulkan_memory_keys: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        graphics_contexts: _Optional[_Iterable[_Union[InternedGraphicsContext, _Mapping]]] = ...,
        gpu_specifications: _Optional[_Iterable[_Union[InternedGpuRenderStageSpecification, _Mapping]]] = ...,
        kernel_symbols: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        debug_annotation_string_values: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        packet_context: _Optional[_Iterable[_Union[NetworkPacketContext, _Mapping]]] = ...,
        v8_js_function_name: _Optional[_Iterable[_Union[InternedV8String, _Mapping]]] = ...,
        v8_js_function: _Optional[_Iterable[_Union[InternedV8JsFunction, _Mapping]]] = ...,
        v8_js_script: _Optional[_Iterable[_Union[InternedV8JsScript, _Mapping]]] = ...,
        v8_wasm_script: _Optional[_Iterable[_Union[InternedV8WasmScript, _Mapping]]] = ...,
        v8_isolate: _Optional[_Iterable[_Union[InternedV8Isolate, _Mapping]]] = ...,
        protolog_string_args: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
    ) -> None: ...

class MemoryTrackerSnapshot(_message.Message):
    __slots__ = ("global_dump_id", "level_of_detail", "process_memory_dumps")

    class LevelOfDetail(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        DETAIL_FULL: _ClassVar[MemoryTrackerSnapshot.LevelOfDetail]
        DETAIL_LIGHT: _ClassVar[MemoryTrackerSnapshot.LevelOfDetail]
        DETAIL_BACKGROUND: _ClassVar[MemoryTrackerSnapshot.LevelOfDetail]

    DETAIL_FULL: MemoryTrackerSnapshot.LevelOfDetail
    DETAIL_LIGHT: MemoryTrackerSnapshot.LevelOfDetail
    DETAIL_BACKGROUND: MemoryTrackerSnapshot.LevelOfDetail

    class ProcessSnapshot(_message.Message):
        __slots__ = ("pid", "allocator_dumps", "memory_edges")

        class MemoryNode(_message.Message):
            __slots__ = ("id", "absolute_name", "weak", "size_bytes", "entries")

            class MemoryNodeEntry(_message.Message):
                __slots__ = ("name", "units", "value_uint64", "value_string")

                class Units(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
                    __slots__ = ()
                    UNSPECIFIED: _ClassVar[MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units]
                    BYTES: _ClassVar[MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units]
                    COUNT: _ClassVar[MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units]

                UNSPECIFIED: MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units
                BYTES: MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units
                COUNT: MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units
                NAME_FIELD_NUMBER: _ClassVar[int]
                UNITS_FIELD_NUMBER: _ClassVar[int]
                VALUE_UINT64_FIELD_NUMBER: _ClassVar[int]
                VALUE_STRING_FIELD_NUMBER: _ClassVar[int]
                name: str
                units: MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units
                value_uint64: int
                value_string: str
                def __init__(
                    self,
                    name: _Optional[str] = ...,
                    units: _Optional[
                        _Union[MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units, str]
                    ] = ...,
                    value_uint64: _Optional[int] = ...,
                    value_string: _Optional[str] = ...,
                ) -> None: ...

            ID_FIELD_NUMBER: _ClassVar[int]
            ABSOLUTE_NAME_FIELD_NUMBER: _ClassVar[int]
            WEAK_FIELD_NUMBER: _ClassVar[int]
            SIZE_BYTES_FIELD_NUMBER: _ClassVar[int]
            ENTRIES_FIELD_NUMBER: _ClassVar[int]
            id: int
            absolute_name: str
            weak: bool
            size_bytes: int
            entries: _containers.RepeatedCompositeFieldContainer[
                MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry
            ]
            def __init__(
                self,
                id: _Optional[int] = ...,
                absolute_name: _Optional[str] = ...,
                weak: bool = ...,
                size_bytes: _Optional[int] = ...,
                entries: _Optional[
                    _Iterable[_Union[MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry, _Mapping]]
                ] = ...,
            ) -> None: ...

        class MemoryEdge(_message.Message):
            __slots__ = ("source_id", "target_id", "importance", "overridable")
            SOURCE_ID_FIELD_NUMBER: _ClassVar[int]
            TARGET_ID_FIELD_NUMBER: _ClassVar[int]
            IMPORTANCE_FIELD_NUMBER: _ClassVar[int]
            OVERRIDABLE_FIELD_NUMBER: _ClassVar[int]
            source_id: int
            target_id: int
            importance: int
            overridable: bool
            def __init__(
                self,
                source_id: _Optional[int] = ...,
                target_id: _Optional[int] = ...,
                importance: _Optional[int] = ...,
                overridable: bool = ...,
            ) -> None: ...

        PID_FIELD_NUMBER: _ClassVar[int]
        ALLOCATOR_DUMPS_FIELD_NUMBER: _ClassVar[int]
        MEMORY_EDGES_FIELD_NUMBER: _ClassVar[int]
        pid: int
        allocator_dumps: _containers.RepeatedCompositeFieldContainer[MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode]
        memory_edges: _containers.RepeatedCompositeFieldContainer[MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge]
        def __init__(
            self,
            pid: _Optional[int] = ...,
            allocator_dumps: _Optional[
                _Iterable[_Union[MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode, _Mapping]]
            ] = ...,
            memory_edges: _Optional[
                _Iterable[_Union[MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge, _Mapping]]
            ] = ...,
        ) -> None: ...

    GLOBAL_DUMP_ID_FIELD_NUMBER: _ClassVar[int]
    LEVEL_OF_DETAIL_FIELD_NUMBER: _ClassVar[int]
    PROCESS_MEMORY_DUMPS_FIELD_NUMBER: _ClassVar[int]
    global_dump_id: int
    level_of_detail: MemoryTrackerSnapshot.LevelOfDetail
    process_memory_dumps: _containers.RepeatedCompositeFieldContainer[MemoryTrackerSnapshot.ProcessSnapshot]
    def __init__(
        self,
        global_dump_id: _Optional[int] = ...,
        level_of_detail: _Optional[_Union[MemoryTrackerSnapshot.LevelOfDetail, str]] = ...,
        process_memory_dumps: _Optional[_Iterable[_Union[MemoryTrackerSnapshot.ProcessSnapshot, _Mapping]]] = ...,
    ) -> None: ...

class PerfettoMetatrace(_message.Message):
    __slots__ = (
        "event_id",
        "counter_id",
        "event_name",
        "event_name_iid",
        "counter_name",
        "event_duration_ns",
        "counter_value",
        "thread_id",
        "has_overruns",
        "args",
        "interned_strings",
    )

    class Arg(_message.Message):
        __slots__ = ("key", "key_iid", "value", "value_iid")
        KEY_FIELD_NUMBER: _ClassVar[int]
        KEY_IID_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        VALUE_IID_FIELD_NUMBER: _ClassVar[int]
        key: str
        key_iid: int
        value: str
        value_iid: int
        def __init__(
            self,
            key: _Optional[str] = ...,
            key_iid: _Optional[int] = ...,
            value: _Optional[str] = ...,
            value_iid: _Optional[int] = ...,
        ) -> None: ...

    class InternedString(_message.Message):
        __slots__ = ("iid", "value")
        IID_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        iid: int
        value: str
        def __init__(self, iid: _Optional[int] = ..., value: _Optional[str] = ...) -> None: ...

    EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    COUNTER_ID_FIELD_NUMBER: _ClassVar[int]
    EVENT_NAME_FIELD_NUMBER: _ClassVar[int]
    EVENT_NAME_IID_FIELD_NUMBER: _ClassVar[int]
    COUNTER_NAME_FIELD_NUMBER: _ClassVar[int]
    EVENT_DURATION_NS_FIELD_NUMBER: _ClassVar[int]
    COUNTER_VALUE_FIELD_NUMBER: _ClassVar[int]
    THREAD_ID_FIELD_NUMBER: _ClassVar[int]
    HAS_OVERRUNS_FIELD_NUMBER: _ClassVar[int]
    ARGS_FIELD_NUMBER: _ClassVar[int]
    INTERNED_STRINGS_FIELD_NUMBER: _ClassVar[int]
    event_id: int
    counter_id: int
    event_name: str
    event_name_iid: int
    counter_name: str
    event_duration_ns: int
    counter_value: int
    thread_id: int
    has_overruns: bool
    args: _containers.RepeatedCompositeFieldContainer[PerfettoMetatrace.Arg]
    interned_strings: _containers.RepeatedCompositeFieldContainer[PerfettoMetatrace.InternedString]
    def __init__(
        self,
        event_id: _Optional[int] = ...,
        counter_id: _Optional[int] = ...,
        event_name: _Optional[str] = ...,
        event_name_iid: _Optional[int] = ...,
        counter_name: _Optional[str] = ...,
        event_duration_ns: _Optional[int] = ...,
        counter_value: _Optional[int] = ...,
        thread_id: _Optional[int] = ...,
        has_overruns: bool = ...,
        args: _Optional[_Iterable[_Union[PerfettoMetatrace.Arg, _Mapping]]] = ...,
        interned_strings: _Optional[_Iterable[_Union[PerfettoMetatrace.InternedString, _Mapping]]] = ...,
    ) -> None: ...

class TracingServiceEvent(_message.Message):
    __slots__ = (
        "tracing_started",
        "all_data_sources_started",
        "all_data_sources_flushed",
        "read_tracing_buffers_completed",
        "tracing_disabled",
        "seized_for_bugreport",
    )
    TRACING_STARTED_FIELD_NUMBER: _ClassVar[int]
    ALL_DATA_SOURCES_STARTED_FIELD_NUMBER: _ClassVar[int]
    ALL_DATA_SOURCES_FLUSHED_FIELD_NUMBER: _ClassVar[int]
    READ_TRACING_BUFFERS_COMPLETED_FIELD_NUMBER: _ClassVar[int]
    TRACING_DISABLED_FIELD_NUMBER: _ClassVar[int]
    SEIZED_FOR_BUGREPORT_FIELD_NUMBER: _ClassVar[int]
    tracing_started: bool
    all_data_sources_started: bool
    all_data_sources_flushed: bool
    read_tracing_buffers_completed: bool
    tracing_disabled: bool
    seized_for_bugreport: bool
    def __init__(
        self,
        tracing_started: bool = ...,
        all_data_sources_started: bool = ...,
        all_data_sources_flushed: bool = ...,
        read_tracing_buffers_completed: bool = ...,
        tracing_disabled: bool = ...,
        seized_for_bugreport: bool = ...,
    ) -> None: ...

class AndroidEnergyConsumer(_message.Message):
    __slots__ = ("energy_consumer_id", "ordinal", "type", "name")
    ENERGY_CONSUMER_ID_FIELD_NUMBER: _ClassVar[int]
    ORDINAL_FIELD_NUMBER: _ClassVar[int]
    TYPE_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    energy_consumer_id: int
    ordinal: int
    type: str
    name: str
    def __init__(
        self,
        energy_consumer_id: _Optional[int] = ...,
        ordinal: _Optional[int] = ...,
        type: _Optional[str] = ...,
        name: _Optional[str] = ...,
    ) -> None: ...

class AndroidEnergyConsumerDescriptor(_message.Message):
    __slots__ = ("energy_consumers",)
    ENERGY_CONSUMERS_FIELD_NUMBER: _ClassVar[int]
    energy_consumers: _containers.RepeatedCompositeFieldContainer[AndroidEnergyConsumer]
    def __init__(
        self, energy_consumers: _Optional[_Iterable[_Union[AndroidEnergyConsumer, _Mapping]]] = ...
    ) -> None: ...

class AndroidEnergyEstimationBreakdown(_message.Message):
    __slots__ = ("energy_consumer_descriptor", "energy_consumer_id", "energy_uws", "per_uid_breakdown")

    class EnergyUidBreakdown(_message.Message):
        __slots__ = ("uid", "energy_uws")
        UID_FIELD_NUMBER: _ClassVar[int]
        ENERGY_UWS_FIELD_NUMBER: _ClassVar[int]
        uid: int
        energy_uws: int
        def __init__(self, uid: _Optional[int] = ..., energy_uws: _Optional[int] = ...) -> None: ...

    ENERGY_CONSUMER_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    ENERGY_CONSUMER_ID_FIELD_NUMBER: _ClassVar[int]
    ENERGY_UWS_FIELD_NUMBER: _ClassVar[int]
    PER_UID_BREAKDOWN_FIELD_NUMBER: _ClassVar[int]
    energy_consumer_descriptor: AndroidEnergyConsumerDescriptor
    energy_consumer_id: int
    energy_uws: int
    per_uid_breakdown: _containers.RepeatedCompositeFieldContainer[AndroidEnergyEstimationBreakdown.EnergyUidBreakdown]
    def __init__(
        self,
        energy_consumer_descriptor: _Optional[_Union[AndroidEnergyConsumerDescriptor, _Mapping]] = ...,
        energy_consumer_id: _Optional[int] = ...,
        energy_uws: _Optional[int] = ...,
        per_uid_breakdown: _Optional[
            _Iterable[_Union[AndroidEnergyEstimationBreakdown.EnergyUidBreakdown, _Mapping]]
        ] = ...,
    ) -> None: ...

class EntityStateResidency(_message.Message):
    __slots__ = ("power_entity_state", "residency")

    class PowerEntityState(_message.Message):
        __slots__ = ("entity_index", "state_index", "entity_name", "state_name")
        ENTITY_INDEX_FIELD_NUMBER: _ClassVar[int]
        STATE_INDEX_FIELD_NUMBER: _ClassVar[int]
        ENTITY_NAME_FIELD_NUMBER: _ClassVar[int]
        STATE_NAME_FIELD_NUMBER: _ClassVar[int]
        entity_index: int
        state_index: int
        entity_name: str
        state_name: str
        def __init__(
            self,
            entity_index: _Optional[int] = ...,
            state_index: _Optional[int] = ...,
            entity_name: _Optional[str] = ...,
            state_name: _Optional[str] = ...,
        ) -> None: ...

    class StateResidency(_message.Message):
        __slots__ = (
            "entity_index",
            "state_index",
            "total_time_in_state_ms",
            "total_state_entry_count",
            "last_entry_timestamp_ms",
        )
        ENTITY_INDEX_FIELD_NUMBER: _ClassVar[int]
        STATE_INDEX_FIELD_NUMBER: _ClassVar[int]
        TOTAL_TIME_IN_STATE_MS_FIELD_NUMBER: _ClassVar[int]
        TOTAL_STATE_ENTRY_COUNT_FIELD_NUMBER: _ClassVar[int]
        LAST_ENTRY_TIMESTAMP_MS_FIELD_NUMBER: _ClassVar[int]
        entity_index: int
        state_index: int
        total_time_in_state_ms: int
        total_state_entry_count: int
        last_entry_timestamp_ms: int
        def __init__(
            self,
            entity_index: _Optional[int] = ...,
            state_index: _Optional[int] = ...,
            total_time_in_state_ms: _Optional[int] = ...,
            total_state_entry_count: _Optional[int] = ...,
            last_entry_timestamp_ms: _Optional[int] = ...,
        ) -> None: ...

    POWER_ENTITY_STATE_FIELD_NUMBER: _ClassVar[int]
    RESIDENCY_FIELD_NUMBER: _ClassVar[int]
    power_entity_state: _containers.RepeatedCompositeFieldContainer[EntityStateResidency.PowerEntityState]
    residency: _containers.RepeatedCompositeFieldContainer[EntityStateResidency.StateResidency]
    def __init__(
        self,
        power_entity_state: _Optional[_Iterable[_Union[EntityStateResidency.PowerEntityState, _Mapping]]] = ...,
        residency: _Optional[_Iterable[_Union[EntityStateResidency.StateResidency, _Mapping]]] = ...,
    ) -> None: ...

class BatteryCounters(_message.Message):
    __slots__ = (
        "charge_counter_uah",
        "capacity_percent",
        "current_ua",
        "current_avg_ua",
        "name",
        "energy_counter_uwh",
        "voltage_uv",
    )
    CHARGE_COUNTER_UAH_FIELD_NUMBER: _ClassVar[int]
    CAPACITY_PERCENT_FIELD_NUMBER: _ClassVar[int]
    CURRENT_UA_FIELD_NUMBER: _ClassVar[int]
    CURRENT_AVG_UA_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    ENERGY_COUNTER_UWH_FIELD_NUMBER: _ClassVar[int]
    VOLTAGE_UV_FIELD_NUMBER: _ClassVar[int]
    charge_counter_uah: int
    capacity_percent: float
    current_ua: int
    current_avg_ua: int
    name: str
    energy_counter_uwh: int
    voltage_uv: int
    def __init__(
        self,
        charge_counter_uah: _Optional[int] = ...,
        capacity_percent: _Optional[float] = ...,
        current_ua: _Optional[int] = ...,
        current_avg_ua: _Optional[int] = ...,
        name: _Optional[str] = ...,
        energy_counter_uwh: _Optional[int] = ...,
        voltage_uv: _Optional[int] = ...,
    ) -> None: ...

class PowerRails(_message.Message):
    __slots__ = ("rail_descriptor", "energy_data")

    class RailDescriptor(_message.Message):
        __slots__ = ("index", "rail_name", "subsys_name", "sampling_rate")
        INDEX_FIELD_NUMBER: _ClassVar[int]
        RAIL_NAME_FIELD_NUMBER: _ClassVar[int]
        SUBSYS_NAME_FIELD_NUMBER: _ClassVar[int]
        SAMPLING_RATE_FIELD_NUMBER: _ClassVar[int]
        index: int
        rail_name: str
        subsys_name: str
        sampling_rate: int
        def __init__(
            self,
            index: _Optional[int] = ...,
            rail_name: _Optional[str] = ...,
            subsys_name: _Optional[str] = ...,
            sampling_rate: _Optional[int] = ...,
        ) -> None: ...

    class EnergyData(_message.Message):
        __slots__ = ("index", "timestamp_ms", "energy")
        INDEX_FIELD_NUMBER: _ClassVar[int]
        TIMESTAMP_MS_FIELD_NUMBER: _ClassVar[int]
        ENERGY_FIELD_NUMBER: _ClassVar[int]
        index: int
        timestamp_ms: int
        energy: int
        def __init__(
            self, index: _Optional[int] = ..., timestamp_ms: _Optional[int] = ..., energy: _Optional[int] = ...
        ) -> None: ...

    RAIL_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    ENERGY_DATA_FIELD_NUMBER: _ClassVar[int]
    rail_descriptor: _containers.RepeatedCompositeFieldContainer[PowerRails.RailDescriptor]
    energy_data: _containers.RepeatedCompositeFieldContainer[PowerRails.EnergyData]
    def __init__(
        self,
        rail_descriptor: _Optional[_Iterable[_Union[PowerRails.RailDescriptor, _Mapping]]] = ...,
        energy_data: _Optional[_Iterable[_Union[PowerRails.EnergyData, _Mapping]]] = ...,
    ) -> None: ...

class ObfuscatedMember(_message.Message):
    __slots__ = ("obfuscated_name", "deobfuscated_name")
    OBFUSCATED_NAME_FIELD_NUMBER: _ClassVar[int]
    DEOBFUSCATED_NAME_FIELD_NUMBER: _ClassVar[int]
    obfuscated_name: str
    deobfuscated_name: str
    def __init__(self, obfuscated_name: _Optional[str] = ..., deobfuscated_name: _Optional[str] = ...) -> None: ...

class ObfuscatedClass(_message.Message):
    __slots__ = ("obfuscated_name", "deobfuscated_name", "obfuscated_members", "obfuscated_methods")
    OBFUSCATED_NAME_FIELD_NUMBER: _ClassVar[int]
    DEOBFUSCATED_NAME_FIELD_NUMBER: _ClassVar[int]
    OBFUSCATED_MEMBERS_FIELD_NUMBER: _ClassVar[int]
    OBFUSCATED_METHODS_FIELD_NUMBER: _ClassVar[int]
    obfuscated_name: str
    deobfuscated_name: str
    obfuscated_members: _containers.RepeatedCompositeFieldContainer[ObfuscatedMember]
    obfuscated_methods: _containers.RepeatedCompositeFieldContainer[ObfuscatedMember]
    def __init__(
        self,
        obfuscated_name: _Optional[str] = ...,
        deobfuscated_name: _Optional[str] = ...,
        obfuscated_members: _Optional[_Iterable[_Union[ObfuscatedMember, _Mapping]]] = ...,
        obfuscated_methods: _Optional[_Iterable[_Union[ObfuscatedMember, _Mapping]]] = ...,
    ) -> None: ...

class DeobfuscationMapping(_message.Message):
    __slots__ = ("package_name", "version_code", "obfuscated_classes")
    PACKAGE_NAME_FIELD_NUMBER: _ClassVar[int]
    VERSION_CODE_FIELD_NUMBER: _ClassVar[int]
    OBFUSCATED_CLASSES_FIELD_NUMBER: _ClassVar[int]
    package_name: str
    version_code: int
    obfuscated_classes: _containers.RepeatedCompositeFieldContainer[ObfuscatedClass]
    def __init__(
        self,
        package_name: _Optional[str] = ...,
        version_code: _Optional[int] = ...,
        obfuscated_classes: _Optional[_Iterable[_Union[ObfuscatedClass, _Mapping]]] = ...,
    ) -> None: ...

class HeapGraphRoot(_message.Message):
    __slots__ = ("object_ids", "root_type")

    class Type(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        ROOT_UNKNOWN: _ClassVar[HeapGraphRoot.Type]
        ROOT_JNI_GLOBAL: _ClassVar[HeapGraphRoot.Type]
        ROOT_JNI_LOCAL: _ClassVar[HeapGraphRoot.Type]
        ROOT_JAVA_FRAME: _ClassVar[HeapGraphRoot.Type]
        ROOT_NATIVE_STACK: _ClassVar[HeapGraphRoot.Type]
        ROOT_STICKY_CLASS: _ClassVar[HeapGraphRoot.Type]
        ROOT_THREAD_BLOCK: _ClassVar[HeapGraphRoot.Type]
        ROOT_MONITOR_USED: _ClassVar[HeapGraphRoot.Type]
        ROOT_THREAD_OBJECT: _ClassVar[HeapGraphRoot.Type]
        ROOT_INTERNED_STRING: _ClassVar[HeapGraphRoot.Type]
        ROOT_FINALIZING: _ClassVar[HeapGraphRoot.Type]
        ROOT_DEBUGGER: _ClassVar[HeapGraphRoot.Type]
        ROOT_REFERENCE_CLEANUP: _ClassVar[HeapGraphRoot.Type]
        ROOT_VM_INTERNAL: _ClassVar[HeapGraphRoot.Type]
        ROOT_JNI_MONITOR: _ClassVar[HeapGraphRoot.Type]

    ROOT_UNKNOWN: HeapGraphRoot.Type
    ROOT_JNI_GLOBAL: HeapGraphRoot.Type
    ROOT_JNI_LOCAL: HeapGraphRoot.Type
    ROOT_JAVA_FRAME: HeapGraphRoot.Type
    ROOT_NATIVE_STACK: HeapGraphRoot.Type
    ROOT_STICKY_CLASS: HeapGraphRoot.Type
    ROOT_THREAD_BLOCK: HeapGraphRoot.Type
    ROOT_MONITOR_USED: HeapGraphRoot.Type
    ROOT_THREAD_OBJECT: HeapGraphRoot.Type
    ROOT_INTERNED_STRING: HeapGraphRoot.Type
    ROOT_FINALIZING: HeapGraphRoot.Type
    ROOT_DEBUGGER: HeapGraphRoot.Type
    ROOT_REFERENCE_CLEANUP: HeapGraphRoot.Type
    ROOT_VM_INTERNAL: HeapGraphRoot.Type
    ROOT_JNI_MONITOR: HeapGraphRoot.Type
    OBJECT_IDS_FIELD_NUMBER: _ClassVar[int]
    ROOT_TYPE_FIELD_NUMBER: _ClassVar[int]
    object_ids: _containers.RepeatedScalarFieldContainer[int]
    root_type: HeapGraphRoot.Type
    def __init__(
        self, object_ids: _Optional[_Iterable[int]] = ..., root_type: _Optional[_Union[HeapGraphRoot.Type, str]] = ...
    ) -> None: ...

class HeapGraphType(_message.Message):
    __slots__ = (
        "id",
        "location_id",
        "class_name",
        "object_size",
        "superclass_id",
        "reference_field_id",
        "kind",
        "classloader_id",
    )

    class Kind(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        KIND_UNKNOWN: _ClassVar[HeapGraphType.Kind]
        KIND_NORMAL: _ClassVar[HeapGraphType.Kind]
        KIND_NOREFERENCES: _ClassVar[HeapGraphType.Kind]
        KIND_STRING: _ClassVar[HeapGraphType.Kind]
        KIND_ARRAY: _ClassVar[HeapGraphType.Kind]
        KIND_CLASS: _ClassVar[HeapGraphType.Kind]
        KIND_CLASSLOADER: _ClassVar[HeapGraphType.Kind]
        KIND_DEXCACHE: _ClassVar[HeapGraphType.Kind]
        KIND_SOFT_REFERENCE: _ClassVar[HeapGraphType.Kind]
        KIND_WEAK_REFERENCE: _ClassVar[HeapGraphType.Kind]
        KIND_FINALIZER_REFERENCE: _ClassVar[HeapGraphType.Kind]
        KIND_PHANTOM_REFERENCE: _ClassVar[HeapGraphType.Kind]

    KIND_UNKNOWN: HeapGraphType.Kind
    KIND_NORMAL: HeapGraphType.Kind
    KIND_NOREFERENCES: HeapGraphType.Kind
    KIND_STRING: HeapGraphType.Kind
    KIND_ARRAY: HeapGraphType.Kind
    KIND_CLASS: HeapGraphType.Kind
    KIND_CLASSLOADER: HeapGraphType.Kind
    KIND_DEXCACHE: HeapGraphType.Kind
    KIND_SOFT_REFERENCE: HeapGraphType.Kind
    KIND_WEAK_REFERENCE: HeapGraphType.Kind
    KIND_FINALIZER_REFERENCE: HeapGraphType.Kind
    KIND_PHANTOM_REFERENCE: HeapGraphType.Kind
    ID_FIELD_NUMBER: _ClassVar[int]
    LOCATION_ID_FIELD_NUMBER: _ClassVar[int]
    CLASS_NAME_FIELD_NUMBER: _ClassVar[int]
    OBJECT_SIZE_FIELD_NUMBER: _ClassVar[int]
    SUPERCLASS_ID_FIELD_NUMBER: _ClassVar[int]
    REFERENCE_FIELD_ID_FIELD_NUMBER: _ClassVar[int]
    KIND_FIELD_NUMBER: _ClassVar[int]
    CLASSLOADER_ID_FIELD_NUMBER: _ClassVar[int]
    id: int
    location_id: int
    class_name: str
    object_size: int
    superclass_id: int
    reference_field_id: _containers.RepeatedScalarFieldContainer[int]
    kind: HeapGraphType.Kind
    classloader_id: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        location_id: _Optional[int] = ...,
        class_name: _Optional[str] = ...,
        object_size: _Optional[int] = ...,
        superclass_id: _Optional[int] = ...,
        reference_field_id: _Optional[_Iterable[int]] = ...,
        kind: _Optional[_Union[HeapGraphType.Kind, str]] = ...,
        classloader_id: _Optional[int] = ...,
    ) -> None: ...

class HeapGraphObject(_message.Message):
    __slots__ = (
        "id",
        "id_delta",
        "type_id",
        "self_size",
        "reference_field_id_base",
        "reference_field_id",
        "reference_object_id",
        "native_allocation_registry_size_field",
    )
    ID_FIELD_NUMBER: _ClassVar[int]
    ID_DELTA_FIELD_NUMBER: _ClassVar[int]
    TYPE_ID_FIELD_NUMBER: _ClassVar[int]
    SELF_SIZE_FIELD_NUMBER: _ClassVar[int]
    REFERENCE_FIELD_ID_BASE_FIELD_NUMBER: _ClassVar[int]
    REFERENCE_FIELD_ID_FIELD_NUMBER: _ClassVar[int]
    REFERENCE_OBJECT_ID_FIELD_NUMBER: _ClassVar[int]
    NATIVE_ALLOCATION_REGISTRY_SIZE_FIELD_FIELD_NUMBER: _ClassVar[int]
    id: int
    id_delta: int
    type_id: int
    self_size: int
    reference_field_id_base: int
    reference_field_id: _containers.RepeatedScalarFieldContainer[int]
    reference_object_id: _containers.RepeatedScalarFieldContainer[int]
    native_allocation_registry_size_field: int
    def __init__(
        self,
        id: _Optional[int] = ...,
        id_delta: _Optional[int] = ...,
        type_id: _Optional[int] = ...,
        self_size: _Optional[int] = ...,
        reference_field_id_base: _Optional[int] = ...,
        reference_field_id: _Optional[_Iterable[int]] = ...,
        reference_object_id: _Optional[_Iterable[int]] = ...,
        native_allocation_registry_size_field: _Optional[int] = ...,
    ) -> None: ...

class HeapGraph(_message.Message):
    __slots__ = ("pid", "objects", "roots", "types", "field_names", "location_names", "continued", "index")
    PID_FIELD_NUMBER: _ClassVar[int]
    OBJECTS_FIELD_NUMBER: _ClassVar[int]
    ROOTS_FIELD_NUMBER: _ClassVar[int]
    TYPES_FIELD_NUMBER: _ClassVar[int]
    FIELD_NAMES_FIELD_NUMBER: _ClassVar[int]
    LOCATION_NAMES_FIELD_NUMBER: _ClassVar[int]
    CONTINUED_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    pid: int
    objects: _containers.RepeatedCompositeFieldContainer[HeapGraphObject]
    roots: _containers.RepeatedCompositeFieldContainer[HeapGraphRoot]
    types: _containers.RepeatedCompositeFieldContainer[HeapGraphType]
    field_names: _containers.RepeatedCompositeFieldContainer[InternedString]
    location_names: _containers.RepeatedCompositeFieldContainer[InternedString]
    continued: bool
    index: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        objects: _Optional[_Iterable[_Union[HeapGraphObject, _Mapping]]] = ...,
        roots: _Optional[_Iterable[_Union[HeapGraphRoot, _Mapping]]] = ...,
        types: _Optional[_Iterable[_Union[HeapGraphType, _Mapping]]] = ...,
        field_names: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        location_names: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        continued: bool = ...,
        index: _Optional[int] = ...,
    ) -> None: ...

class ProfilePacket(_message.Message):
    __slots__ = ("strings", "mappings", "frames", "callstacks", "process_dumps", "continued", "index")

    class HeapSample(_message.Message):
        __slots__ = (
            "callstack_id",
            "self_allocated",
            "self_freed",
            "self_max",
            "self_max_count",
            "timestamp",
            "alloc_count",
            "free_count",
        )
        CALLSTACK_ID_FIELD_NUMBER: _ClassVar[int]
        SELF_ALLOCATED_FIELD_NUMBER: _ClassVar[int]
        SELF_FREED_FIELD_NUMBER: _ClassVar[int]
        SELF_MAX_FIELD_NUMBER: _ClassVar[int]
        SELF_MAX_COUNT_FIELD_NUMBER: _ClassVar[int]
        TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
        ALLOC_COUNT_FIELD_NUMBER: _ClassVar[int]
        FREE_COUNT_FIELD_NUMBER: _ClassVar[int]
        callstack_id: int
        self_allocated: int
        self_freed: int
        self_max: int
        self_max_count: int
        timestamp: int
        alloc_count: int
        free_count: int
        def __init__(
            self,
            callstack_id: _Optional[int] = ...,
            self_allocated: _Optional[int] = ...,
            self_freed: _Optional[int] = ...,
            self_max: _Optional[int] = ...,
            self_max_count: _Optional[int] = ...,
            timestamp: _Optional[int] = ...,
            alloc_count: _Optional[int] = ...,
            free_count: _Optional[int] = ...,
        ) -> None: ...

    class Histogram(_message.Message):
        __slots__ = ("buckets",)

        class Bucket(_message.Message):
            __slots__ = ("upper_limit", "max_bucket", "count")
            UPPER_LIMIT_FIELD_NUMBER: _ClassVar[int]
            MAX_BUCKET_FIELD_NUMBER: _ClassVar[int]
            COUNT_FIELD_NUMBER: _ClassVar[int]
            upper_limit: int
            max_bucket: bool
            count: int
            def __init__(
                self, upper_limit: _Optional[int] = ..., max_bucket: bool = ..., count: _Optional[int] = ...
            ) -> None: ...

        BUCKETS_FIELD_NUMBER: _ClassVar[int]
        buckets: _containers.RepeatedCompositeFieldContainer[ProfilePacket.Histogram.Bucket]
        def __init__(
            self, buckets: _Optional[_Iterable[_Union[ProfilePacket.Histogram.Bucket, _Mapping]]] = ...
        ) -> None: ...

    class ProcessStats(_message.Message):
        __slots__ = (
            "unwinding_errors",
            "heap_samples",
            "map_reparses",
            "unwinding_time_us",
            "total_unwinding_time_us",
            "client_spinlock_blocked_us",
        )
        UNWINDING_ERRORS_FIELD_NUMBER: _ClassVar[int]
        HEAP_SAMPLES_FIELD_NUMBER: _ClassVar[int]
        MAP_REPARSES_FIELD_NUMBER: _ClassVar[int]
        UNWINDING_TIME_US_FIELD_NUMBER: _ClassVar[int]
        TOTAL_UNWINDING_TIME_US_FIELD_NUMBER: _ClassVar[int]
        CLIENT_SPINLOCK_BLOCKED_US_FIELD_NUMBER: _ClassVar[int]
        unwinding_errors: int
        heap_samples: int
        map_reparses: int
        unwinding_time_us: ProfilePacket.Histogram
        total_unwinding_time_us: int
        client_spinlock_blocked_us: int
        def __init__(
            self,
            unwinding_errors: _Optional[int] = ...,
            heap_samples: _Optional[int] = ...,
            map_reparses: _Optional[int] = ...,
            unwinding_time_us: _Optional[_Union[ProfilePacket.Histogram, _Mapping]] = ...,
            total_unwinding_time_us: _Optional[int] = ...,
            client_spinlock_blocked_us: _Optional[int] = ...,
        ) -> None: ...

    class ProcessHeapSamples(_message.Message):
        __slots__ = (
            "pid",
            "from_startup",
            "rejected_concurrent",
            "disconnected",
            "buffer_overran",
            "client_error",
            "buffer_corrupted",
            "hit_guardrail",
            "heap_name",
            "sampling_interval_bytes",
            "orig_sampling_interval_bytes",
            "timestamp",
            "stats",
            "samples",
        )

        class ClientError(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            CLIENT_ERROR_NONE: _ClassVar[ProfilePacket.ProcessHeapSamples.ClientError]
            CLIENT_ERROR_HIT_TIMEOUT: _ClassVar[ProfilePacket.ProcessHeapSamples.ClientError]
            CLIENT_ERROR_INVALID_STACK_BOUNDS: _ClassVar[ProfilePacket.ProcessHeapSamples.ClientError]

        CLIENT_ERROR_NONE: ProfilePacket.ProcessHeapSamples.ClientError
        CLIENT_ERROR_HIT_TIMEOUT: ProfilePacket.ProcessHeapSamples.ClientError
        CLIENT_ERROR_INVALID_STACK_BOUNDS: ProfilePacket.ProcessHeapSamples.ClientError
        PID_FIELD_NUMBER: _ClassVar[int]
        FROM_STARTUP_FIELD_NUMBER: _ClassVar[int]
        REJECTED_CONCURRENT_FIELD_NUMBER: _ClassVar[int]
        DISCONNECTED_FIELD_NUMBER: _ClassVar[int]
        BUFFER_OVERRAN_FIELD_NUMBER: _ClassVar[int]
        CLIENT_ERROR_FIELD_NUMBER: _ClassVar[int]
        BUFFER_CORRUPTED_FIELD_NUMBER: _ClassVar[int]
        HIT_GUARDRAIL_FIELD_NUMBER: _ClassVar[int]
        HEAP_NAME_FIELD_NUMBER: _ClassVar[int]
        SAMPLING_INTERVAL_BYTES_FIELD_NUMBER: _ClassVar[int]
        ORIG_SAMPLING_INTERVAL_BYTES_FIELD_NUMBER: _ClassVar[int]
        TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
        STATS_FIELD_NUMBER: _ClassVar[int]
        SAMPLES_FIELD_NUMBER: _ClassVar[int]
        pid: int
        from_startup: bool
        rejected_concurrent: bool
        disconnected: bool
        buffer_overran: bool
        client_error: ProfilePacket.ProcessHeapSamples.ClientError
        buffer_corrupted: bool
        hit_guardrail: bool
        heap_name: str
        sampling_interval_bytes: int
        orig_sampling_interval_bytes: int
        timestamp: int
        stats: ProfilePacket.ProcessStats
        samples: _containers.RepeatedCompositeFieldContainer[ProfilePacket.HeapSample]
        def __init__(
            self,
            pid: _Optional[int] = ...,
            from_startup: bool = ...,
            rejected_concurrent: bool = ...,
            disconnected: bool = ...,
            buffer_overran: bool = ...,
            client_error: _Optional[_Union[ProfilePacket.ProcessHeapSamples.ClientError, str]] = ...,
            buffer_corrupted: bool = ...,
            hit_guardrail: bool = ...,
            heap_name: _Optional[str] = ...,
            sampling_interval_bytes: _Optional[int] = ...,
            orig_sampling_interval_bytes: _Optional[int] = ...,
            timestamp: _Optional[int] = ...,
            stats: _Optional[_Union[ProfilePacket.ProcessStats, _Mapping]] = ...,
            samples: _Optional[_Iterable[_Union[ProfilePacket.HeapSample, _Mapping]]] = ...,
        ) -> None: ...

    STRINGS_FIELD_NUMBER: _ClassVar[int]
    MAPPINGS_FIELD_NUMBER: _ClassVar[int]
    FRAMES_FIELD_NUMBER: _ClassVar[int]
    CALLSTACKS_FIELD_NUMBER: _ClassVar[int]
    PROCESS_DUMPS_FIELD_NUMBER: _ClassVar[int]
    CONTINUED_FIELD_NUMBER: _ClassVar[int]
    INDEX_FIELD_NUMBER: _ClassVar[int]
    strings: _containers.RepeatedCompositeFieldContainer[InternedString]
    mappings: _containers.RepeatedCompositeFieldContainer[Mapping]
    frames: _containers.RepeatedCompositeFieldContainer[Frame]
    callstacks: _containers.RepeatedCompositeFieldContainer[Callstack]
    process_dumps: _containers.RepeatedCompositeFieldContainer[ProfilePacket.ProcessHeapSamples]
    continued: bool
    index: int
    def __init__(
        self,
        strings: _Optional[_Iterable[_Union[InternedString, _Mapping]]] = ...,
        mappings: _Optional[_Iterable[_Union[Mapping, _Mapping]]] = ...,
        frames: _Optional[_Iterable[_Union[Frame, _Mapping]]] = ...,
        callstacks: _Optional[_Iterable[_Union[Callstack, _Mapping]]] = ...,
        process_dumps: _Optional[_Iterable[_Union[ProfilePacket.ProcessHeapSamples, _Mapping]]] = ...,
        continued: bool = ...,
        index: _Optional[int] = ...,
    ) -> None: ...

class StreamingAllocation(_message.Message):
    __slots__ = ("address", "size", "sample_size", "clock_monotonic_coarse_timestamp", "heap_id", "sequence_number")
    ADDRESS_FIELD_NUMBER: _ClassVar[int]
    SIZE_FIELD_NUMBER: _ClassVar[int]
    SAMPLE_SIZE_FIELD_NUMBER: _ClassVar[int]
    CLOCK_MONOTONIC_COARSE_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    HEAP_ID_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_NUMBER_FIELD_NUMBER: _ClassVar[int]
    address: _containers.RepeatedScalarFieldContainer[int]
    size: _containers.RepeatedScalarFieldContainer[int]
    sample_size: _containers.RepeatedScalarFieldContainer[int]
    clock_monotonic_coarse_timestamp: _containers.RepeatedScalarFieldContainer[int]
    heap_id: _containers.RepeatedScalarFieldContainer[int]
    sequence_number: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self,
        address: _Optional[_Iterable[int]] = ...,
        size: _Optional[_Iterable[int]] = ...,
        sample_size: _Optional[_Iterable[int]] = ...,
        clock_monotonic_coarse_timestamp: _Optional[_Iterable[int]] = ...,
        heap_id: _Optional[_Iterable[int]] = ...,
        sequence_number: _Optional[_Iterable[int]] = ...,
    ) -> None: ...

class StreamingFree(_message.Message):
    __slots__ = ("address", "heap_id", "sequence_number")
    ADDRESS_FIELD_NUMBER: _ClassVar[int]
    HEAP_ID_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_NUMBER_FIELD_NUMBER: _ClassVar[int]
    address: _containers.RepeatedScalarFieldContainer[int]
    heap_id: _containers.RepeatedScalarFieldContainer[int]
    sequence_number: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self,
        address: _Optional[_Iterable[int]] = ...,
        heap_id: _Optional[_Iterable[int]] = ...,
        sequence_number: _Optional[_Iterable[int]] = ...,
    ) -> None: ...

class StreamingProfilePacket(_message.Message):
    __slots__ = ("callstack_iid", "timestamp_delta_us", "process_priority")
    CALLSTACK_IID_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_DELTA_US_FIELD_NUMBER: _ClassVar[int]
    PROCESS_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    callstack_iid: _containers.RepeatedScalarFieldContainer[int]
    timestamp_delta_us: _containers.RepeatedScalarFieldContainer[int]
    process_priority: int
    def __init__(
        self,
        callstack_iid: _Optional[_Iterable[int]] = ...,
        timestamp_delta_us: _Optional[_Iterable[int]] = ...,
        process_priority: _Optional[int] = ...,
    ) -> None: ...

class Profiling(_message.Message):
    __slots__ = ()

    class CpuMode(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        MODE_UNKNOWN: _ClassVar[Profiling.CpuMode]
        MODE_KERNEL: _ClassVar[Profiling.CpuMode]
        MODE_USER: _ClassVar[Profiling.CpuMode]
        MODE_HYPERVISOR: _ClassVar[Profiling.CpuMode]
        MODE_GUEST_KERNEL: _ClassVar[Profiling.CpuMode]
        MODE_GUEST_USER: _ClassVar[Profiling.CpuMode]

    MODE_UNKNOWN: Profiling.CpuMode
    MODE_KERNEL: Profiling.CpuMode
    MODE_USER: Profiling.CpuMode
    MODE_HYPERVISOR: Profiling.CpuMode
    MODE_GUEST_KERNEL: Profiling.CpuMode
    MODE_GUEST_USER: Profiling.CpuMode

    class StackUnwindError(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNWIND_ERROR_UNKNOWN: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_NONE: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_MEMORY_INVALID: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_UNWIND_INFO: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_UNSUPPORTED: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_INVALID_MAP: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_MAX_FRAMES_EXCEEDED: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_REPEATED_FRAME: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_INVALID_ELF: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_SYSTEM_CALL: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_THREAD_TIMEOUT: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_THREAD_DOES_NOT_EXIST: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_BAD_ARCH: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_MAPS_PARSE: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_INVALID_PARAMETER: _ClassVar[Profiling.StackUnwindError]
        UNWIND_ERROR_PTRACE_CALL: _ClassVar[Profiling.StackUnwindError]

    UNWIND_ERROR_UNKNOWN: Profiling.StackUnwindError
    UNWIND_ERROR_NONE: Profiling.StackUnwindError
    UNWIND_ERROR_MEMORY_INVALID: Profiling.StackUnwindError
    UNWIND_ERROR_UNWIND_INFO: Profiling.StackUnwindError
    UNWIND_ERROR_UNSUPPORTED: Profiling.StackUnwindError
    UNWIND_ERROR_INVALID_MAP: Profiling.StackUnwindError
    UNWIND_ERROR_MAX_FRAMES_EXCEEDED: Profiling.StackUnwindError
    UNWIND_ERROR_REPEATED_FRAME: Profiling.StackUnwindError
    UNWIND_ERROR_INVALID_ELF: Profiling.StackUnwindError
    UNWIND_ERROR_SYSTEM_CALL: Profiling.StackUnwindError
    UNWIND_ERROR_THREAD_TIMEOUT: Profiling.StackUnwindError
    UNWIND_ERROR_THREAD_DOES_NOT_EXIST: Profiling.StackUnwindError
    UNWIND_ERROR_BAD_ARCH: Profiling.StackUnwindError
    UNWIND_ERROR_MAPS_PARSE: Profiling.StackUnwindError
    UNWIND_ERROR_INVALID_PARAMETER: Profiling.StackUnwindError
    UNWIND_ERROR_PTRACE_CALL: Profiling.StackUnwindError
    def __init__(self) -> None: ...

class PerfSample(_message.Message):
    __slots__ = (
        "cpu",
        "pid",
        "tid",
        "cpu_mode",
        "timebase_count",
        "callstack_iid",
        "unwind_error",
        "kernel_records_lost",
        "sample_skipped_reason",
        "producer_event",
    )

    class SampleSkipReason(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        PROFILER_SKIP_UNKNOWN: _ClassVar[PerfSample.SampleSkipReason]
        PROFILER_SKIP_READ_STAGE: _ClassVar[PerfSample.SampleSkipReason]
        PROFILER_SKIP_UNWIND_STAGE: _ClassVar[PerfSample.SampleSkipReason]
        PROFILER_SKIP_UNWIND_ENQUEUE: _ClassVar[PerfSample.SampleSkipReason]

    PROFILER_SKIP_UNKNOWN: PerfSample.SampleSkipReason
    PROFILER_SKIP_READ_STAGE: PerfSample.SampleSkipReason
    PROFILER_SKIP_UNWIND_STAGE: PerfSample.SampleSkipReason
    PROFILER_SKIP_UNWIND_ENQUEUE: PerfSample.SampleSkipReason

    class ProducerEvent(_message.Message):
        __slots__ = ("source_stop_reason",)

        class DataSourceStopReason(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            PROFILER_STOP_UNKNOWN: _ClassVar[PerfSample.ProducerEvent.DataSourceStopReason]
            PROFILER_STOP_GUARDRAIL: _ClassVar[PerfSample.ProducerEvent.DataSourceStopReason]

        PROFILER_STOP_UNKNOWN: PerfSample.ProducerEvent.DataSourceStopReason
        PROFILER_STOP_GUARDRAIL: PerfSample.ProducerEvent.DataSourceStopReason
        SOURCE_STOP_REASON_FIELD_NUMBER: _ClassVar[int]
        source_stop_reason: PerfSample.ProducerEvent.DataSourceStopReason
        def __init__(
            self, source_stop_reason: _Optional[_Union[PerfSample.ProducerEvent.DataSourceStopReason, str]] = ...
        ) -> None: ...

    CPU_FIELD_NUMBER: _ClassVar[int]
    PID_FIELD_NUMBER: _ClassVar[int]
    TID_FIELD_NUMBER: _ClassVar[int]
    CPU_MODE_FIELD_NUMBER: _ClassVar[int]
    TIMEBASE_COUNT_FIELD_NUMBER: _ClassVar[int]
    CALLSTACK_IID_FIELD_NUMBER: _ClassVar[int]
    UNWIND_ERROR_FIELD_NUMBER: _ClassVar[int]
    KERNEL_RECORDS_LOST_FIELD_NUMBER: _ClassVar[int]
    SAMPLE_SKIPPED_REASON_FIELD_NUMBER: _ClassVar[int]
    PRODUCER_EVENT_FIELD_NUMBER: _ClassVar[int]
    cpu: int
    pid: int
    tid: int
    cpu_mode: Profiling.CpuMode
    timebase_count: int
    callstack_iid: int
    unwind_error: Profiling.StackUnwindError
    kernel_records_lost: int
    sample_skipped_reason: PerfSample.SampleSkipReason
    producer_event: PerfSample.ProducerEvent
    def __init__(
        self,
        cpu: _Optional[int] = ...,
        pid: _Optional[int] = ...,
        tid: _Optional[int] = ...,
        cpu_mode: _Optional[_Union[Profiling.CpuMode, str]] = ...,
        timebase_count: _Optional[int] = ...,
        callstack_iid: _Optional[int] = ...,
        unwind_error: _Optional[_Union[Profiling.StackUnwindError, str]] = ...,
        kernel_records_lost: _Optional[int] = ...,
        sample_skipped_reason: _Optional[_Union[PerfSample.SampleSkipReason, str]] = ...,
        producer_event: _Optional[_Union[PerfSample.ProducerEvent, _Mapping]] = ...,
    ) -> None: ...

class PerfSampleDefaults(_message.Message):
    __slots__ = ("timebase", "process_shard_count", "chosen_process_shard")
    TIMEBASE_FIELD_NUMBER: _ClassVar[int]
    PROCESS_SHARD_COUNT_FIELD_NUMBER: _ClassVar[int]
    CHOSEN_PROCESS_SHARD_FIELD_NUMBER: _ClassVar[int]
    timebase: PerfEvents.Timebase
    process_shard_count: int
    chosen_process_shard: int
    def __init__(
        self,
        timebase: _Optional[_Union[PerfEvents.Timebase, _Mapping]] = ...,
        process_shard_count: _Optional[int] = ...,
        chosen_process_shard: _Optional[int] = ...,
    ) -> None: ...

class SmapsEntry(_message.Message):
    __slots__ = (
        "path",
        "size_kb",
        "private_dirty_kb",
        "swap_kb",
        "file_name",
        "start_address",
        "module_timestamp",
        "module_debugid",
        "module_debug_path",
        "protection_flags",
        "private_clean_resident_kb",
        "shared_dirty_resident_kb",
        "shared_clean_resident_kb",
        "locked_kb",
        "proportional_resident_kb",
    )
    PATH_FIELD_NUMBER: _ClassVar[int]
    SIZE_KB_FIELD_NUMBER: _ClassVar[int]
    PRIVATE_DIRTY_KB_FIELD_NUMBER: _ClassVar[int]
    SWAP_KB_FIELD_NUMBER: _ClassVar[int]
    FILE_NAME_FIELD_NUMBER: _ClassVar[int]
    START_ADDRESS_FIELD_NUMBER: _ClassVar[int]
    MODULE_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    MODULE_DEBUGID_FIELD_NUMBER: _ClassVar[int]
    MODULE_DEBUG_PATH_FIELD_NUMBER: _ClassVar[int]
    PROTECTION_FLAGS_FIELD_NUMBER: _ClassVar[int]
    PRIVATE_CLEAN_RESIDENT_KB_FIELD_NUMBER: _ClassVar[int]
    SHARED_DIRTY_RESIDENT_KB_FIELD_NUMBER: _ClassVar[int]
    SHARED_CLEAN_RESIDENT_KB_FIELD_NUMBER: _ClassVar[int]
    LOCKED_KB_FIELD_NUMBER: _ClassVar[int]
    PROPORTIONAL_RESIDENT_KB_FIELD_NUMBER: _ClassVar[int]
    path: str
    size_kb: int
    private_dirty_kb: int
    swap_kb: int
    file_name: str
    start_address: int
    module_timestamp: int
    module_debugid: str
    module_debug_path: str
    protection_flags: int
    private_clean_resident_kb: int
    shared_dirty_resident_kb: int
    shared_clean_resident_kb: int
    locked_kb: int
    proportional_resident_kb: int
    def __init__(
        self,
        path: _Optional[str] = ...,
        size_kb: _Optional[int] = ...,
        private_dirty_kb: _Optional[int] = ...,
        swap_kb: _Optional[int] = ...,
        file_name: _Optional[str] = ...,
        start_address: _Optional[int] = ...,
        module_timestamp: _Optional[int] = ...,
        module_debugid: _Optional[str] = ...,
        module_debug_path: _Optional[str] = ...,
        protection_flags: _Optional[int] = ...,
        private_clean_resident_kb: _Optional[int] = ...,
        shared_dirty_resident_kb: _Optional[int] = ...,
        shared_clean_resident_kb: _Optional[int] = ...,
        locked_kb: _Optional[int] = ...,
        proportional_resident_kb: _Optional[int] = ...,
    ) -> None: ...

class SmapsPacket(_message.Message):
    __slots__ = ("pid", "entries")
    PID_FIELD_NUMBER: _ClassVar[int]
    ENTRIES_FIELD_NUMBER: _ClassVar[int]
    pid: int
    entries: _containers.RepeatedCompositeFieldContainer[SmapsEntry]
    def __init__(
        self, pid: _Optional[int] = ..., entries: _Optional[_Iterable[_Union[SmapsEntry, _Mapping]]] = ...
    ) -> None: ...

class ProcessStats(_message.Message):
    __slots__ = ("processes", "collection_end_timestamp")

    class Thread(_message.Message):
        __slots__ = ("tid",)
        TID_FIELD_NUMBER: _ClassVar[int]
        tid: int
        def __init__(self, tid: _Optional[int] = ...) -> None: ...

    class FDInfo(_message.Message):
        __slots__ = ("fd", "path")
        FD_FIELD_NUMBER: _ClassVar[int]
        PATH_FIELD_NUMBER: _ClassVar[int]
        fd: int
        path: str
        def __init__(self, fd: _Optional[int] = ..., path: _Optional[str] = ...) -> None: ...

    class Process(_message.Message):
        __slots__ = (
            "pid",
            "vm_size_kb",
            "vm_rss_kb",
            "rss_anon_kb",
            "rss_file_kb",
            "rss_shmem_kb",
            "vm_swap_kb",
            "vm_locked_kb",
            "vm_hwm_kb",
            "oom_score_adj",
            "threads",
            "is_peak_rss_resettable",
            "chrome_private_footprint_kb",
            "chrome_peak_resident_set_kb",
            "fds",
            "smr_rss_kb",
            "smr_pss_kb",
            "smr_pss_anon_kb",
            "smr_pss_file_kb",
            "smr_pss_shmem_kb",
        )
        PID_FIELD_NUMBER: _ClassVar[int]
        VM_SIZE_KB_FIELD_NUMBER: _ClassVar[int]
        VM_RSS_KB_FIELD_NUMBER: _ClassVar[int]
        RSS_ANON_KB_FIELD_NUMBER: _ClassVar[int]
        RSS_FILE_KB_FIELD_NUMBER: _ClassVar[int]
        RSS_SHMEM_KB_FIELD_NUMBER: _ClassVar[int]
        VM_SWAP_KB_FIELD_NUMBER: _ClassVar[int]
        VM_LOCKED_KB_FIELD_NUMBER: _ClassVar[int]
        VM_HWM_KB_FIELD_NUMBER: _ClassVar[int]
        OOM_SCORE_ADJ_FIELD_NUMBER: _ClassVar[int]
        THREADS_FIELD_NUMBER: _ClassVar[int]
        IS_PEAK_RSS_RESETTABLE_FIELD_NUMBER: _ClassVar[int]
        CHROME_PRIVATE_FOOTPRINT_KB_FIELD_NUMBER: _ClassVar[int]
        CHROME_PEAK_RESIDENT_SET_KB_FIELD_NUMBER: _ClassVar[int]
        FDS_FIELD_NUMBER: _ClassVar[int]
        SMR_RSS_KB_FIELD_NUMBER: _ClassVar[int]
        SMR_PSS_KB_FIELD_NUMBER: _ClassVar[int]
        SMR_PSS_ANON_KB_FIELD_NUMBER: _ClassVar[int]
        SMR_PSS_FILE_KB_FIELD_NUMBER: _ClassVar[int]
        SMR_PSS_SHMEM_KB_FIELD_NUMBER: _ClassVar[int]
        pid: int
        vm_size_kb: int
        vm_rss_kb: int
        rss_anon_kb: int
        rss_file_kb: int
        rss_shmem_kb: int
        vm_swap_kb: int
        vm_locked_kb: int
        vm_hwm_kb: int
        oom_score_adj: int
        threads: _containers.RepeatedCompositeFieldContainer[ProcessStats.Thread]
        is_peak_rss_resettable: bool
        chrome_private_footprint_kb: int
        chrome_peak_resident_set_kb: int
        fds: _containers.RepeatedCompositeFieldContainer[ProcessStats.FDInfo]
        smr_rss_kb: int
        smr_pss_kb: int
        smr_pss_anon_kb: int
        smr_pss_file_kb: int
        smr_pss_shmem_kb: int
        def __init__(
            self,
            pid: _Optional[int] = ...,
            vm_size_kb: _Optional[int] = ...,
            vm_rss_kb: _Optional[int] = ...,
            rss_anon_kb: _Optional[int] = ...,
            rss_file_kb: _Optional[int] = ...,
            rss_shmem_kb: _Optional[int] = ...,
            vm_swap_kb: _Optional[int] = ...,
            vm_locked_kb: _Optional[int] = ...,
            vm_hwm_kb: _Optional[int] = ...,
            oom_score_adj: _Optional[int] = ...,
            threads: _Optional[_Iterable[_Union[ProcessStats.Thread, _Mapping]]] = ...,
            is_peak_rss_resettable: bool = ...,
            chrome_private_footprint_kb: _Optional[int] = ...,
            chrome_peak_resident_set_kb: _Optional[int] = ...,
            fds: _Optional[_Iterable[_Union[ProcessStats.FDInfo, _Mapping]]] = ...,
            smr_rss_kb: _Optional[int] = ...,
            smr_pss_kb: _Optional[int] = ...,
            smr_pss_anon_kb: _Optional[int] = ...,
            smr_pss_file_kb: _Optional[int] = ...,
            smr_pss_shmem_kb: _Optional[int] = ...,
        ) -> None: ...

    PROCESSES_FIELD_NUMBER: _ClassVar[int]
    COLLECTION_END_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    processes: _containers.RepeatedCompositeFieldContainer[ProcessStats.Process]
    collection_end_timestamp: int
    def __init__(
        self,
        processes: _Optional[_Iterable[_Union[ProcessStats.Process, _Mapping]]] = ...,
        collection_end_timestamp: _Optional[int] = ...,
    ) -> None: ...

class ProcessTree(_message.Message):
    __slots__ = ("processes", "threads", "collection_end_timestamp")

    class Thread(_message.Message):
        __slots__ = ("tid", "tgid", "name", "nstid")
        TID_FIELD_NUMBER: _ClassVar[int]
        TGID_FIELD_NUMBER: _ClassVar[int]
        NAME_FIELD_NUMBER: _ClassVar[int]
        NSTID_FIELD_NUMBER: _ClassVar[int]
        tid: int
        tgid: int
        name: str
        nstid: _containers.RepeatedScalarFieldContainer[int]
        def __init__(
            self,
            tid: _Optional[int] = ...,
            tgid: _Optional[int] = ...,
            name: _Optional[str] = ...,
            nstid: _Optional[_Iterable[int]] = ...,
        ) -> None: ...

    class Process(_message.Message):
        __slots__ = ("pid", "ppid", "cmdline", "threads_deprecated", "uid", "nspid")
        PID_FIELD_NUMBER: _ClassVar[int]
        PPID_FIELD_NUMBER: _ClassVar[int]
        CMDLINE_FIELD_NUMBER: _ClassVar[int]
        THREADS_DEPRECATED_FIELD_NUMBER: _ClassVar[int]
        UID_FIELD_NUMBER: _ClassVar[int]
        NSPID_FIELD_NUMBER: _ClassVar[int]
        pid: int
        ppid: int
        cmdline: _containers.RepeatedScalarFieldContainer[str]
        threads_deprecated: _containers.RepeatedCompositeFieldContainer[ProcessTree.Thread]
        uid: int
        nspid: _containers.RepeatedScalarFieldContainer[int]
        def __init__(
            self,
            pid: _Optional[int] = ...,
            ppid: _Optional[int] = ...,
            cmdline: _Optional[_Iterable[str]] = ...,
            threads_deprecated: _Optional[_Iterable[_Union[ProcessTree.Thread, _Mapping]]] = ...,
            uid: _Optional[int] = ...,
            nspid: _Optional[_Iterable[int]] = ...,
        ) -> None: ...

    PROCESSES_FIELD_NUMBER: _ClassVar[int]
    THREADS_FIELD_NUMBER: _ClassVar[int]
    COLLECTION_END_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    processes: _containers.RepeatedCompositeFieldContainer[ProcessTree.Process]
    threads: _containers.RepeatedCompositeFieldContainer[ProcessTree.Thread]
    collection_end_timestamp: int
    def __init__(
        self,
        processes: _Optional[_Iterable[_Union[ProcessTree.Process, _Mapping]]] = ...,
        threads: _Optional[_Iterable[_Union[ProcessTree.Thread, _Mapping]]] = ...,
        collection_end_timestamp: _Optional[int] = ...,
    ) -> None: ...

class Atom(_message.Message):
    __slots__ = ()
    def __init__(self) -> None: ...

class StatsdAtom(_message.Message):
    __slots__ = ("atom", "timestamp_nanos")
    ATOM_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_NANOS_FIELD_NUMBER: _ClassVar[int]
    atom: _containers.RepeatedCompositeFieldContainer[Atom]
    timestamp_nanos: _containers.RepeatedScalarFieldContainer[int]
    def __init__(
        self, atom: _Optional[_Iterable[_Union[Atom, _Mapping]]] = ..., timestamp_nanos: _Optional[_Iterable[int]] = ...
    ) -> None: ...

class SysStats(_message.Message):
    __slots__ = (
        "meminfo",
        "vmstat",
        "cpu_stat",
        "num_forks",
        "num_irq_total",
        "num_irq",
        "num_softirq_total",
        "num_softirq",
        "collection_end_timestamp",
        "devfreq",
        "cpufreq_khz",
        "buddy_info",
        "disk_stat",
        "psi",
    )

    class MeminfoValue(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: MeminfoCounters
        value: int
        def __init__(self, key: _Optional[_Union[MeminfoCounters, str]] = ..., value: _Optional[int] = ...) -> None: ...

    class VmstatValue(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: VmstatCounters
        value: int
        def __init__(self, key: _Optional[_Union[VmstatCounters, str]] = ..., value: _Optional[int] = ...) -> None: ...

    class CpuTimes(_message.Message):
        __slots__ = (
            "cpu_id",
            "user_ns",
            "user_nice_ns",
            "system_mode_ns",
            "idle_ns",
            "io_wait_ns",
            "irq_ns",
            "softirq_ns",
        )
        CPU_ID_FIELD_NUMBER: _ClassVar[int]
        USER_NS_FIELD_NUMBER: _ClassVar[int]
        USER_NICE_NS_FIELD_NUMBER: _ClassVar[int]
        SYSTEM_MODE_NS_FIELD_NUMBER: _ClassVar[int]
        IDLE_NS_FIELD_NUMBER: _ClassVar[int]
        IO_WAIT_NS_FIELD_NUMBER: _ClassVar[int]
        IRQ_NS_FIELD_NUMBER: _ClassVar[int]
        SOFTIRQ_NS_FIELD_NUMBER: _ClassVar[int]
        cpu_id: int
        user_ns: int
        user_nice_ns: int
        system_mode_ns: int
        idle_ns: int
        io_wait_ns: int
        irq_ns: int
        softirq_ns: int
        def __init__(
            self,
            cpu_id: _Optional[int] = ...,
            user_ns: _Optional[int] = ...,
            user_nice_ns: _Optional[int] = ...,
            system_mode_ns: _Optional[int] = ...,
            idle_ns: _Optional[int] = ...,
            io_wait_ns: _Optional[int] = ...,
            irq_ns: _Optional[int] = ...,
            softirq_ns: _Optional[int] = ...,
        ) -> None: ...

    class InterruptCount(_message.Message):
        __slots__ = ("irq", "count")
        IRQ_FIELD_NUMBER: _ClassVar[int]
        COUNT_FIELD_NUMBER: _ClassVar[int]
        irq: int
        count: int
        def __init__(self, irq: _Optional[int] = ..., count: _Optional[int] = ...) -> None: ...

    class DevfreqValue(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: str
        value: int
        def __init__(self, key: _Optional[str] = ..., value: _Optional[int] = ...) -> None: ...

    class BuddyInfo(_message.Message):
        __slots__ = ("node", "zone", "order_pages")
        NODE_FIELD_NUMBER: _ClassVar[int]
        ZONE_FIELD_NUMBER: _ClassVar[int]
        ORDER_PAGES_FIELD_NUMBER: _ClassVar[int]
        node: str
        zone: str
        order_pages: _containers.RepeatedScalarFieldContainer[int]
        def __init__(
            self, node: _Optional[str] = ..., zone: _Optional[str] = ..., order_pages: _Optional[_Iterable[int]] = ...
        ) -> None: ...

    class DiskStat(_message.Message):
        __slots__ = (
            "device_name",
            "read_sectors",
            "read_time_ms",
            "write_sectors",
            "write_time_ms",
            "discard_sectors",
            "discard_time_ms",
            "flush_count",
            "flush_time_ms",
        )
        DEVICE_NAME_FIELD_NUMBER: _ClassVar[int]
        READ_SECTORS_FIELD_NUMBER: _ClassVar[int]
        READ_TIME_MS_FIELD_NUMBER: _ClassVar[int]
        WRITE_SECTORS_FIELD_NUMBER: _ClassVar[int]
        WRITE_TIME_MS_FIELD_NUMBER: _ClassVar[int]
        DISCARD_SECTORS_FIELD_NUMBER: _ClassVar[int]
        DISCARD_TIME_MS_FIELD_NUMBER: _ClassVar[int]
        FLUSH_COUNT_FIELD_NUMBER: _ClassVar[int]
        FLUSH_TIME_MS_FIELD_NUMBER: _ClassVar[int]
        device_name: str
        read_sectors: int
        read_time_ms: int
        write_sectors: int
        write_time_ms: int
        discard_sectors: int
        discard_time_ms: int
        flush_count: int
        flush_time_ms: int
        def __init__(
            self,
            device_name: _Optional[str] = ...,
            read_sectors: _Optional[int] = ...,
            read_time_ms: _Optional[int] = ...,
            write_sectors: _Optional[int] = ...,
            write_time_ms: _Optional[int] = ...,
            discard_sectors: _Optional[int] = ...,
            discard_time_ms: _Optional[int] = ...,
            flush_count: _Optional[int] = ...,
            flush_time_ms: _Optional[int] = ...,
        ) -> None: ...

    class PsiSample(_message.Message):
        __slots__ = ("resource", "total_ns")

        class PsiResource(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
            __slots__ = ()
            PSI_RESOURCE_UNSPECIFIED: _ClassVar[SysStats.PsiSample.PsiResource]
            PSI_RESOURCE_CPU_SOME: _ClassVar[SysStats.PsiSample.PsiResource]
            PSI_RESOURCE_CPU_FULL: _ClassVar[SysStats.PsiSample.PsiResource]
            PSI_RESOURCE_IO_SOME: _ClassVar[SysStats.PsiSample.PsiResource]
            PSI_RESOURCE_IO_FULL: _ClassVar[SysStats.PsiSample.PsiResource]
            PSI_RESOURCE_MEMORY_SOME: _ClassVar[SysStats.PsiSample.PsiResource]
            PSI_RESOURCE_MEMORY_FULL: _ClassVar[SysStats.PsiSample.PsiResource]

        PSI_RESOURCE_UNSPECIFIED: SysStats.PsiSample.PsiResource
        PSI_RESOURCE_CPU_SOME: SysStats.PsiSample.PsiResource
        PSI_RESOURCE_CPU_FULL: SysStats.PsiSample.PsiResource
        PSI_RESOURCE_IO_SOME: SysStats.PsiSample.PsiResource
        PSI_RESOURCE_IO_FULL: SysStats.PsiSample.PsiResource
        PSI_RESOURCE_MEMORY_SOME: SysStats.PsiSample.PsiResource
        PSI_RESOURCE_MEMORY_FULL: SysStats.PsiSample.PsiResource
        RESOURCE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_NS_FIELD_NUMBER: _ClassVar[int]
        resource: SysStats.PsiSample.PsiResource
        total_ns: int
        def __init__(
            self, resource: _Optional[_Union[SysStats.PsiSample.PsiResource, str]] = ..., total_ns: _Optional[int] = ...
        ) -> None: ...

    MEMINFO_FIELD_NUMBER: _ClassVar[int]
    VMSTAT_FIELD_NUMBER: _ClassVar[int]
    CPU_STAT_FIELD_NUMBER: _ClassVar[int]
    NUM_FORKS_FIELD_NUMBER: _ClassVar[int]
    NUM_IRQ_TOTAL_FIELD_NUMBER: _ClassVar[int]
    NUM_IRQ_FIELD_NUMBER: _ClassVar[int]
    NUM_SOFTIRQ_TOTAL_FIELD_NUMBER: _ClassVar[int]
    NUM_SOFTIRQ_FIELD_NUMBER: _ClassVar[int]
    COLLECTION_END_TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    DEVFREQ_FIELD_NUMBER: _ClassVar[int]
    CPUFREQ_KHZ_FIELD_NUMBER: _ClassVar[int]
    BUDDY_INFO_FIELD_NUMBER: _ClassVar[int]
    DISK_STAT_FIELD_NUMBER: _ClassVar[int]
    PSI_FIELD_NUMBER: _ClassVar[int]
    meminfo: _containers.RepeatedCompositeFieldContainer[SysStats.MeminfoValue]
    vmstat: _containers.RepeatedCompositeFieldContainer[SysStats.VmstatValue]
    cpu_stat: _containers.RepeatedCompositeFieldContainer[SysStats.CpuTimes]
    num_forks: int
    num_irq_total: int
    num_irq: _containers.RepeatedCompositeFieldContainer[SysStats.InterruptCount]
    num_softirq_total: int
    num_softirq: _containers.RepeatedCompositeFieldContainer[SysStats.InterruptCount]
    collection_end_timestamp: int
    devfreq: _containers.RepeatedCompositeFieldContainer[SysStats.DevfreqValue]
    cpufreq_khz: _containers.RepeatedScalarFieldContainer[int]
    buddy_info: _containers.RepeatedCompositeFieldContainer[SysStats.BuddyInfo]
    disk_stat: _containers.RepeatedCompositeFieldContainer[SysStats.DiskStat]
    psi: _containers.RepeatedCompositeFieldContainer[SysStats.PsiSample]
    def __init__(
        self,
        meminfo: _Optional[_Iterable[_Union[SysStats.MeminfoValue, _Mapping]]] = ...,
        vmstat: _Optional[_Iterable[_Union[SysStats.VmstatValue, _Mapping]]] = ...,
        cpu_stat: _Optional[_Iterable[_Union[SysStats.CpuTimes, _Mapping]]] = ...,
        num_forks: _Optional[int] = ...,
        num_irq_total: _Optional[int] = ...,
        num_irq: _Optional[_Iterable[_Union[SysStats.InterruptCount, _Mapping]]] = ...,
        num_softirq_total: _Optional[int] = ...,
        num_softirq: _Optional[_Iterable[_Union[SysStats.InterruptCount, _Mapping]]] = ...,
        collection_end_timestamp: _Optional[int] = ...,
        devfreq: _Optional[_Iterable[_Union[SysStats.DevfreqValue, _Mapping]]] = ...,
        cpufreq_khz: _Optional[_Iterable[int]] = ...,
        buddy_info: _Optional[_Iterable[_Union[SysStats.BuddyInfo, _Mapping]]] = ...,
        disk_stat: _Optional[_Iterable[_Union[SysStats.DiskStat, _Mapping]]] = ...,
        psi: _Optional[_Iterable[_Union[SysStats.PsiSample, _Mapping]]] = ...,
    ) -> None: ...

class Utsname(_message.Message):
    __slots__ = ("sysname", "version", "release", "machine")
    SYSNAME_FIELD_NUMBER: _ClassVar[int]
    VERSION_FIELD_NUMBER: _ClassVar[int]
    RELEASE_FIELD_NUMBER: _ClassVar[int]
    MACHINE_FIELD_NUMBER: _ClassVar[int]
    sysname: str
    version: str
    release: str
    machine: str
    def __init__(
        self,
        sysname: _Optional[str] = ...,
        version: _Optional[str] = ...,
        release: _Optional[str] = ...,
        machine: _Optional[str] = ...,
    ) -> None: ...

class SystemInfo(_message.Message):
    __slots__ = (
        "utsname",
        "android_build_fingerprint",
        "hz",
        "tracing_service_version",
        "android_sdk_version",
        "page_size",
        "timezone_off_mins",
    )
    UTSNAME_FIELD_NUMBER: _ClassVar[int]
    ANDROID_BUILD_FINGERPRINT_FIELD_NUMBER: _ClassVar[int]
    HZ_FIELD_NUMBER: _ClassVar[int]
    TRACING_SERVICE_VERSION_FIELD_NUMBER: _ClassVar[int]
    ANDROID_SDK_VERSION_FIELD_NUMBER: _ClassVar[int]
    PAGE_SIZE_FIELD_NUMBER: _ClassVar[int]
    TIMEZONE_OFF_MINS_FIELD_NUMBER: _ClassVar[int]
    utsname: Utsname
    android_build_fingerprint: str
    hz: int
    tracing_service_version: str
    android_sdk_version: int
    page_size: int
    timezone_off_mins: int
    def __init__(
        self,
        utsname: _Optional[_Union[Utsname, _Mapping]] = ...,
        android_build_fingerprint: _Optional[str] = ...,
        hz: _Optional[int] = ...,
        tracing_service_version: _Optional[str] = ...,
        android_sdk_version: _Optional[int] = ...,
        page_size: _Optional[int] = ...,
        timezone_off_mins: _Optional[int] = ...,
    ) -> None: ...

class CpuInfo(_message.Message):
    __slots__ = ("cpus",)

    class Cpu(_message.Message):
        __slots__ = ("processor", "frequencies")
        PROCESSOR_FIELD_NUMBER: _ClassVar[int]
        FREQUENCIES_FIELD_NUMBER: _ClassVar[int]
        processor: str
        frequencies: _containers.RepeatedScalarFieldContainer[int]
        def __init__(self, processor: _Optional[str] = ..., frequencies: _Optional[_Iterable[int]] = ...) -> None: ...

    CPUS_FIELD_NUMBER: _ClassVar[int]
    cpus: _containers.RepeatedCompositeFieldContainer[CpuInfo.Cpu]
    def __init__(self, cpus: _Optional[_Iterable[_Union[CpuInfo.Cpu, _Mapping]]] = ...) -> None: ...

class TestEvent(_message.Message):
    __slots__ = ("str", "seq_value", "counter", "is_last", "payload")

    class TestPayload(_message.Message):
        __slots__ = (
            "str",
            "nested",
            "single_string",
            "single_int",
            "repeated_ints",
            "remaining_nesting_depth",
            "debug_annotations",
        )
        STR_FIELD_NUMBER: _ClassVar[int]
        NESTED_FIELD_NUMBER: _ClassVar[int]
        SINGLE_STRING_FIELD_NUMBER: _ClassVar[int]
        SINGLE_INT_FIELD_NUMBER: _ClassVar[int]
        REPEATED_INTS_FIELD_NUMBER: _ClassVar[int]
        REMAINING_NESTING_DEPTH_FIELD_NUMBER: _ClassVar[int]
        DEBUG_ANNOTATIONS_FIELD_NUMBER: _ClassVar[int]
        str: _containers.RepeatedScalarFieldContainer[str]
        nested: _containers.RepeatedCompositeFieldContainer[TestEvent.TestPayload]
        single_string: str
        single_int: int
        repeated_ints: _containers.RepeatedScalarFieldContainer[int]
        remaining_nesting_depth: int
        debug_annotations: _containers.RepeatedCompositeFieldContainer[DebugAnnotation]
        def __init__(
            self,
            str: _Optional[_Iterable[str]] = ...,
            nested: _Optional[_Iterable[_Union[TestEvent.TestPayload, _Mapping]]] = ...,
            single_string: _Optional[str] = ...,
            single_int: _Optional[int] = ...,
            repeated_ints: _Optional[_Iterable[int]] = ...,
            remaining_nesting_depth: _Optional[int] = ...,
            debug_annotations: _Optional[_Iterable[_Union[DebugAnnotation, _Mapping]]] = ...,
        ) -> None: ...

    STR_FIELD_NUMBER: _ClassVar[int]
    SEQ_VALUE_FIELD_NUMBER: _ClassVar[int]
    COUNTER_FIELD_NUMBER: _ClassVar[int]
    IS_LAST_FIELD_NUMBER: _ClassVar[int]
    PAYLOAD_FIELD_NUMBER: _ClassVar[int]
    str: str
    seq_value: int
    counter: int
    is_last: bool
    payload: TestEvent.TestPayload
    def __init__(
        self,
        str: _Optional[str] = ...,
        seq_value: _Optional[int] = ...,
        counter: _Optional[int] = ...,
        is_last: bool = ...,
        payload: _Optional[_Union[TestEvent.TestPayload, _Mapping]] = ...,
    ) -> None: ...

class TracePacketDefaults(_message.Message):
    __slots__ = ("timestamp_clock_id", "track_event_defaults", "perf_sample_defaults", "v8_code_defaults")
    TIMESTAMP_CLOCK_ID_FIELD_NUMBER: _ClassVar[int]
    TRACK_EVENT_DEFAULTS_FIELD_NUMBER: _ClassVar[int]
    PERF_SAMPLE_DEFAULTS_FIELD_NUMBER: _ClassVar[int]
    V8_CODE_DEFAULTS_FIELD_NUMBER: _ClassVar[int]
    timestamp_clock_id: int
    track_event_defaults: TrackEventDefaults
    perf_sample_defaults: PerfSampleDefaults
    v8_code_defaults: V8CodeDefaults
    def __init__(
        self,
        timestamp_clock_id: _Optional[int] = ...,
        track_event_defaults: _Optional[_Union[TrackEventDefaults, _Mapping]] = ...,
        perf_sample_defaults: _Optional[_Union[PerfSampleDefaults, _Mapping]] = ...,
        v8_code_defaults: _Optional[_Union[V8CodeDefaults, _Mapping]] = ...,
    ) -> None: ...

class TraceUuid(_message.Message):
    __slots__ = ("msb", "lsb")
    MSB_FIELD_NUMBER: _ClassVar[int]
    LSB_FIELD_NUMBER: _ClassVar[int]
    msb: int
    lsb: int
    def __init__(self, msb: _Optional[int] = ..., lsb: _Optional[int] = ...) -> None: ...

class ProcessDescriptor(_message.Message):
    __slots__ = (
        "pid",
        "cmdline",
        "process_name",
        "process_priority",
        "start_timestamp_ns",
        "chrome_process_type",
        "legacy_sort_index",
        "process_labels",
    )

    class ChromeProcessType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        PROCESS_UNSPECIFIED: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_BROWSER: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_RENDERER: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_UTILITY: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_ZYGOTE: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_SANDBOX_HELPER: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_GPU: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_PPAPI_PLUGIN: _ClassVar[ProcessDescriptor.ChromeProcessType]
        PROCESS_PPAPI_BROKER: _ClassVar[ProcessDescriptor.ChromeProcessType]

    PROCESS_UNSPECIFIED: ProcessDescriptor.ChromeProcessType
    PROCESS_BROWSER: ProcessDescriptor.ChromeProcessType
    PROCESS_RENDERER: ProcessDescriptor.ChromeProcessType
    PROCESS_UTILITY: ProcessDescriptor.ChromeProcessType
    PROCESS_ZYGOTE: ProcessDescriptor.ChromeProcessType
    PROCESS_SANDBOX_HELPER: ProcessDescriptor.ChromeProcessType
    PROCESS_GPU: ProcessDescriptor.ChromeProcessType
    PROCESS_PPAPI_PLUGIN: ProcessDescriptor.ChromeProcessType
    PROCESS_PPAPI_BROKER: ProcessDescriptor.ChromeProcessType
    PID_FIELD_NUMBER: _ClassVar[int]
    CMDLINE_FIELD_NUMBER: _ClassVar[int]
    PROCESS_NAME_FIELD_NUMBER: _ClassVar[int]
    PROCESS_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    START_TIMESTAMP_NS_FIELD_NUMBER: _ClassVar[int]
    CHROME_PROCESS_TYPE_FIELD_NUMBER: _ClassVar[int]
    LEGACY_SORT_INDEX_FIELD_NUMBER: _ClassVar[int]
    PROCESS_LABELS_FIELD_NUMBER: _ClassVar[int]
    pid: int
    cmdline: _containers.RepeatedScalarFieldContainer[str]
    process_name: str
    process_priority: int
    start_timestamp_ns: int
    chrome_process_type: ProcessDescriptor.ChromeProcessType
    legacy_sort_index: int
    process_labels: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        pid: _Optional[int] = ...,
        cmdline: _Optional[_Iterable[str]] = ...,
        process_name: _Optional[str] = ...,
        process_priority: _Optional[int] = ...,
        start_timestamp_ns: _Optional[int] = ...,
        chrome_process_type: _Optional[_Union[ProcessDescriptor.ChromeProcessType, str]] = ...,
        legacy_sort_index: _Optional[int] = ...,
        process_labels: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class TrackEventRangeOfInterest(_message.Message):
    __slots__ = ("start_us",)
    START_US_FIELD_NUMBER: _ClassVar[int]
    start_us: int
    def __init__(self, start_us: _Optional[int] = ...) -> None: ...

class ThreadDescriptor(_message.Message):
    __slots__ = (
        "pid",
        "tid",
        "thread_name",
        "chrome_thread_type",
        "reference_timestamp_us",
        "reference_thread_time_us",
        "reference_thread_instruction_count",
        "legacy_sort_index",
    )

    class ChromeThreadType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        CHROME_THREAD_UNSPECIFIED: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_MAIN: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_IO: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_POOL_BG_WORKER: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_POOL_FG_WORKER: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_POOL_FB_BLOCKING: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_POOL_BG_BLOCKING: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_POOL_SERVICE: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_COMPOSITOR: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_VIZ_COMPOSITOR: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_COMPOSITOR_WORKER: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_SERVICE_WORKER: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_MEMORY_INFRA: _ClassVar[ThreadDescriptor.ChromeThreadType]
        CHROME_THREAD_SAMPLING_PROFILER: _ClassVar[ThreadDescriptor.ChromeThreadType]

    CHROME_THREAD_UNSPECIFIED: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_MAIN: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_IO: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_POOL_BG_WORKER: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_POOL_FG_WORKER: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_POOL_FB_BLOCKING: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_POOL_BG_BLOCKING: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_POOL_SERVICE: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_COMPOSITOR: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_VIZ_COMPOSITOR: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_COMPOSITOR_WORKER: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_SERVICE_WORKER: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_MEMORY_INFRA: ThreadDescriptor.ChromeThreadType
    CHROME_THREAD_SAMPLING_PROFILER: ThreadDescriptor.ChromeThreadType
    PID_FIELD_NUMBER: _ClassVar[int]
    TID_FIELD_NUMBER: _ClassVar[int]
    THREAD_NAME_FIELD_NUMBER: _ClassVar[int]
    CHROME_THREAD_TYPE_FIELD_NUMBER: _ClassVar[int]
    REFERENCE_TIMESTAMP_US_FIELD_NUMBER: _ClassVar[int]
    REFERENCE_THREAD_TIME_US_FIELD_NUMBER: _ClassVar[int]
    REFERENCE_THREAD_INSTRUCTION_COUNT_FIELD_NUMBER: _ClassVar[int]
    LEGACY_SORT_INDEX_FIELD_NUMBER: _ClassVar[int]
    pid: int
    tid: int
    thread_name: str
    chrome_thread_type: ThreadDescriptor.ChromeThreadType
    reference_timestamp_us: int
    reference_thread_time_us: int
    reference_thread_instruction_count: int
    legacy_sort_index: int
    def __init__(
        self,
        pid: _Optional[int] = ...,
        tid: _Optional[int] = ...,
        thread_name: _Optional[str] = ...,
        chrome_thread_type: _Optional[_Union[ThreadDescriptor.ChromeThreadType, str]] = ...,
        reference_timestamp_us: _Optional[int] = ...,
        reference_thread_time_us: _Optional[int] = ...,
        reference_thread_instruction_count: _Optional[int] = ...,
        legacy_sort_index: _Optional[int] = ...,
    ) -> None: ...

class ChromeProcessDescriptor(_message.Message):
    __slots__ = ("process_type", "process_priority", "legacy_sort_index", "host_app_package_name", "crash_trace_id")

    class ProcessType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        PROCESS_UNSPECIFIED: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_BROWSER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_RENDERER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_UTILITY: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_ZYGOTE: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SANDBOX_HELPER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_GPU: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_PPAPI_PLUGIN: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_PPAPI_BROKER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_NETWORK: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_TRACING: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_STORAGE: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_AUDIO: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_DATA_DECODER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_UTIL_WIN: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_PROXY_RESOLVER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_CDM: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_VIDEO_CAPTURE: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_UNZIPPER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_MIRRORING: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_FILEPATCHER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_TTS: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_PRINTING: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_QUARANTINE: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_CROS_LOCALSEARCH: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_FILEUTIL: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_PRINTCOMPOSITOR: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_PAINTPREVIEW: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_SPEECHRECOGNITION: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_XRDEVICE: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_READICON: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_LANGUAGEDETECTION: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_SHARING: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_MEDIAPARSER: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_QRCODEGENERATOR: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_PROFILEIMPORT: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_IME: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_RECORDING: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_SHAPEDETECTION: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_RENDERER_EXTENSION: _ClassVar[ChromeProcessDescriptor.ProcessType]
        PROCESS_SERVICE_MEDIA_FOUNDATION: _ClassVar[ChromeProcessDescriptor.ProcessType]

    PROCESS_UNSPECIFIED: ChromeProcessDescriptor.ProcessType
    PROCESS_BROWSER: ChromeProcessDescriptor.ProcessType
    PROCESS_RENDERER: ChromeProcessDescriptor.ProcessType
    PROCESS_UTILITY: ChromeProcessDescriptor.ProcessType
    PROCESS_ZYGOTE: ChromeProcessDescriptor.ProcessType
    PROCESS_SANDBOX_HELPER: ChromeProcessDescriptor.ProcessType
    PROCESS_GPU: ChromeProcessDescriptor.ProcessType
    PROCESS_PPAPI_PLUGIN: ChromeProcessDescriptor.ProcessType
    PROCESS_PPAPI_BROKER: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_NETWORK: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_TRACING: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_STORAGE: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_AUDIO: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_DATA_DECODER: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_UTIL_WIN: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_PROXY_RESOLVER: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_CDM: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_VIDEO_CAPTURE: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_UNZIPPER: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_MIRRORING: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_FILEPATCHER: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_TTS: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_PRINTING: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_QUARANTINE: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_CROS_LOCALSEARCH: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_FILEUTIL: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_PRINTCOMPOSITOR: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_PAINTPREVIEW: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_SPEECHRECOGNITION: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_XRDEVICE: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_READICON: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_LANGUAGEDETECTION: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_SHARING: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_MEDIAPARSER: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_QRCODEGENERATOR: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_PROFILEIMPORT: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_IME: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_RECORDING: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_SHAPEDETECTION: ChromeProcessDescriptor.ProcessType
    PROCESS_RENDERER_EXTENSION: ChromeProcessDescriptor.ProcessType
    PROCESS_SERVICE_MEDIA_FOUNDATION: ChromeProcessDescriptor.ProcessType
    PROCESS_TYPE_FIELD_NUMBER: _ClassVar[int]
    PROCESS_PRIORITY_FIELD_NUMBER: _ClassVar[int]
    LEGACY_SORT_INDEX_FIELD_NUMBER: _ClassVar[int]
    HOST_APP_PACKAGE_NAME_FIELD_NUMBER: _ClassVar[int]
    CRASH_TRACE_ID_FIELD_NUMBER: _ClassVar[int]
    process_type: ChromeProcessDescriptor.ProcessType
    process_priority: int
    legacy_sort_index: int
    host_app_package_name: str
    crash_trace_id: int
    def __init__(
        self,
        process_type: _Optional[_Union[ChromeProcessDescriptor.ProcessType, str]] = ...,
        process_priority: _Optional[int] = ...,
        legacy_sort_index: _Optional[int] = ...,
        host_app_package_name: _Optional[str] = ...,
        crash_trace_id: _Optional[int] = ...,
    ) -> None: ...

class ChromeThreadDescriptor(_message.Message):
    __slots__ = ("thread_type", "legacy_sort_index")

    class ThreadType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        THREAD_UNSPECIFIED: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_MAIN: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_IO: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_POOL_BG_WORKER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_POOL_FG_WORKER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_POOL_FG_BLOCKING: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_POOL_BG_BLOCKING: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_POOL_SERVICE: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_COMPOSITOR: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_VIZ_COMPOSITOR: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_COMPOSITOR_WORKER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_SERVICE_WORKER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_NETWORK_SERVICE: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_CHILD_IO: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_BROWSER_IO: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_BROWSER_MAIN: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_RENDERER_MAIN: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_UTILITY_MAIN: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_GPU_MAIN: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_CACHE_BLOCKFILE: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_MEDIA: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_AUDIO_OUTPUTDEVICE: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_AUDIO_INPUTDEVICE: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_GPU_MEMORY: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_GPU_VSYNC: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_DXA_VIDEODECODER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_BROWSER_WATCHDOG: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_WEBRTC_NETWORK: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_WINDOW_OWNER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_WEBRTC_SIGNALING: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_WEBRTC_WORKER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_PPAPI_MAIN: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_GPU_WATCHDOG: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_SWAPPER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_GAMEPAD_POLLING: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_WEBCRYPTO: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_DATABASE: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_PROXYRESOLVER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_DEVTOOLSADB: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_NETWORKCONFIGWATCHER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_WASAPI_RENDER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_LOADER_LOCK_SAMPLER: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_MEMORY_INFRA: _ClassVar[ChromeThreadDescriptor.ThreadType]
        THREAD_SAMPLING_PROFILER: _ClassVar[ChromeThreadDescriptor.ThreadType]

    THREAD_UNSPECIFIED: ChromeThreadDescriptor.ThreadType
    THREAD_MAIN: ChromeThreadDescriptor.ThreadType
    THREAD_IO: ChromeThreadDescriptor.ThreadType
    THREAD_POOL_BG_WORKER: ChromeThreadDescriptor.ThreadType
    THREAD_POOL_FG_WORKER: ChromeThreadDescriptor.ThreadType
    THREAD_POOL_FG_BLOCKING: ChromeThreadDescriptor.ThreadType
    THREAD_POOL_BG_BLOCKING: ChromeThreadDescriptor.ThreadType
    THREAD_POOL_SERVICE: ChromeThreadDescriptor.ThreadType
    THREAD_COMPOSITOR: ChromeThreadDescriptor.ThreadType
    THREAD_VIZ_COMPOSITOR: ChromeThreadDescriptor.ThreadType
    THREAD_COMPOSITOR_WORKER: ChromeThreadDescriptor.ThreadType
    THREAD_SERVICE_WORKER: ChromeThreadDescriptor.ThreadType
    THREAD_NETWORK_SERVICE: ChromeThreadDescriptor.ThreadType
    THREAD_CHILD_IO: ChromeThreadDescriptor.ThreadType
    THREAD_BROWSER_IO: ChromeThreadDescriptor.ThreadType
    THREAD_BROWSER_MAIN: ChromeThreadDescriptor.ThreadType
    THREAD_RENDERER_MAIN: ChromeThreadDescriptor.ThreadType
    THREAD_UTILITY_MAIN: ChromeThreadDescriptor.ThreadType
    THREAD_GPU_MAIN: ChromeThreadDescriptor.ThreadType
    THREAD_CACHE_BLOCKFILE: ChromeThreadDescriptor.ThreadType
    THREAD_MEDIA: ChromeThreadDescriptor.ThreadType
    THREAD_AUDIO_OUTPUTDEVICE: ChromeThreadDescriptor.ThreadType
    THREAD_AUDIO_INPUTDEVICE: ChromeThreadDescriptor.ThreadType
    THREAD_GPU_MEMORY: ChromeThreadDescriptor.ThreadType
    THREAD_GPU_VSYNC: ChromeThreadDescriptor.ThreadType
    THREAD_DXA_VIDEODECODER: ChromeThreadDescriptor.ThreadType
    THREAD_BROWSER_WATCHDOG: ChromeThreadDescriptor.ThreadType
    THREAD_WEBRTC_NETWORK: ChromeThreadDescriptor.ThreadType
    THREAD_WINDOW_OWNER: ChromeThreadDescriptor.ThreadType
    THREAD_WEBRTC_SIGNALING: ChromeThreadDescriptor.ThreadType
    THREAD_WEBRTC_WORKER: ChromeThreadDescriptor.ThreadType
    THREAD_PPAPI_MAIN: ChromeThreadDescriptor.ThreadType
    THREAD_GPU_WATCHDOG: ChromeThreadDescriptor.ThreadType
    THREAD_SWAPPER: ChromeThreadDescriptor.ThreadType
    THREAD_GAMEPAD_POLLING: ChromeThreadDescriptor.ThreadType
    THREAD_WEBCRYPTO: ChromeThreadDescriptor.ThreadType
    THREAD_DATABASE: ChromeThreadDescriptor.ThreadType
    THREAD_PROXYRESOLVER: ChromeThreadDescriptor.ThreadType
    THREAD_DEVTOOLSADB: ChromeThreadDescriptor.ThreadType
    THREAD_NETWORKCONFIGWATCHER: ChromeThreadDescriptor.ThreadType
    THREAD_WASAPI_RENDER: ChromeThreadDescriptor.ThreadType
    THREAD_LOADER_LOCK_SAMPLER: ChromeThreadDescriptor.ThreadType
    THREAD_MEMORY_INFRA: ChromeThreadDescriptor.ThreadType
    THREAD_SAMPLING_PROFILER: ChromeThreadDescriptor.ThreadType
    THREAD_TYPE_FIELD_NUMBER: _ClassVar[int]
    LEGACY_SORT_INDEX_FIELD_NUMBER: _ClassVar[int]
    thread_type: ChromeThreadDescriptor.ThreadType
    legacy_sort_index: int
    def __init__(
        self,
        thread_type: _Optional[_Union[ChromeThreadDescriptor.ThreadType, str]] = ...,
        legacy_sort_index: _Optional[int] = ...,
    ) -> None: ...

class CounterDescriptor(_message.Message):
    __slots__ = ("type", "categories", "unit", "unit_name", "unit_multiplier", "is_incremental")

    class BuiltinCounterType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        COUNTER_UNSPECIFIED: _ClassVar[CounterDescriptor.BuiltinCounterType]
        COUNTER_THREAD_TIME_NS: _ClassVar[CounterDescriptor.BuiltinCounterType]
        COUNTER_THREAD_INSTRUCTION_COUNT: _ClassVar[CounterDescriptor.BuiltinCounterType]

    COUNTER_UNSPECIFIED: CounterDescriptor.BuiltinCounterType
    COUNTER_THREAD_TIME_NS: CounterDescriptor.BuiltinCounterType
    COUNTER_THREAD_INSTRUCTION_COUNT: CounterDescriptor.BuiltinCounterType

    class Unit(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        UNIT_UNSPECIFIED: _ClassVar[CounterDescriptor.Unit]
        UNIT_TIME_NS: _ClassVar[CounterDescriptor.Unit]
        UNIT_COUNT: _ClassVar[CounterDescriptor.Unit]
        UNIT_SIZE_BYTES: _ClassVar[CounterDescriptor.Unit]

    UNIT_UNSPECIFIED: CounterDescriptor.Unit
    UNIT_TIME_NS: CounterDescriptor.Unit
    UNIT_COUNT: CounterDescriptor.Unit
    UNIT_SIZE_BYTES: CounterDescriptor.Unit
    TYPE_FIELD_NUMBER: _ClassVar[int]
    CATEGORIES_FIELD_NUMBER: _ClassVar[int]
    UNIT_FIELD_NUMBER: _ClassVar[int]
    UNIT_NAME_FIELD_NUMBER: _ClassVar[int]
    UNIT_MULTIPLIER_FIELD_NUMBER: _ClassVar[int]
    IS_INCREMENTAL_FIELD_NUMBER: _ClassVar[int]
    type: CounterDescriptor.BuiltinCounterType
    categories: _containers.RepeatedScalarFieldContainer[str]
    unit: CounterDescriptor.Unit
    unit_name: str
    unit_multiplier: int
    is_incremental: bool
    def __init__(
        self,
        type: _Optional[_Union[CounterDescriptor.BuiltinCounterType, str]] = ...,
        categories: _Optional[_Iterable[str]] = ...,
        unit: _Optional[_Union[CounterDescriptor.Unit, str]] = ...,
        unit_name: _Optional[str] = ...,
        unit_multiplier: _Optional[int] = ...,
        is_incremental: bool = ...,
    ) -> None: ...

class TrackDescriptor(_message.Message):
    __slots__ = (
        "uuid",
        "parent_uuid",
        "name",
        "process",
        "chrome_process",
        "thread",
        "chrome_thread",
        "counter",
        "disallow_merging_with_system_tracks",
    )
    UUID_FIELD_NUMBER: _ClassVar[int]
    PARENT_UUID_FIELD_NUMBER: _ClassVar[int]
    NAME_FIELD_NUMBER: _ClassVar[int]
    PROCESS_FIELD_NUMBER: _ClassVar[int]
    CHROME_PROCESS_FIELD_NUMBER: _ClassVar[int]
    THREAD_FIELD_NUMBER: _ClassVar[int]
    CHROME_THREAD_FIELD_NUMBER: _ClassVar[int]
    COUNTER_FIELD_NUMBER: _ClassVar[int]
    DISALLOW_MERGING_WITH_SYSTEM_TRACKS_FIELD_NUMBER: _ClassVar[int]
    uuid: int
    parent_uuid: int
    name: str
    process: ProcessDescriptor
    chrome_process: ChromeProcessDescriptor
    thread: ThreadDescriptor
    chrome_thread: ChromeThreadDescriptor
    counter: CounterDescriptor
    disallow_merging_with_system_tracks: bool
    def __init__(
        self,
        uuid: _Optional[int] = ...,
        parent_uuid: _Optional[int] = ...,
        name: _Optional[str] = ...,
        process: _Optional[_Union[ProcessDescriptor, _Mapping]] = ...,
        chrome_process: _Optional[_Union[ChromeProcessDescriptor, _Mapping]] = ...,
        thread: _Optional[_Union[ThreadDescriptor, _Mapping]] = ...,
        chrome_thread: _Optional[_Union[ChromeThreadDescriptor, _Mapping]] = ...,
        counter: _Optional[_Union[CounterDescriptor, _Mapping]] = ...,
        disallow_merging_with_system_tracks: bool = ...,
    ) -> None: ...

class TranslationTable(_message.Message):
    __slots__ = ("chrome_histogram", "chrome_user_event", "chrome_performance_mark", "slice_name")
    CHROME_HISTOGRAM_FIELD_NUMBER: _ClassVar[int]
    CHROME_USER_EVENT_FIELD_NUMBER: _ClassVar[int]
    CHROME_PERFORMANCE_MARK_FIELD_NUMBER: _ClassVar[int]
    SLICE_NAME_FIELD_NUMBER: _ClassVar[int]
    chrome_histogram: ChromeHistorgramTranslationTable
    chrome_user_event: ChromeUserEventTranslationTable
    chrome_performance_mark: ChromePerformanceMarkTranslationTable
    slice_name: SliceNameTranslationTable
    def __init__(
        self,
        chrome_histogram: _Optional[_Union[ChromeHistorgramTranslationTable, _Mapping]] = ...,
        chrome_user_event: _Optional[_Union[ChromeUserEventTranslationTable, _Mapping]] = ...,
        chrome_performance_mark: _Optional[_Union[ChromePerformanceMarkTranslationTable, _Mapping]] = ...,
        slice_name: _Optional[_Union[SliceNameTranslationTable, _Mapping]] = ...,
    ) -> None: ...

class ChromeHistorgramTranslationTable(_message.Message):
    __slots__ = ("hash_to_name",)

    class HashToNameEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: int
        value: str
        def __init__(self, key: _Optional[int] = ..., value: _Optional[str] = ...) -> None: ...

    HASH_TO_NAME_FIELD_NUMBER: _ClassVar[int]
    hash_to_name: _containers.ScalarMap[int, str]
    def __init__(self, hash_to_name: _Optional[_Mapping[int, str]] = ...) -> None: ...

class ChromeUserEventTranslationTable(_message.Message):
    __slots__ = ("action_hash_to_name",)

    class ActionHashToNameEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: int
        value: str
        def __init__(self, key: _Optional[int] = ..., value: _Optional[str] = ...) -> None: ...

    ACTION_HASH_TO_NAME_FIELD_NUMBER: _ClassVar[int]
    action_hash_to_name: _containers.ScalarMap[int, str]
    def __init__(self, action_hash_to_name: _Optional[_Mapping[int, str]] = ...) -> None: ...

class ChromePerformanceMarkTranslationTable(_message.Message):
    __slots__ = ("site_hash_to_name", "mark_hash_to_name")

    class SiteHashToNameEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: int
        value: str
        def __init__(self, key: _Optional[int] = ..., value: _Optional[str] = ...) -> None: ...

    class MarkHashToNameEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: int
        value: str
        def __init__(self, key: _Optional[int] = ..., value: _Optional[str] = ...) -> None: ...

    SITE_HASH_TO_NAME_FIELD_NUMBER: _ClassVar[int]
    MARK_HASH_TO_NAME_FIELD_NUMBER: _ClassVar[int]
    site_hash_to_name: _containers.ScalarMap[int, str]
    mark_hash_to_name: _containers.ScalarMap[int, str]
    def __init__(
        self,
        site_hash_to_name: _Optional[_Mapping[int, str]] = ...,
        mark_hash_to_name: _Optional[_Mapping[int, str]] = ...,
    ) -> None: ...

class SliceNameTranslationTable(_message.Message):
    __slots__ = ("raw_to_deobfuscated_name",)

    class RawToDeobfuscatedNameEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: str
        value: str
        def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...

    RAW_TO_DEOBFUSCATED_NAME_FIELD_NUMBER: _ClassVar[int]
    raw_to_deobfuscated_name: _containers.ScalarMap[str, str]
    def __init__(self, raw_to_deobfuscated_name: _Optional[_Mapping[str, str]] = ...) -> None: ...

class Trigger(_message.Message):
    __slots__ = ("trigger_name", "producer_name", "trusted_producer_uid")
    TRIGGER_NAME_FIELD_NUMBER: _ClassVar[int]
    PRODUCER_NAME_FIELD_NUMBER: _ClassVar[int]
    TRUSTED_PRODUCER_UID_FIELD_NUMBER: _ClassVar[int]
    trigger_name: str
    producer_name: str
    trusted_producer_uid: int
    def __init__(
        self,
        trigger_name: _Optional[str] = ...,
        producer_name: _Optional[str] = ...,
        trusted_producer_uid: _Optional[int] = ...,
    ) -> None: ...

class UiState(_message.Message):
    __slots__ = ("timeline_start_ts", "timeline_end_ts", "highlight_process")

    class HighlightProcess(_message.Message):
        __slots__ = ("pid", "cmdline")
        PID_FIELD_NUMBER: _ClassVar[int]
        CMDLINE_FIELD_NUMBER: _ClassVar[int]
        pid: int
        cmdline: str
        def __init__(self, pid: _Optional[int] = ..., cmdline: _Optional[str] = ...) -> None: ...

    TIMELINE_START_TS_FIELD_NUMBER: _ClassVar[int]
    TIMELINE_END_TS_FIELD_NUMBER: _ClassVar[int]
    HIGHLIGHT_PROCESS_FIELD_NUMBER: _ClassVar[int]
    timeline_start_ts: int
    timeline_end_ts: int
    highlight_process: UiState.HighlightProcess
    def __init__(
        self,
        timeline_start_ts: _Optional[int] = ...,
        timeline_end_ts: _Optional[int] = ...,
        highlight_process: _Optional[_Union[UiState.HighlightProcess, _Mapping]] = ...,
    ) -> None: ...

class TracePacket(_message.Message):
    __slots__ = (
        "timestamp",
        "timestamp_clock_id",
        "process_tree",
        "process_stats",
        "inode_file_map",
        "chrome_events",
        "clock_snapshot",
        "sys_stats",
        "track_event",
        "trace_uuid",
        "trace_config",
        "ftrace_stats",
        "trace_stats",
        "profile_packet",
        "streaming_allocation",
        "streaming_free",
        "battery",
        "power_rails",
        "android_log",
        "system_info",
        "trigger",
        "packages_list",
        "chrome_benchmark_metadata",
        "perfetto_metatrace",
        "chrome_metadata",
        "gpu_counter_event",
        "gpu_render_stage_event",
        "streaming_profile_packet",
        "heap_graph",
        "graphics_frame_event",
        "vulkan_memory_event",
        "gpu_log",
        "vulkan_api_event",
        "perf_sample",
        "cpu_info",
        "smaps_packet",
        "service_event",
        "initial_display_state",
        "gpu_mem_total_event",
        "memory_tracker_snapshot",
        "frame_timeline_event",
        "android_energy_estimation_breakdown",
        "ui_state",
        "android_camera_frame_event",
        "android_camera_session_stats",
        "translation_table",
        "android_game_intervention_list",
        "statsd_atom",
        "android_system_property",
        "entity_state_residency",
        "profiled_frame_symbols",
        "module_symbols",
        "deobfuscation_mapping",
        "track_descriptor",
        "process_descriptor",
        "thread_descriptor",
        "ftrace_events",
        "synchronization_marker",
        "compressed_packets",
        "extension_descriptor",
        "network_packet",
        "network_packet_bundle",
        "track_event_range_of_interest",
        "surfaceflinger_layers_snapshot",
        "surfaceflinger_transactions",
        "shell_transition",
        "shell_handler_mappings",
        "protolog_message",
        "protolog_viewer_config",
        "etw_events",
        "v8_js_code",
        "v8_internal_code",
        "v8_wasm_code",
        "v8_reg_exp_code",
        "v8_code_move",
        "android_input_event",
        "for_testing",
        "trusted_uid",
        "trusted_packet_sequence_id",
        "trusted_pid",
        "interned_data",
        "sequence_flags",
        "incremental_state_cleared",
        "trace_packet_defaults",
        "previous_packet_dropped",
        "first_packet_on_sequence",
        "machine_id",
    )

    class SequenceFlags(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = ()
        SEQ_UNSPECIFIED: _ClassVar[TracePacket.SequenceFlags]
        SEQ_INCREMENTAL_STATE_CLEARED: _ClassVar[TracePacket.SequenceFlags]
        SEQ_NEEDS_INCREMENTAL_STATE: _ClassVar[TracePacket.SequenceFlags]

    SEQ_UNSPECIFIED: TracePacket.SequenceFlags
    SEQ_INCREMENTAL_STATE_CLEARED: TracePacket.SequenceFlags
    SEQ_NEEDS_INCREMENTAL_STATE: TracePacket.SequenceFlags
    TIMESTAMP_FIELD_NUMBER: _ClassVar[int]
    TIMESTAMP_CLOCK_ID_FIELD_NUMBER: _ClassVar[int]
    PROCESS_TREE_FIELD_NUMBER: _ClassVar[int]
    PROCESS_STATS_FIELD_NUMBER: _ClassVar[int]
    INODE_FILE_MAP_FIELD_NUMBER: _ClassVar[int]
    CHROME_EVENTS_FIELD_NUMBER: _ClassVar[int]
    CLOCK_SNAPSHOT_FIELD_NUMBER: _ClassVar[int]
    SYS_STATS_FIELD_NUMBER: _ClassVar[int]
    TRACK_EVENT_FIELD_NUMBER: _ClassVar[int]
    TRACE_UUID_FIELD_NUMBER: _ClassVar[int]
    TRACE_CONFIG_FIELD_NUMBER: _ClassVar[int]
    FTRACE_STATS_FIELD_NUMBER: _ClassVar[int]
    TRACE_STATS_FIELD_NUMBER: _ClassVar[int]
    PROFILE_PACKET_FIELD_NUMBER: _ClassVar[int]
    STREAMING_ALLOCATION_FIELD_NUMBER: _ClassVar[int]
    STREAMING_FREE_FIELD_NUMBER: _ClassVar[int]
    BATTERY_FIELD_NUMBER: _ClassVar[int]
    POWER_RAILS_FIELD_NUMBER: _ClassVar[int]
    ANDROID_LOG_FIELD_NUMBER: _ClassVar[int]
    SYSTEM_INFO_FIELD_NUMBER: _ClassVar[int]
    TRIGGER_FIELD_NUMBER: _ClassVar[int]
    PACKAGES_LIST_FIELD_NUMBER: _ClassVar[int]
    CHROME_BENCHMARK_METADATA_FIELD_NUMBER: _ClassVar[int]
    PERFETTO_METATRACE_FIELD_NUMBER: _ClassVar[int]
    CHROME_METADATA_FIELD_NUMBER: _ClassVar[int]
    GPU_COUNTER_EVENT_FIELD_NUMBER: _ClassVar[int]
    GPU_RENDER_STAGE_EVENT_FIELD_NUMBER: _ClassVar[int]
    STREAMING_PROFILE_PACKET_FIELD_NUMBER: _ClassVar[int]
    HEAP_GRAPH_FIELD_NUMBER: _ClassVar[int]
    GRAPHICS_FRAME_EVENT_FIELD_NUMBER: _ClassVar[int]
    VULKAN_MEMORY_EVENT_FIELD_NUMBER: _ClassVar[int]
    GPU_LOG_FIELD_NUMBER: _ClassVar[int]
    VULKAN_API_EVENT_FIELD_NUMBER: _ClassVar[int]
    PERF_SAMPLE_FIELD_NUMBER: _ClassVar[int]
    CPU_INFO_FIELD_NUMBER: _ClassVar[int]
    SMAPS_PACKET_FIELD_NUMBER: _ClassVar[int]
    SERVICE_EVENT_FIELD_NUMBER: _ClassVar[int]
    INITIAL_DISPLAY_STATE_FIELD_NUMBER: _ClassVar[int]
    GPU_MEM_TOTAL_EVENT_FIELD_NUMBER: _ClassVar[int]
    MEMORY_TRACKER_SNAPSHOT_FIELD_NUMBER: _ClassVar[int]
    FRAME_TIMELINE_EVENT_FIELD_NUMBER: _ClassVar[int]
    ANDROID_ENERGY_ESTIMATION_BREAKDOWN_FIELD_NUMBER: _ClassVar[int]
    UI_STATE_FIELD_NUMBER: _ClassVar[int]
    ANDROID_CAMERA_FRAME_EVENT_FIELD_NUMBER: _ClassVar[int]
    ANDROID_CAMERA_SESSION_STATS_FIELD_NUMBER: _ClassVar[int]
    TRANSLATION_TABLE_FIELD_NUMBER: _ClassVar[int]
    ANDROID_GAME_INTERVENTION_LIST_FIELD_NUMBER: _ClassVar[int]
    STATSD_ATOM_FIELD_NUMBER: _ClassVar[int]
    ANDROID_SYSTEM_PROPERTY_FIELD_NUMBER: _ClassVar[int]
    ENTITY_STATE_RESIDENCY_FIELD_NUMBER: _ClassVar[int]
    PROFILED_FRAME_SYMBOLS_FIELD_NUMBER: _ClassVar[int]
    MODULE_SYMBOLS_FIELD_NUMBER: _ClassVar[int]
    DEOBFUSCATION_MAPPING_FIELD_NUMBER: _ClassVar[int]
    TRACK_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    PROCESS_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    THREAD_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    FTRACE_EVENTS_FIELD_NUMBER: _ClassVar[int]
    SYNCHRONIZATION_MARKER_FIELD_NUMBER: _ClassVar[int]
    COMPRESSED_PACKETS_FIELD_NUMBER: _ClassVar[int]
    EXTENSION_DESCRIPTOR_FIELD_NUMBER: _ClassVar[int]
    NETWORK_PACKET_FIELD_NUMBER: _ClassVar[int]
    NETWORK_PACKET_BUNDLE_FIELD_NUMBER: _ClassVar[int]
    TRACK_EVENT_RANGE_OF_INTEREST_FIELD_NUMBER: _ClassVar[int]
    SURFACEFLINGER_LAYERS_SNAPSHOT_FIELD_NUMBER: _ClassVar[int]
    SURFACEFLINGER_TRANSACTIONS_FIELD_NUMBER: _ClassVar[int]
    SHELL_TRANSITION_FIELD_NUMBER: _ClassVar[int]
    SHELL_HANDLER_MAPPINGS_FIELD_NUMBER: _ClassVar[int]
    PROTOLOG_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    PROTOLOG_VIEWER_CONFIG_FIELD_NUMBER: _ClassVar[int]
    ETW_EVENTS_FIELD_NUMBER: _ClassVar[int]
    V8_JS_CODE_FIELD_NUMBER: _ClassVar[int]
    V8_INTERNAL_CODE_FIELD_NUMBER: _ClassVar[int]
    V8_WASM_CODE_FIELD_NUMBER: _ClassVar[int]
    V8_REG_EXP_CODE_FIELD_NUMBER: _ClassVar[int]
    V8_CODE_MOVE_FIELD_NUMBER: _ClassVar[int]
    ANDROID_INPUT_EVENT_FIELD_NUMBER: _ClassVar[int]
    FOR_TESTING_FIELD_NUMBER: _ClassVar[int]
    TRUSTED_UID_FIELD_NUMBER: _ClassVar[int]
    TRUSTED_PACKET_SEQUENCE_ID_FIELD_NUMBER: _ClassVar[int]
    TRUSTED_PID_FIELD_NUMBER: _ClassVar[int]
    INTERNED_DATA_FIELD_NUMBER: _ClassVar[int]
    SEQUENCE_FLAGS_FIELD_NUMBER: _ClassVar[int]
    INCREMENTAL_STATE_CLEARED_FIELD_NUMBER: _ClassVar[int]
    TRACE_PACKET_DEFAULTS_FIELD_NUMBER: _ClassVar[int]
    PREVIOUS_PACKET_DROPPED_FIELD_NUMBER: _ClassVar[int]
    FIRST_PACKET_ON_SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    MACHINE_ID_FIELD_NUMBER: _ClassVar[int]
    timestamp: int
    timestamp_clock_id: int
    process_tree: ProcessTree
    process_stats: ProcessStats
    inode_file_map: InodeFileMap
    chrome_events: ChromeEventBundle
    clock_snapshot: ClockSnapshot
    sys_stats: SysStats
    track_event: TrackEvent
    trace_uuid: TraceUuid
    trace_config: TraceConfig
    ftrace_stats: FtraceStats
    trace_stats: TraceStats
    profile_packet: ProfilePacket
    streaming_allocation: StreamingAllocation
    streaming_free: StreamingFree
    battery: BatteryCounters
    power_rails: PowerRails
    android_log: AndroidLogPacket
    system_info: SystemInfo
    trigger: Trigger
    packages_list: PackagesList
    chrome_benchmark_metadata: ChromeBenchmarkMetadata
    perfetto_metatrace: PerfettoMetatrace
    chrome_metadata: ChromeMetadataPacket
    gpu_counter_event: GpuCounterEvent
    gpu_render_stage_event: GpuRenderStageEvent
    streaming_profile_packet: StreamingProfilePacket
    heap_graph: HeapGraph
    graphics_frame_event: GraphicsFrameEvent
    vulkan_memory_event: VulkanMemoryEvent
    gpu_log: GpuLog
    vulkan_api_event: VulkanApiEvent
    perf_sample: PerfSample
    cpu_info: CpuInfo
    smaps_packet: SmapsPacket
    service_event: TracingServiceEvent
    initial_display_state: InitialDisplayState
    gpu_mem_total_event: GpuMemTotalEvent
    memory_tracker_snapshot: MemoryTrackerSnapshot
    frame_timeline_event: FrameTimelineEvent
    android_energy_estimation_breakdown: AndroidEnergyEstimationBreakdown
    ui_state: UiState
    android_camera_frame_event: AndroidCameraFrameEvent
    android_camera_session_stats: AndroidCameraSessionStats
    translation_table: TranslationTable
    android_game_intervention_list: AndroidGameInterventionList
    statsd_atom: StatsdAtom
    android_system_property: AndroidSystemProperty
    entity_state_residency: EntityStateResidency
    profiled_frame_symbols: ProfiledFrameSymbols
    module_symbols: ModuleSymbols
    deobfuscation_mapping: DeobfuscationMapping
    track_descriptor: TrackDescriptor
    process_descriptor: ProcessDescriptor
    thread_descriptor: ThreadDescriptor
    ftrace_events: FtraceEventBundle
    synchronization_marker: bytes
    compressed_packets: bytes
    extension_descriptor: ExtensionDescriptor
    network_packet: NetworkPacketEvent
    network_packet_bundle: NetworkPacketBundle
    track_event_range_of_interest: TrackEventRangeOfInterest
    surfaceflinger_layers_snapshot: LayersSnapshotProto
    surfaceflinger_transactions: TransactionTraceEntry
    shell_transition: ShellTransition
    shell_handler_mappings: ShellHandlerMappings
    protolog_message: ProtoLogMessage
    protolog_viewer_config: ProtoLogViewerConfig
    etw_events: EtwTraceEventBundle
    v8_js_code: V8JsCode
    v8_internal_code: V8InternalCode
    v8_wasm_code: V8WasmCode
    v8_reg_exp_code: V8RegExpCode
    v8_code_move: V8CodeMove
    android_input_event: AndroidInputEvent
    for_testing: TestEvent
    trusted_uid: int
    trusted_packet_sequence_id: int
    trusted_pid: int
    interned_data: InternedData
    sequence_flags: int
    incremental_state_cleared: bool
    trace_packet_defaults: TracePacketDefaults
    previous_packet_dropped: bool
    first_packet_on_sequence: bool
    machine_id: int
    def __init__(
        self,
        timestamp: _Optional[int] = ...,
        timestamp_clock_id: _Optional[int] = ...,
        process_tree: _Optional[_Union[ProcessTree, _Mapping]] = ...,
        process_stats: _Optional[_Union[ProcessStats, _Mapping]] = ...,
        inode_file_map: _Optional[_Union[InodeFileMap, _Mapping]] = ...,
        chrome_events: _Optional[_Union[ChromeEventBundle, _Mapping]] = ...,
        clock_snapshot: _Optional[_Union[ClockSnapshot, _Mapping]] = ...,
        sys_stats: _Optional[_Union[SysStats, _Mapping]] = ...,
        track_event: _Optional[_Union[TrackEvent, _Mapping]] = ...,
        trace_uuid: _Optional[_Union[TraceUuid, _Mapping]] = ...,
        trace_config: _Optional[_Union[TraceConfig, _Mapping]] = ...,
        ftrace_stats: _Optional[_Union[FtraceStats, _Mapping]] = ...,
        trace_stats: _Optional[_Union[TraceStats, _Mapping]] = ...,
        profile_packet: _Optional[_Union[ProfilePacket, _Mapping]] = ...,
        streaming_allocation: _Optional[_Union[StreamingAllocation, _Mapping]] = ...,
        streaming_free: _Optional[_Union[StreamingFree, _Mapping]] = ...,
        battery: _Optional[_Union[BatteryCounters, _Mapping]] = ...,
        power_rails: _Optional[_Union[PowerRails, _Mapping]] = ...,
        android_log: _Optional[_Union[AndroidLogPacket, _Mapping]] = ...,
        system_info: _Optional[_Union[SystemInfo, _Mapping]] = ...,
        trigger: _Optional[_Union[Trigger, _Mapping]] = ...,
        packages_list: _Optional[_Union[PackagesList, _Mapping]] = ...,
        chrome_benchmark_metadata: _Optional[_Union[ChromeBenchmarkMetadata, _Mapping]] = ...,
        perfetto_metatrace: _Optional[_Union[PerfettoMetatrace, _Mapping]] = ...,
        chrome_metadata: _Optional[_Union[ChromeMetadataPacket, _Mapping]] = ...,
        gpu_counter_event: _Optional[_Union[GpuCounterEvent, _Mapping]] = ...,
        gpu_render_stage_event: _Optional[_Union[GpuRenderStageEvent, _Mapping]] = ...,
        streaming_profile_packet: _Optional[_Union[StreamingProfilePacket, _Mapping]] = ...,
        heap_graph: _Optional[_Union[HeapGraph, _Mapping]] = ...,
        graphics_frame_event: _Optional[_Union[GraphicsFrameEvent, _Mapping]] = ...,
        vulkan_memory_event: _Optional[_Union[VulkanMemoryEvent, _Mapping]] = ...,
        gpu_log: _Optional[_Union[GpuLog, _Mapping]] = ...,
        vulkan_api_event: _Optional[_Union[VulkanApiEvent, _Mapping]] = ...,
        perf_sample: _Optional[_Union[PerfSample, _Mapping]] = ...,
        cpu_info: _Optional[_Union[CpuInfo, _Mapping]] = ...,
        smaps_packet: _Optional[_Union[SmapsPacket, _Mapping]] = ...,
        service_event: _Optional[_Union[TracingServiceEvent, _Mapping]] = ...,
        initial_display_state: _Optional[_Union[InitialDisplayState, _Mapping]] = ...,
        gpu_mem_total_event: _Optional[_Union[GpuMemTotalEvent, _Mapping]] = ...,
        memory_tracker_snapshot: _Optional[_Union[MemoryTrackerSnapshot, _Mapping]] = ...,
        frame_timeline_event: _Optional[_Union[FrameTimelineEvent, _Mapping]] = ...,
        android_energy_estimation_breakdown: _Optional[_Union[AndroidEnergyEstimationBreakdown, _Mapping]] = ...,
        ui_state: _Optional[_Union[UiState, _Mapping]] = ...,
        android_camera_frame_event: _Optional[_Union[AndroidCameraFrameEvent, _Mapping]] = ...,
        android_camera_session_stats: _Optional[_Union[AndroidCameraSessionStats, _Mapping]] = ...,
        translation_table: _Optional[_Union[TranslationTable, _Mapping]] = ...,
        android_game_intervention_list: _Optional[_Union[AndroidGameInterventionList, _Mapping]] = ...,
        statsd_atom: _Optional[_Union[StatsdAtom, _Mapping]] = ...,
        android_system_property: _Optional[_Union[AndroidSystemProperty, _Mapping]] = ...,
        entity_state_residency: _Optional[_Union[EntityStateResidency, _Mapping]] = ...,
        profiled_frame_symbols: _Optional[_Union[ProfiledFrameSymbols, _Mapping]] = ...,
        module_symbols: _Optional[_Union[ModuleSymbols, _Mapping]] = ...,
        deobfuscation_mapping: _Optional[_Union[DeobfuscationMapping, _Mapping]] = ...,
        track_descriptor: _Optional[_Union[TrackDescriptor, _Mapping]] = ...,
        process_descriptor: _Optional[_Union[ProcessDescriptor, _Mapping]] = ...,
        thread_descriptor: _Optional[_Union[ThreadDescriptor, _Mapping]] = ...,
        ftrace_events: _Optional[_Union[FtraceEventBundle, _Mapping]] = ...,
        synchronization_marker: _Optional[bytes] = ...,
        compressed_packets: _Optional[bytes] = ...,
        extension_descriptor: _Optional[_Union[ExtensionDescriptor, _Mapping]] = ...,
        network_packet: _Optional[_Union[NetworkPacketEvent, _Mapping]] = ...,
        network_packet_bundle: _Optional[_Union[NetworkPacketBundle, _Mapping]] = ...,
        track_event_range_of_interest: _Optional[_Union[TrackEventRangeOfInterest, _Mapping]] = ...,
        surfaceflinger_layers_snapshot: _Optional[_Union[LayersSnapshotProto, _Mapping]] = ...,
        surfaceflinger_transactions: _Optional[_Union[TransactionTraceEntry, _Mapping]] = ...,
        shell_transition: _Optional[_Union[ShellTransition, _Mapping]] = ...,
        shell_handler_mappings: _Optional[_Union[ShellHandlerMappings, _Mapping]] = ...,
        protolog_message: _Optional[_Union[ProtoLogMessage, _Mapping]] = ...,
        protolog_viewer_config: _Optional[_Union[ProtoLogViewerConfig, _Mapping]] = ...,
        etw_events: _Optional[_Union[EtwTraceEventBundle, _Mapping]] = ...,
        v8_js_code: _Optional[_Union[V8JsCode, _Mapping]] = ...,
        v8_internal_code: _Optional[_Union[V8InternalCode, _Mapping]] = ...,
        v8_wasm_code: _Optional[_Union[V8WasmCode, _Mapping]] = ...,
        v8_reg_exp_code: _Optional[_Union[V8RegExpCode, _Mapping]] = ...,
        v8_code_move: _Optional[_Union[V8CodeMove, _Mapping]] = ...,
        android_input_event: _Optional[_Union[AndroidInputEvent, _Mapping]] = ...,
        for_testing: _Optional[_Union[TestEvent, _Mapping]] = ...,
        trusted_uid: _Optional[int] = ...,
        trusted_packet_sequence_id: _Optional[int] = ...,
        trusted_pid: _Optional[int] = ...,
        interned_data: _Optional[_Union[InternedData, _Mapping]] = ...,
        sequence_flags: _Optional[int] = ...,
        incremental_state_cleared: bool = ...,
        trace_packet_defaults: _Optional[_Union[TracePacketDefaults, _Mapping]] = ...,
        previous_packet_dropped: bool = ...,
        first_packet_on_sequence: bool = ...,
        machine_id: _Optional[int] = ...,
    ) -> None: ...

class Trace(_message.Message):
    __slots__ = ("packet",)
    PACKET_FIELD_NUMBER: _ClassVar[int]
    packet: _containers.RepeatedCompositeFieldContainer[TracePacket]
    def __init__(self, packet: _Optional[_Iterable[_Union[TracePacket, _Mapping]]] = ...) -> None: ...
